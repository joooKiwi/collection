//··························································
// Copyright (c) 2023-2025. Jonathan Bédard ~ JóôòKiwi
//
// This project is free to use.
// All the right is reserved to the author of this project.
// My projects:
//  - https://github.com/joooKiwi/type
//  - https://github.com/joooKiwi/lazy
//  - https://github.com/joooKiwi/collection
//  - https://github.com/joooKiwi/enumeration
//··························································

import {EmptyCollectionHolderForTest}                                                                                                                                                                                        from "./instance/EmptyCollectionHolderForTest"
import {GenericCollectionHolder_FirstIndexOfAlias}                                                                                                                                                                           from "./instance/GenericCollectionHolder_FirstIndexOfAlias"
import {GenericCollectionHolder_FirstIndexOfOrNullAlias}                                                                                                                                                                     from "./instance/GenericCollectionHolder_FirstIndexOfOrNullAlias"
import {GenericCollectionHolder_IndexOfFirstAlias}                                                                                                                                                                           from "./instance/GenericCollectionHolder_IndexOfFirstAlias"
import {GenericCollectionHolder_IndexOfFirstIndexedAlias}                                                                                                                                                                    from "./instance/GenericCollectionHolder_IndexOfFirstIndexedAlias"
import {GenericCollectionHolder_IndexOfFirstIndexedOrNullAlias}                                                                                                                                                              from "./instance/GenericCollectionHolder_IndexOfFirstIndexedOrNullAlias"
import {GenericCollectionHolder_IndexOfFirstOrNullAlias}                                                                                                                                                                     from "./instance/GenericCollectionHolder_IndexOfFirstOrNullAlias"
import {GenericCollectionHolder_IndexOfLastAlias}                                                                                                                                                                            from "./instance/GenericCollectionHolder_IndexOfLastAlias"
import {GenericCollectionHolder_IndexOfLastIndexedAlias}                                                                                                                                                                     from "./instance/GenericCollectionHolder_IndexOfLastIndexedAlias"
import {GenericCollectionHolder_IndexOfLastIndexedOrNullAlias}                                                                                                                                                               from "./instance/GenericCollectionHolder_IndexOfLastIndexedOrNullAlias"
import {GenericCollectionHolder_IndexOfLastOrNullAlias}                                                                                                                                                                      from "./instance/GenericCollectionHolder_IndexOfLastOrNullAlias"
import {LazyGenericCollectionHolder_FirstIndexOfAlias}                                                                                                                                                                       from "./instance/LazyGenericCollectionHolder_FirstIndexOfAlias"
import {LazyGenericCollectionHolder_FirstIndexOfOrNullAlias}                                                                                                                                                                 from "./instance/LazyGenericCollectionHolder_FirstIndexOfOrNullAlias"
import {LazyGenericCollectionHolder_IndexOfFirstAlias}                                                                                                                                                                       from "./instance/LazyGenericCollectionHolder_IndexOfFirstAlias"
import {LazyGenericCollectionHolder_IndexOfFirstIndexedAlias}                                                                                                                                                                from "./instance/LazyGenericCollectionHolder_IndexOfFirstIndexedAlias"
import {LazyGenericCollectionHolder_IndexOfFirstIndexedOrNullAlias}                                                                                                                                                          from "./instance/LazyGenericCollectionHolder_IndexOfFirstIndexedOrNullAlias"
import {LazyGenericCollectionHolder_IndexOfFirstOrNullAlias}                                                                                                                                                                 from "./instance/LazyGenericCollectionHolder_IndexOfFirstOrNullAlias"
import {LazyGenericCollectionHolder_IndexOfLastAlias}                                                                                                                                                                        from "./instance/LazyGenericCollectionHolder_IndexOfLastAlias"
import {LazyGenericCollectionHolder_IndexOfLastIndexedAlias}                                                                                                                                                                 from "./instance/LazyGenericCollectionHolder_IndexOfLastIndexedAlias"
import {LazyGenericCollectionHolder_IndexOfLastIndexedOrNullAlias}                                                                                                                                                           from "./instance/LazyGenericCollectionHolder_IndexOfLastIndexedOrNullAlias"
import {LazyGenericCollectionHolder_IndexOfLastOrNullAlias}                                                                                                                                                                  from "./instance/LazyGenericCollectionHolder_IndexOfLastOrNullAlias"
import {A, AA, AB, ABAB, ABCD, EMPTY}                                                                                                                                                                                        from "./value/arrays"
import {callbackAsFalse0, callbackAsFalse1, callbackAsFalse2, callbackAsTrue0, callbackAsTrue1, callbackAsTrue2, falseCallbacks, trueCallbacks}                                                                              from "./value/callbacks (boolean)"
import {callbackAsFail0, callbackAsFail1, callbackAsFail2}                                                                                                                                                                   from "./value/callbacks (fail)"
import {callbackIs0, callbackIs0Alt, callbackIs1, callbackIs1Alt, callbackIs2, callbackIs2Alt, callbackIs3, callbackIs3Alt, callbackIs4, callbackIs4Alt, callbackIsEven, callbackIsEvenAlt, callbackIsOdd, callbackIsOddAlt} from "./value/callbacks (number)"
import {callbackIsA, callbackIsAAlt, callbackIsB, callbackIsBAlt, callbackIsC, callbackIsCAlt, callbackIsD, callbackIsDAlt, callbackIsE, callbackIsEAlt}                                                                     from "./value/callbacks (string)"
import {everyCollectionInstancesAndExtensionFunctionAsCollectionHolder}                                                                                                                                                      from "./value/instances"

import {EmptyCollectionException}   from "../src/exception/EmptyCollectionException"
import {ForbiddenIndexException}    from "../src/exception/ForbiddenIndexException"
import {IndexOutOfBoundsException}  from "../src/exception/IndexOutOfBoundsException"
import {InvalidIndexRangeException} from "../src/exception/InvalidIndexRangeException"

describe("CollectionHolderTest (index)", () => {

    describe("EmptyCollectionHolder", () => {
        test("firstIndexOf",                () => expect(() => new EmptyCollectionHolderForTest().firstIndexOf(),).toThrow(EmptyCollectionException,),)
        test("indexOf",                     () => expect(() => new EmptyCollectionHolderForTest().indexOf(),).toThrow(EmptyCollectionException,),)
        test("firstIndexOfOrNull",          () => expect(new EmptyCollectionHolderForTest().firstIndexOfOrNull(),).toBeNull(),)
        test("indexOfOrNull",               () => expect(new EmptyCollectionHolderForTest().indexOfOrNull(),).toBeNull(),)
        test("lastIndexOf",                 () => expect(() => new EmptyCollectionHolderForTest().lastIndexOf(),).toThrow(EmptyCollectionException,),)
        test("lastIndexOfOrNull",           () => expect(new EmptyCollectionHolderForTest().lastIndexOfOrNull(),).toBeNull(),)
        test("indexOfFirst",                () => expect(() => new EmptyCollectionHolderForTest().indexOfFirst(),).toThrow(EmptyCollectionException,),)
        test("findFirstIndex",              () => expect(() => new EmptyCollectionHolderForTest().findFirstIndex(),).toThrow(EmptyCollectionException,),)
        test("findIndex",                   () => expect(() => new EmptyCollectionHolderForTest().findIndex(),).toThrow(EmptyCollectionException,),)
        test("indexOfFirstOrNull",          () => expect(new EmptyCollectionHolderForTest().indexOfFirstOrNull(),).toBeNull(),)
        test("findFirstIndexOrNull",        () => expect(new EmptyCollectionHolderForTest().findFirstIndexOrNull(),).toBeNull(),)
        test("findIndexOrNull",             () => expect(new EmptyCollectionHolderForTest().findIndexOrNull(),).toBeNull(),)
        test("indexOfFirstIndexed",         () => expect(() => new EmptyCollectionHolderForTest().indexOfFirstIndexed(),).toThrow(EmptyCollectionException,),)
        test("findFirstIndexIndexed",       () => expect(() => new EmptyCollectionHolderForTest().findFirstIndexIndexed(),).toThrow(EmptyCollectionException,),)
        test("findIndexIndexed",            () => expect(() => new EmptyCollectionHolderForTest().findIndexIndexed(),).toThrow(EmptyCollectionException,),)
        test("indexOfFirstIndexedOrNull",   () => expect(new EmptyCollectionHolderForTest().indexOfFirstIndexedOrNull(),).toBeNull(),)
        test("findFirstIndexIndexedOrNull", () => expect(new EmptyCollectionHolderForTest().findFirstIndexIndexedOrNull(),).toBeNull(),)
        test("findIndexIndexedOrNull",      () => expect(new EmptyCollectionHolderForTest().findIndexIndexedOrNull(),).toBeNull(),)
        test("indexOfLast",                 () => expect(() => new EmptyCollectionHolderForTest().indexOfLast(),).toThrow(EmptyCollectionException,),)
        test("findLastIndex",               () => expect(() => new EmptyCollectionHolderForTest().findLastIndex(),).toThrow(EmptyCollectionException,),)
        test("indexOfLastOrNull",           () => expect(new EmptyCollectionHolderForTest().indexOfLastOrNull(),).toBeNull(),)
        test("findLastIndexOrNull",         () => expect(new EmptyCollectionHolderForTest().findLastIndexOrNull(),).toBeNull(),)
        test("indexOfLastIndexed",          () => expect(() => new EmptyCollectionHolderForTest().indexOfLastIndexed(),).toThrow(EmptyCollectionException,),)
        test("findLastIndexIndexed",        () => expect(() => new EmptyCollectionHolderForTest().findLastIndexIndexed(),).toThrow(EmptyCollectionException,),)
        test("indexOfLastIndexedOrNull",    () => expect(new EmptyCollectionHolderForTest().indexOfLastIndexedOrNull(),).toBeNull(),)
        test("findLastIndexIndexedOrNull",  () => expect(new EmptyCollectionHolderForTest().findLastIndexIndexedOrNull(),).toBeNull(),)
    },)

    describe("aliases", () => {
        describe("GenericCollectionHolder", () => {
            test("indexOf",                     () => expect(new GenericCollectionHolder_FirstIndexOfAlias().execute(it => it.indexOf("a",),).amountOfCall,).toBe(1,),)
            test("indexOfOrNull",               () => expect(new GenericCollectionHolder_FirstIndexOfOrNullAlias().execute(it => it.indexOfOrNull("a",),).amountOfCall,).toBe(1,),)
            test("findFirstIndex",              () => expect(new GenericCollectionHolder_IndexOfFirstAlias().execute(it => it.findFirstIndex(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
            test("findIndex",                   () => expect(new GenericCollectionHolder_IndexOfFirstAlias().execute(it => it.findIndex(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
            test("findFirstIndexOrNull",        () => expect(new GenericCollectionHolder_IndexOfFirstOrNullAlias().execute(it => it.findFirstIndexOrNull(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
            test("findIndexOrNull",             () => expect(new GenericCollectionHolder_IndexOfFirstOrNullAlias().execute(it => it.findIndexOrNull(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
            test("findFirstIndexIndexed",       () => expect(new GenericCollectionHolder_IndexOfFirstIndexedAlias().execute(it => it.findFirstIndexIndexed(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
            test("findIndexIndexed",            () => expect(new GenericCollectionHolder_IndexOfFirstIndexedAlias().execute(it => it.findIndexIndexed(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
            test("findFirstIndexIndexedOrNull", () => expect(new GenericCollectionHolder_IndexOfFirstIndexedOrNullAlias().execute(it => it.findFirstIndexIndexedOrNull(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
            test("findIndexIndexedOrNull",      () => expect(new GenericCollectionHolder_IndexOfFirstIndexedOrNullAlias().execute(it => it.findIndexIndexedOrNull(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
            test("finLastIndex",                () => expect(new GenericCollectionHolder_IndexOfLastAlias().execute(it => it.findLastIndex(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
            test("finLastIndexOrNull",          () => expect(new GenericCollectionHolder_IndexOfLastOrNullAlias().execute(it => it.findLastIndexOrNull(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
            test("finLastIndexIndexed",         () => expect(new GenericCollectionHolder_IndexOfLastIndexedAlias().execute(it => it.findLastIndexIndexed(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
            test("finLastIndexIndexedOrNull",   () => expect(new GenericCollectionHolder_IndexOfLastIndexedOrNullAlias().execute(it => it.findLastIndexIndexedOrNull(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
        },)
        describe("LazyGenericCollectionHolder", () => {
            test("indexOf",                     () => expect(new LazyGenericCollectionHolder_FirstIndexOfAlias().execute(it => it.indexOf("a",),).amountOfCall,).toBe(1,),)
            test("indexOfOrNull",               () => expect(new LazyGenericCollectionHolder_FirstIndexOfOrNullAlias().execute(it => it.indexOfOrNull("a",),).amountOfCall,).toBe(1,),)
            test("findFirstIndex",              () => expect(new LazyGenericCollectionHolder_IndexOfFirstAlias().execute(it => it.findFirstIndex(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
            test("findIndex",                   () => expect(new LazyGenericCollectionHolder_IndexOfFirstAlias().execute(it => it.findIndex(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
            test("findFirstIndexOrNull",        () => expect(new LazyGenericCollectionHolder_IndexOfFirstOrNullAlias().execute(it => it.findFirstIndexOrNull(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
            test("findIndexOrNull",             () => expect(new LazyGenericCollectionHolder_IndexOfFirstOrNullAlias().execute(it => it.findIndexOrNull(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
            test("findFirstIndexIndexed",       () => expect(new LazyGenericCollectionHolder_IndexOfFirstIndexedAlias().execute(it => it.findFirstIndexIndexed(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
            test("findIndexIndexed",            () => expect(new LazyGenericCollectionHolder_IndexOfFirstIndexedAlias().execute(it => it.findIndexIndexed(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
            test("findFirstIndexIndexedOrNull", () => expect(new LazyGenericCollectionHolder_IndexOfFirstIndexedOrNullAlias().execute(it => it.findFirstIndexIndexedOrNull(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
            test("findIndexIndexedOrNull",      () => expect(new LazyGenericCollectionHolder_IndexOfFirstIndexedOrNullAlias().execute(it => it.findIndexIndexedOrNull(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
            test("finLastIndex",                () => expect(new LazyGenericCollectionHolder_IndexOfLastAlias().execute(it => it.findLastIndex(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
            test("finLastIndexOrNull",          () => expect(new LazyGenericCollectionHolder_IndexOfLastOrNullAlias().execute(it => it.findLastIndexOrNull(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
            test("finLastIndexIndexed",         () => expect(new LazyGenericCollectionHolder_IndexOfLastIndexedAlias().execute(it => it.findLastIndexIndexed(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
            test("finLastIndexIndexedOrNull",   () => expect(new LazyGenericCollectionHolder_IndexOfLastIndexedOrNullAlias().execute(it => it.findLastIndexIndexedOrNull(callbackAsTrue0,),).amountOfCall,).toBe(1,),)
        },)
    },)

    describe.each(everyCollectionInstancesAndExtensionFunctionAsCollectionHolder,)("%s", ({value: {instance, isExtension,},},) => {
        if (!isExtension)
            describe("get() being called", () => {
                describe("firstIndexOf", () => {
                    test("empty",        () => expect(new instance<string>(EMPTY,).executeWhileExpectingEmptyException(it => it.firstIndexOf('a',),).amountOfCall,).toBe(0,),)
                    test("1 field (a)",  () => expect(new instance(A,).execute(it => it.firstIndexOf('a',),).amountOfCall,).toBe(1,),)
                    test("1 field (e)",  () => expect(new instance<string>(A,).executeWhileExpectingIndexOutOfBound(it => it.firstIndexOf('e',),).amountOfCall,).toBe(1,),)
                    test("2 fields (a)", () => expect(new instance(AB,).execute(it => it.firstIndexOf('a',),).amountOfCall,).toBe(1,),)
                    test("2 fields (k)", () => expect(new instance<string>(AB,).executeWhileExpectingIndexOutOfBound(it => it.firstIndexOf('k',),).amountOfCall,).toBe(2,),)
                    test("4 fields (a)", () => expect(new instance(ABCD,).execute(it => it.firstIndexOf('a',),).amountOfCall,).toBe(1,),)
                    test("4 fields (k)", () => expect(new instance<string>(ABCD,).executeWhileExpectingIndexOutOfBound(it => it.firstIndexOf('k',),).amountOfCall,).toBe(4,),)
                },)
                describe("firstIndexOfOrNull", () => {
                    test("empty",        () => expect(new instance<string>(EMPTY,).execute(it => it.firstIndexOfOrNull('a',),).amountOfCall,).toBe(0,),)
                    test("1 field (a)",  () => expect(new instance(A,).execute(it => it.firstIndexOfOrNull('a',),).amountOfCall,).toBe(1,),)
                    test("1 field (e)",  () => expect(new instance<string>(A,).execute(it => it.firstIndexOfOrNull('e',),).amountOfCall,).toBe(1,),)
                    test("2 fields (a)", () => expect(new instance(AB,).execute(it => it.firstIndexOfOrNull('a',),).amountOfCall,).toBe(1,),)
                    test("2 fields (k)", () => expect(new instance<string>(AB,).execute(it => it.firstIndexOfOrNull('k',),).amountOfCall,).toBe(2,),)
                    test("4 fields (a)", () => expect(new instance(ABCD,).execute(it => it.firstIndexOfOrNull('a',),).amountOfCall,).toBe(1,),)
                    test("4 fields (k)", () => expect(new instance<string>(ABCD,).execute(it => it.firstIndexOfOrNull('k',),).amountOfCall,).toBe(4,),)
                },)

                describe("lastIndexOf", () => {
                    test("empty",        () => expect(new instance<string>(EMPTY,).executeWhileExpectingEmptyException(it => it.lastIndexOf('a',),).amountOfCall,).toBe(0,),)
                    test("1 field (a)",  () => expect(new instance(A,).execute(it => it.lastIndexOf('a',),).amountOfCall,).toBe(1,),)
                    test("1 field (k)",  () => expect(new instance<string>(A,).executeWhileExpectingIndexOutOfBound(it => it.lastIndexOf('k',),).amountOfCall,).toBe(1,),)
                    test("2 fields (b)", () => expect(new instance(AB,).execute(it => it.lastIndexOf('b',),).amountOfCall,).toBe(1,),)
                    test("2 fields (k)", () => expect(new instance<string>(AB,).executeWhileExpectingIndexOutOfBound(it => it.lastIndexOf('k',),).amountOfCall,).toBe(2,),)
                    test("4 fields (d)", () => expect(new instance(ABCD,).execute(it => it.lastIndexOf('d',),).amountOfCall,).toBe(1,),)
                    test("4 fields (k)", () => expect(new instance<string>(ABCD,).executeWhileExpectingIndexOutOfBound(it => it.lastIndexOf('k',),).amountOfCall,).toBe(4,),)
                },)
                describe("lastIndexOfOrNull", () => {
                    test("empty",        () => expect(new instance<string>(EMPTY,).execute(it => it.lastIndexOfOrNull('a',),).amountOfCall,).toBe(0,),)
                    test("1 field (a)",  () => expect(new instance(A,).execute(it => it.lastIndexOfOrNull('a',),).amountOfCall,).toBe(1,),)
                    test("1 field (k)",  () => expect(new instance<string>(A,).execute(it => it.lastIndexOfOrNull('k',),).amountOfCall,).toBe(1,),)
                    test("2 fields (b)", () => expect(new instance(AB,).execute(it => it.lastIndexOfOrNull('b',),).amountOfCall,).toBe(1,),)
                    test("2 fields (k)", () => expect(new instance<string>(AB,).execute(it => it.lastIndexOfOrNull('k',),).amountOfCall,).toBe(2,),)
                    test("4 fields (d)", () => expect(new instance(ABCD,).execute(it => it.lastIndexOfOrNull('d',),).amountOfCall,).toBe(1,),)
                    test("4 fields (k)", () => expect(new instance<string>(ABCD,).execute(it => it.lastIndexOfOrNull('k',),).amountOfCall,).toBe(4,),)
                },)

                describe("indexOfFirst", () => {
                    describe("empty", () => {
                        test("0 arguments", () => expect(new instance(EMPTY,).executeWhileExpectingEmptyException(it => it.indexOfFirst(callbackAsFail0,),).amountOfCall,).toBe(0,),)
                        test("1 argument",  () => expect(new instance(EMPTY,).executeWhileExpectingEmptyException(it => it.indexOfFirst(callbackAsFail1,),).amountOfCall,).toBe(0,),)
                        test("2 arguments", () => expect(new instance(EMPTY,).executeWhileExpectingEmptyException(it => it.indexOfFirst(callbackAsFail2,),).amountOfCall,).toBe(0,),)
                    },)
                    describe("1 field", () => {
                        test("true: 0 arguments",  () => expect(new instance(A,).execute(it => it.indexOfFirst(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(A,).execute(it => it.indexOfFirst(callbackAsTrue1,),).amountOfCall,).toBe(1,),)
                        test("true: 2 arguments",  () => expect(new instance(A,).execute(it => it.indexOfFirst(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(A,).executeWhileExpectingIndexOutOfBound(it => it.indexOfFirst(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(A,).executeWhileExpectingIndexOutOfBound(it => it.indexOfFirst(callbackAsFalse1,),).amountOfCall,).toBe(1,),)
                        test("false: 2 arguments", () => expect(new instance(A,).executeWhileExpectingIndexOutOfBound(it => it.indexOfFirst(callbackAsFalse2,),).amountOfCall,).toBe(1,),)
                    },)
                    describe("2 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfFirst(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(AB,).execute(it => it.indexOfFirst(callbackAsTrue1,),).amountOfCall,).toBe(1,),)
                        test("true: 2 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfFirst(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(AB,).executeWhileExpectingIndexOutOfBound(it => it.indexOfFirst(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(AB,).executeWhileExpectingIndexOutOfBound(it => it.indexOfFirst(callbackAsFalse1,),).amountOfCall,).toBe(2,),)
                        test("false: 2 arguments", () => expect(new instance(AB,).executeWhileExpectingIndexOutOfBound(it => it.indexOfFirst(callbackAsFalse2,),).amountOfCall,).toBe(2,),)
                    },)
                    describe("4 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfFirst(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(ABCD,).execute(it => it.indexOfFirst(callbackAsTrue1,),).amountOfCall,).toBe(1,),)
                        test("true: 2 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfFirst(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(ABCD,).executeWhileExpectingIndexOutOfBound(it => it.indexOfFirst(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(ABCD,).executeWhileExpectingIndexOutOfBound(it => it.indexOfFirst(callbackAsFalse1,),).amountOfCall,).toBe(4,),)
                        test("false: 2 arguments", () => expect(new instance(ABCD,).executeWhileExpectingIndexOutOfBound(it => it.indexOfFirst(callbackAsFalse2,),).amountOfCall,).toBe(4,),)
                    },)
                },)
                describe("indexOfFirstOrNull", () => {
                    describe("empty", () => {
                        test("0 arguments", () => expect(new instance(EMPTY,).execute(it => it.indexOfFirstOrNull(callbackAsFail0,),).amountOfCall,).toBe(0,),)
                        test("1 argument",  () => expect(new instance(EMPTY,).execute(it => it.indexOfFirstOrNull(callbackAsFail1,),).amountOfCall,).toBe(0,),)
                        test("2 arguments", () => expect(new instance(EMPTY,).execute(it => it.indexOfFirstOrNull(callbackAsFail2,),).amountOfCall,).toBe(0,),)
                    },)
                    describe("1 field", () => {
                        test("true: 0 arguments",  () => expect(new instance(A,).execute(it => it.indexOfFirstOrNull(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(A,).execute(it => it.indexOfFirstOrNull(callbackAsTrue1,),).amountOfCall,).toBe(1,),)
                        test("true: 2 arguments",  () => expect(new instance(A,).execute(it => it.indexOfFirstOrNull(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(A,).execute(it => it.indexOfFirstOrNull(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(A,).execute(it => it.indexOfFirstOrNull(callbackAsFalse1,),).amountOfCall,).toBe(1,),)
                        test("false: 2 arguments", () => expect(new instance(A,).execute(it => it.indexOfFirstOrNull(callbackAsFalse2,),).amountOfCall,).toBe(1,),)
                    },)
                    describe("2 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfFirstOrNull(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(AB,).execute(it => it.indexOfFirstOrNull(callbackAsTrue1,),).amountOfCall,).toBe(1,),)
                        test("true: 2 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfFirstOrNull(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(AB,).execute(it => it.indexOfFirstOrNull(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(AB,).execute(it => it.indexOfFirstOrNull(callbackAsFalse1,),).amountOfCall,).toBe(2,),)
                        test("false: 2 arguments", () => expect(new instance(AB,).execute(it => it.indexOfFirstOrNull(callbackAsFalse2,),).amountOfCall,).toBe(2,),)
                    },)
                    describe("4 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfFirstOrNull(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(ABCD,).execute(it => it.indexOfFirstOrNull(callbackAsTrue1,),).amountOfCall,).toBe(1,),)
                        test("true: 2 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfFirstOrNull(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(ABCD,).execute(it => it.indexOfFirstOrNull(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(ABCD,).execute(it => it.indexOfFirstOrNull(callbackAsFalse1,),).amountOfCall,).toBe(4,),)
                        test("false: 2 arguments", () => expect(new instance(ABCD,).execute(it => it.indexOfFirstOrNull(callbackAsFalse2,),).amountOfCall,).toBe(4,),)
                    },)
                },)
                describe("indexOfFirstIndexed", () => {
                    describe("empty", () => {
                        test("0 arguments", () => expect(new instance(EMPTY,).executeWhileExpectingEmptyException(it => it.indexOfFirstIndexed(callbackAsFail0,),).amountOfCall,).toBe(0,),)
                        test("1 argument",  () => expect(new instance(EMPTY,).executeWhileExpectingEmptyException(it => it.indexOfFirstIndexed(callbackAsFail1,),).amountOfCall,).toBe(0,),)
                        test("2 arguments", () => expect(new instance(EMPTY,).executeWhileExpectingEmptyException(it => it.indexOfFirstIndexed(callbackAsFail2,),).amountOfCall,).toBe(0,),)
                    },)
                    describe("1 field", () => {
                        test("true: 0 arguments",  () => expect(new instance(A,).execute(it => it.indexOfFirstIndexed(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(A,).execute(it => it.indexOfFirstIndexed(callbackAsTrue1,),).amountOfCall,).toBe(0,),)
                        test("true: 2 arguments",  () => expect(new instance(A,).execute(it => it.indexOfFirstIndexed(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(A,).executeWhileExpectingIndexOutOfBound(it => it.indexOfFirstIndexed(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(A,).executeWhileExpectingIndexOutOfBound(it => it.indexOfFirstIndexed(callbackAsFalse1,),).amountOfCall,).toBe(0,),)
                        test("false: 2 arguments", () => expect(new instance(A,).executeWhileExpectingIndexOutOfBound(it => it.indexOfFirstIndexed(callbackAsFalse2,),).amountOfCall,).toBe(1,),)
                    },)
                    describe("2 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfFirstIndexed(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(AB,).execute(it => it.indexOfFirstIndexed(callbackAsTrue1,),).amountOfCall,).toBe(0,),)
                        test("true: 2 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfFirstIndexed(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(AB,).executeWhileExpectingIndexOutOfBound(it => it.indexOfFirstIndexed(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(AB,).executeWhileExpectingIndexOutOfBound(it => it.indexOfFirstIndexed(callbackAsFalse1,),).amountOfCall,).toBe(0,),)
                        test("false: 2 arguments", () => expect(new instance(AB,).executeWhileExpectingIndexOutOfBound(it => it.indexOfFirstIndexed(callbackAsFalse2,),).amountOfCall,).toBe(2,),)
                    },)
                    describe("4 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfFirstIndexed(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(ABCD,).execute(it => it.indexOfFirstIndexed(callbackAsTrue1,),).amountOfCall,).toBe(0,),)
                        test("true: 2 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfFirstIndexed(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(ABCD,).executeWhileExpectingIndexOutOfBound(it => it.indexOfFirstIndexed(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(ABCD,).executeWhileExpectingIndexOutOfBound(it => it.indexOfFirstIndexed(callbackAsFalse1,),).amountOfCall,).toBe(0,),)
                        test("false: 2 arguments", () => expect(new instance(ABCD,).executeWhileExpectingIndexOutOfBound(it => it.indexOfFirstIndexed(callbackAsFalse2,),).amountOfCall,).toBe(4,),)
                    },)
                },)
                describe("indexOfFirstIndexedOrNull", () => {
                    describe("empty", () => {
                        test("0 arguments", () => expect(new instance(EMPTY,).execute(it => it.indexOfFirstIndexedOrNull(callbackAsFail0,),).amountOfCall,).toBe(0,),)
                        test("1 argument",  () => expect(new instance(EMPTY,).execute(it => it.indexOfFirstIndexedOrNull(callbackAsFail1,),).amountOfCall,).toBe(0,),)
                        test("2 arguments", () => expect(new instance(EMPTY,).execute(it => it.indexOfFirstIndexedOrNull(callbackAsFail2,),).amountOfCall,).toBe(0,),)
                    },)
                    describe("1 field", () => {
                        test("true: 0 arguments",  () => expect(new instance(A,).execute(it => it.indexOfFirstIndexedOrNull(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(A,).execute(it => it.indexOfFirstIndexedOrNull(callbackAsTrue1,),).amountOfCall,).toBe(0,),)
                        test("true: 2 arguments",  () => expect(new instance(A,).execute(it => it.indexOfFirstIndexedOrNull(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(A,).execute(it => it.indexOfFirstIndexedOrNull(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(A,).execute(it => it.indexOfFirstIndexedOrNull(callbackAsFalse1,),).amountOfCall,).toBe(0,),)
                        test("false: 2 arguments", () => expect(new instance(A,).execute(it => it.indexOfFirstIndexedOrNull(callbackAsFalse2,),).amountOfCall,).toBe(1,),)
                    },)
                    describe("2 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfFirstIndexedOrNull(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(AB,).execute(it => it.indexOfFirstIndexedOrNull(callbackAsTrue1,),).amountOfCall,).toBe(0,),)
                        test("true: 2 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfFirstIndexedOrNull(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(AB,).execute(it => it.indexOfFirstIndexedOrNull(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(AB,).execute(it => it.indexOfFirstIndexedOrNull(callbackAsFalse1,),).amountOfCall,).toBe(0,),)
                        test("false: 2 arguments", () => expect(new instance(AB,).execute(it => it.indexOfFirstIndexedOrNull(callbackAsFalse2,),).amountOfCall,).toBe(2,),)
                    },)
                    describe("4 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfFirstIndexedOrNull(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(ABCD,).execute(it => it.indexOfFirstIndexedOrNull(callbackAsTrue1,),).amountOfCall,).toBe(0,),)
                        test("true: 2 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfFirstIndexedOrNull(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(ABCD,).execute(it => it.indexOfFirstIndexedOrNull(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(ABCD,).execute(it => it.indexOfFirstIndexedOrNull(callbackAsFalse1,),).amountOfCall,).toBe(0,),)
                        test("false: 2 arguments", () => expect(new instance(ABCD,).execute(it => it.indexOfFirstIndexedOrNull(callbackAsFalse2,),).amountOfCall,).toBe(4,),)
                    },)
                },)

                describe("indexOfLast", () => {
                    describe("empty", () => {
                        test("0 arguments", () => expect(new instance(EMPTY,).executeWhileExpectingEmptyException(it => it.indexOfLast(callbackAsFail0,),).amountOfCall,).toBe(0,),)
                        test("1 argument",  () => expect(new instance(EMPTY,).executeWhileExpectingEmptyException(it => it.indexOfLast(callbackAsFail1,),).amountOfCall,).toBe(0,),)
                        test("2 arguments", () => expect(new instance(EMPTY,).executeWhileExpectingEmptyException(it => it.indexOfLast(callbackAsFail2,),).amountOfCall,).toBe(0,),)
                    },)
                    describe("1 field", () => {
                        test("true: 0 arguments",  () => expect(new instance(A,).execute(it => it.indexOfLast(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(A,).execute(it => it.indexOfLast(callbackAsTrue1,),).amountOfCall,).toBe(1,),)
                        test("true: 2 arguments",  () => expect(new instance(A,).execute(it => it.indexOfLast(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(A,).executeWhileExpectingIndexOutOfBound(it => it.indexOfLast(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(A,).executeWhileExpectingIndexOutOfBound(it => it.indexOfLast(callbackAsFalse1,),).amountOfCall,).toBe(1,),)
                        test("false: 2 arguments", () => expect(new instance(A,).executeWhileExpectingIndexOutOfBound(it => it.indexOfLast(callbackAsFalse2,),).amountOfCall,).toBe(1,),)
                    },)
                    describe("2 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfLast(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(AB,).execute(it => it.indexOfLast(callbackAsTrue1,),).amountOfCall,).toBe(1,),)
                        test("true: 2 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfLast(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(AB,).executeWhileExpectingIndexOutOfBound(it => it.indexOfLast(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(AB,).executeWhileExpectingIndexOutOfBound(it => it.indexOfLast(callbackAsFalse1,),).amountOfCall,).toBe(2,),)
                        test("false: 2 arguments", () => expect(new instance(AB,).executeWhileExpectingIndexOutOfBound(it => it.indexOfLast(callbackAsFalse2,),).amountOfCall,).toBe(2,),)
                    },)
                    describe("4 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfLast(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(ABCD,).execute(it => it.indexOfLast(callbackAsTrue1,),).amountOfCall,).toBe(1,),)
                        test("true: 2 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfLast(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(ABCD,).executeWhileExpectingIndexOutOfBound(it => it.indexOfLast(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(ABCD,).executeWhileExpectingIndexOutOfBound(it => it.indexOfLast(callbackAsFalse1,),).amountOfCall,).toBe(4,),)
                        test("false: 2 arguments", () => expect(new instance(ABCD,).executeWhileExpectingIndexOutOfBound(it => it.indexOfLast(callbackAsFalse2,),).amountOfCall,).toBe(4,),)
                    },)
                },)
                describe("indexOfLastOrNull", () => {
                    describe("empty", () => {
                        test("0 arguments", () => expect(new instance(EMPTY,).execute(it => it.indexOfLastOrNull(callbackAsFail0,),).amountOfCall,).toBe(0,),)
                        test("1 argument",  () => expect(new instance(EMPTY,).execute(it => it.indexOfLastOrNull(callbackAsFail1,),).amountOfCall,).toBe(0,),)
                        test("2 arguments", () => expect(new instance(EMPTY,).execute(it => it.indexOfLastOrNull(callbackAsFail2,),).amountOfCall,).toBe(0,),)
                    },)
                    describe("1 field", () => {
                        test("true: 0 arguments",  () => expect(new instance(A,).execute(it => it.indexOfLastOrNull(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(A,).execute(it => it.indexOfLastOrNull(callbackAsTrue1,),).amountOfCall,).toBe(1,),)
                        test("true: 2 arguments",  () => expect(new instance(A,).execute(it => it.indexOfLastOrNull(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(A,).execute(it => it.indexOfLastOrNull(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(A,).execute(it => it.indexOfLastOrNull(callbackAsFalse1,),).amountOfCall,).toBe(1,),)
                        test("false: 2 arguments", () => expect(new instance(A,).execute(it => it.indexOfLastOrNull(callbackAsFalse2,),).amountOfCall,).toBe(1,),)
                    },)
                    describe("2 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfLastOrNull(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(AB,).execute(it => it.indexOfLastOrNull(callbackAsTrue1,),).amountOfCall,).toBe(1,),)
                        test("true: 2 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfLastOrNull(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(AB,).execute(it => it.indexOfLastOrNull(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(AB,).execute(it => it.indexOfLastOrNull(callbackAsFalse1,),).amountOfCall,).toBe(2,),)
                        test("false: 2 arguments", () => expect(new instance(AB,).execute(it => it.indexOfLastOrNull(callbackAsFalse2,),).amountOfCall,).toBe(2,),)
                    },)
                    describe("4 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfLastOrNull(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(ABCD,).execute(it => it.indexOfLastOrNull(callbackAsTrue1,),).amountOfCall,).toBe(1,),)
                        test("true: 2 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfLastOrNull(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(ABCD,).execute(it => it.indexOfLastOrNull(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(ABCD,).execute(it => it.indexOfLastOrNull(callbackAsFalse1,),).amountOfCall,).toBe(4,),)
                        test("false: 2 arguments", () => expect(new instance(ABCD,).execute(it => it.indexOfLastOrNull(callbackAsFalse2,),).amountOfCall,).toBe(4,),)
                    },)
                },)
                describe("indexOfLastIndexed", () => {
                    describe("empty", () => {
                        test("0 arguments", () => expect(new instance(EMPTY,).executeWhileExpectingEmptyException(it => it.indexOfLastIndexed(callbackAsFail0,),).amountOfCall,).toBe(0,),)
                        test("1 argument",  () => expect(new instance(EMPTY,).executeWhileExpectingEmptyException(it => it.indexOfLastIndexed(callbackAsFail1,),).amountOfCall,).toBe(0,),)
                        test("2 arguments", () => expect(new instance(EMPTY,).executeWhileExpectingEmptyException(it => it.indexOfLastIndexed(callbackAsFail2,),).amountOfCall,).toBe(0,),)
                    },)
                    describe("1 field", () => {
                        test("true: 0 arguments",  () => expect(new instance(A,).execute(it => it.indexOfLastIndexed(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(A,).execute(it => it.indexOfLastIndexed(callbackAsTrue1,),).amountOfCall,).toBe(0,),)
                        test("true: 2 arguments",  () => expect(new instance(A,).execute(it => it.indexOfLastIndexed(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(A,).executeWhileExpectingIndexOutOfBound(it => it.indexOfLastIndexed(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(A,).executeWhileExpectingIndexOutOfBound(it => it.indexOfLastIndexed(callbackAsFalse1,),).amountOfCall,).toBe(0,),)
                        test("false: 2 arguments", () => expect(new instance(A,).executeWhileExpectingIndexOutOfBound(it => it.indexOfLastIndexed(callbackAsFalse2,),).amountOfCall,).toBe(1,),)
                    },)
                    describe("2 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfLastIndexed(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(AB,).execute(it => it.indexOfLastIndexed(callbackAsTrue1,),).amountOfCall,).toBe(0,),)
                        test("true: 2 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfLastIndexed(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(AB,).executeWhileExpectingIndexOutOfBound(it => it.indexOfLastIndexed(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(AB,).executeWhileExpectingIndexOutOfBound(it => it.indexOfLastIndexed(callbackAsFalse1,),).amountOfCall,).toBe(0,),)
                        test("false: 2 arguments", () => expect(new instance(AB,).executeWhileExpectingIndexOutOfBound(it => it.indexOfLastIndexed(callbackAsFalse2,),).amountOfCall,).toBe(2,),)
                    },)
                    describe("4 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfLastIndexed(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(ABCD,).execute(it => it.indexOfLastIndexed(callbackAsTrue1,),).amountOfCall,).toBe(0,),)
                        test("true: 2 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfLastIndexed(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(ABCD,).executeWhileExpectingIndexOutOfBound(it => it.indexOfLastIndexed(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(ABCD,).executeWhileExpectingIndexOutOfBound(it => it.indexOfLastIndexed(callbackAsFalse1,),).amountOfCall,).toBe(0,),)
                        test("false: 2 arguments", () => expect(new instance(ABCD,).executeWhileExpectingIndexOutOfBound(it => it.indexOfLastIndexed(callbackAsFalse2,),).amountOfCall,).toBe(4,),)
                    },)
                },)
                describe("indexOfLastIndexedOrNull", () => {
                    describe("empty", () => {
                        test("0 arguments", () => expect(new instance(EMPTY,).execute(it => it.indexOfLastIndexedOrNull(callbackAsFail0,),).amountOfCall,).toBe(0,),)
                        test("1 argument",  () => expect(new instance(EMPTY,).execute(it => it.indexOfLastIndexedOrNull(callbackAsFail1,),).amountOfCall,).toBe(0,),)
                        test("2 arguments", () => expect(new instance(EMPTY,).execute(it => it.indexOfLastIndexedOrNull(callbackAsFail2,),).amountOfCall,).toBe(0,),)
                    },)
                    describe("1 field", () => {
                        test("true: 0 arguments",  () => expect(new instance(A,).execute(it => it.indexOfLastIndexedOrNull(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(A,).execute(it => it.indexOfLastIndexedOrNull(callbackAsTrue1,),).amountOfCall,).toBe(0,),)
                        test("true: 2 arguments",  () => expect(new instance(A,).execute(it => it.indexOfLastIndexedOrNull(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(A,).execute(it => it.indexOfLastIndexedOrNull(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(A,).execute(it => it.indexOfLastIndexedOrNull(callbackAsFalse1,),).amountOfCall,).toBe(0,),)
                        test("false: 2 arguments", () => expect(new instance(A,).execute(it => it.indexOfLastIndexedOrNull(callbackAsFalse2,),).amountOfCall,).toBe(1,),)
                    },)
                    describe("2 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfLastIndexedOrNull(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(AB,).execute(it => it.indexOfLastIndexedOrNull(callbackAsTrue1,),).amountOfCall,).toBe(0,),)
                        test("true: 2 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfLastIndexedOrNull(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(AB,).execute(it => it.indexOfLastIndexedOrNull(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(AB,).execute(it => it.indexOfLastIndexedOrNull(callbackAsFalse1,),).amountOfCall,).toBe(0,),)
                        test("false: 2 arguments", () => expect(new instance(AB,).execute(it => it.indexOfLastIndexedOrNull(callbackAsFalse2,),).amountOfCall,).toBe(2,),)
                    },)
                    describe("4 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfLastIndexedOrNull(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(ABCD,).execute(it => it.indexOfLastIndexedOrNull(callbackAsTrue1,),).amountOfCall,).toBe(0,),)
                        test("true: 2 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfLastIndexedOrNull(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(ABCD,).execute(it => it.indexOfLastIndexedOrNull(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(ABCD,).execute(it => it.indexOfLastIndexedOrNull(callbackAsFalse1,),).amountOfCall,).toBe(0,),)
                        test("false: 2 arguments", () => expect(new instance(ABCD,).execute(it => it.indexOfLastIndexedOrNull(callbackAsFalse2,),).amountOfCall,).toBe(4,),)
                    },)
                },)
            },)

        describe("firstIndexOf", () => {
            describe("empty", () => {
                test("direct",     () => expect(() => new instance<string>(EMPTY,).firstIndexOf('a',),).toThrow(EmptyCollectionException,),)
                test("from (NaN)", () => expect(() => new instance<string>(EMPTY,).firstIndexOf('a', NaN,),).toThrow(EmptyCollectionException,),)
                test("from (-∞)",  () => expect(() => new instance<string>(EMPTY,).firstIndexOf('a', -Infinity,),).toThrow(EmptyCollectionException,),)
                test("from (-1)",  () => expect(() => new instance<string>(EMPTY,).firstIndexOf('a', -1,),).toThrow(EmptyCollectionException,),)
                test("from (0)",   () => expect(() => new instance<string>(EMPTY,).firstIndexOf('a', 0,),).toThrow(EmptyCollectionException,),)
                test("from (1)",   () => expect(() => new instance<string>(EMPTY,).firstIndexOf('a', 1,),).toThrow(EmptyCollectionException,),)
                test("from (+∞)",  () => expect(() => new instance<string>(EMPTY,).firstIndexOf('a', Infinity,),).toThrow(EmptyCollectionException,),)
                test("to (NaN)",   () => expect(() => new instance<string>(EMPTY,).firstIndexOf('a', null, NaN,),).toThrow(EmptyCollectionException,),)
                test("to (-∞)",    () => expect(() => new instance<string>(EMPTY,).firstIndexOf('a', null, -Infinity,),).toThrow(EmptyCollectionException,),)
                test("to (-1)",    () => expect(() => new instance<string>(EMPTY,).firstIndexOf('a', null, -1,),).toThrow(EmptyCollectionException,),)
                test("to (0)",     () => expect(() => new instance<string>(EMPTY,).firstIndexOf('a', null, 0,),).toThrow(EmptyCollectionException,),)
                test("to (1)",     () => expect(() => new instance<string>(EMPTY,).firstIndexOf('a', null, 1,),).toThrow(EmptyCollectionException,),)
                test("to (+∞)",    () => expect(() => new instance<string>(EMPTY,).firstIndexOf('a', null, Infinity,),).toThrow(EmptyCollectionException,),)
            },)
            describe("1 field", () => {
                test('a', () => expect(new instance(A,).firstIndexOf('a',),).toBe(0,),)
                test('e', () => expect(() => new instance<string>(A,).firstIndexOf('e',),).toThrow(IndexOutOfBoundsException,),)
            },)
            describe("2 fields", () => {
                test('a', () => expect(new instance(AA,).firstIndexOf('a',),).toBe(0,),)
                test('e', () => expect(() => new instance<string>(AA,).firstIndexOf('e',),).toThrow(IndexOutOfBoundsException,),)
            },)
            describe("4 fields", () => {
                test('a', () => expect(new instance(ABAB,).firstIndexOf('a',),).toBe(0,),)
                test('b', () => expect(new instance(ABAB,).firstIndexOf('b',),).toBe(1,),)
                test('e', () => expect(() => new instance<string>(ABAB,).firstIndexOf('e',),).toThrow(IndexOutOfBoundsException,),)
            },)

            describe("from", () => {
                test("NaN",  () => expect(() => new instance(ABAB,).firstIndexOf('a', NaN,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).firstIndexOf('a', -Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-500", () => expect(() => new instance(ABAB,).firstIndexOf('a', -500,),).toThrow(IndexOutOfBoundsException,),)
                test("-6",   () => expect(() => new instance(ABAB,).firstIndexOf('a', -6,),).toThrow(IndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).firstIndexOf('a', -5,),).toThrow(IndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).firstIndexOf('a', -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).firstIndexOf('a', -3,),).toBe(2,),)
                test("-2",   () => expect(new instance(ABAB,).firstIndexOf('a', -2,),).toBe(2,),)
                test("-1",   () => expect(() => new instance(ABAB,).firstIndexOf('a', -1,),).toThrow(IndexOutOfBoundsException,),)
                test('0',    () => expect(new instance(ABAB,).firstIndexOf('a', 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).firstIndexOf('a', 1,),).toBe(2,),)
                test('2',    () => expect(new instance(ABAB,).firstIndexOf('a', 2,),).toBe(2,),)
                test('3',    () => expect(() => new instance(ABAB,).firstIndexOf('a', 3,),).toThrow(IndexOutOfBoundsException,),)
                test('4',    () => expect(() => new instance(ABAB,).firstIndexOf('a', 4,),).toThrow(IndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).firstIndexOf('a', 5,),).toThrow(IndexOutOfBoundsException,),)
                test("500",  () => expect(() => new instance(ABAB,).firstIndexOf('a', 500,),).toThrow(IndexOutOfBoundsException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).firstIndexOf('a', Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("to", () => {
                test("NaN",  () => expect(() => new instance(ABAB,).firstIndexOf('a', null, NaN,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).firstIndexOf('a', null, -Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-500", () => expect(() => new instance(ABAB,).firstIndexOf('a', null, -500,),).toThrow(IndexOutOfBoundsException,),)
                test("-6",   () => expect(() => new instance(ABAB,).firstIndexOf('a', null, -6,),).toThrow(IndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).firstIndexOf('a', null, -5,),).toThrow(IndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).firstIndexOf('a', null, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).firstIndexOf('a', null, -3,),).toBe(0,),)
                test("-2",   () => expect(new instance(ABAB,).firstIndexOf('a', null, -2,),).toBe(0,),)
                test("-1",   () => expect(new instance(ABAB,).firstIndexOf('a', null, -1,),).toBe(0,),)
                test('0',    () => expect(new instance(ABAB,).firstIndexOf('a', null, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).firstIndexOf('a', null, 1,),).toBe(0,),)
                test('2',    () => expect(new instance(ABAB,).firstIndexOf('a', null, 2,),).toBe(0,),)
                test('3',    () => expect(new instance(ABAB,).firstIndexOf('a', null, 3,),).toBe(0,),)
                test('4',    () => expect(() => new instance(ABAB,).firstIndexOf('a', null, 4,),).toThrow(IndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).firstIndexOf('a', null, 5,),).toThrow(IndexOutOfBoundsException,),)
                test("500",  () => expect(() => new instance(ABAB,).firstIndexOf('a', null, 500,),).toThrow(IndexOutOfBoundsException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).firstIndexOf('a', null, Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("from + to", () => {
                test("0, 0", () => expect(new instance(ABAB,).firstIndexOf('a', 0, 0,),).toBe(0,),)
                test("0, 1", () => expect(new instance(ABAB,).firstIndexOf('a', 0, 1,),).toBe(0,),)
                test("0, 2", () => expect(new instance(ABAB,).firstIndexOf('a', 0, 2,),).toBe(0,),)
                test("0, 3", () => expect(new instance(ABAB,).firstIndexOf('a', 0, 3,),).toBe(0,),)
                test("1, 0", () => expect(() => new instance(ABAB,).firstIndexOf('a', 1, 0,),).toThrow(InvalidIndexRangeException,),)
                test("1, 1", () => expect(() => new instance(ABAB,).firstIndexOf('a', 1, 1,),).toThrow(IndexOutOfBoundsException,),)
                test("1, 2", () => expect(new instance(ABAB,).firstIndexOf('a', 1, 2,),).toBe(2,),)
                test("1, 3", () => expect(new instance(ABAB,).firstIndexOf('a', 1, 3,),).toBe(2,),)
                test("2, 0", () => expect(() => new instance(ABAB,).firstIndexOf('a', 2, 0,),).toThrow(InvalidIndexRangeException,),)
                test("2, 1", () => expect(() => new instance(ABAB,).firstIndexOf('a', 2, 1,),).toThrow(InvalidIndexRangeException,),)
                test("2, 2", () => expect(new instance(ABAB,).firstIndexOf('a', 2, 2,),).toBe(2,),)
                test("2, 3", () => expect(new instance(ABAB,).firstIndexOf('a', 2, 3,),).toBe(2,),)
                test("3, 0", () => expect(() => new instance(ABAB,).firstIndexOf('a', 3, 0,),).toThrow(InvalidIndexRangeException,),)
                test("3, 1", () => expect(() => new instance(ABAB,).firstIndexOf('a', 3, 1,),).toThrow(InvalidIndexRangeException,),)
                test("3, 2", () => expect(() => new instance(ABAB,).firstIndexOf('a', 3, 2,),).toThrow(InvalidIndexRangeException,),)
                test("3, 3", () => expect(() => new instance(ABAB,).firstIndexOf('a', 3, 3,),).toThrow(IndexOutOfBoundsException,),)
            },)
        },)
        describe("firstIndexOfOrNull", () => {
            describe("empty", () => {
                test("direct",     () => expect(new instance<string>(EMPTY,).firstIndexOfOrNull('a',),).toBeNull(),)
                test("from (NaN)", () => expect(new instance<string>(EMPTY,).firstIndexOfOrNull('a', NaN,),).toBeNull(),)
                test("from (-∞)",  () => expect(new instance<string>(EMPTY,).firstIndexOfOrNull('a', -Infinity,),).toBeNull(),)
                test("from (-1)",  () => expect(new instance<string>(EMPTY,).firstIndexOfOrNull('a', -1,),).toBeNull(),)
                test("from (0)",   () => expect(new instance<string>(EMPTY,).firstIndexOfOrNull('a', 0,),).toBeNull(),)
                test("from (1)",   () => expect(new instance<string>(EMPTY,).firstIndexOfOrNull('a', 1,),).toBeNull(),)
                test("from (+∞)",  () => expect(new instance<string>(EMPTY,).firstIndexOfOrNull('a', Infinity,),).toBeNull(),)
                test("to (NaN)",   () => expect(new instance<string>(EMPTY,).firstIndexOfOrNull('a', null, NaN,),).toBeNull(),)
                test("to (-∞)",    () => expect(new instance<string>(EMPTY,).firstIndexOfOrNull('a', null, -Infinity,),).toBeNull(),)
                test("to (-1)",    () => expect(new instance<string>(EMPTY,).firstIndexOfOrNull('a', null, -1,),).toBeNull(),)
                test("to (0)",     () => expect(new instance<string>(EMPTY,).firstIndexOfOrNull('a', null, 0,),).toBeNull(),)
                test("to (1)",     () => expect(new instance<string>(EMPTY,).firstIndexOfOrNull('a', null, 1,),).toBeNull(),)
                test("to (+∞)",    () => expect(new instance<string>(EMPTY,).firstIndexOfOrNull('a', null, Infinity,),).toBeNull(),)
            },)
            describe("1 field", () => {
                test('a', () => expect(new instance(A,).firstIndexOfOrNull('a',),).toBe(0,),)
                test('e', () => expect(new instance<string>(A,).firstIndexOfOrNull('e',),).toBeNull(),)
            },)
            describe("2 fields", () => {
                test('a', () => expect(new instance(AA,).firstIndexOfOrNull('a',),).toBe(0,),)
                test('e', () => expect(new instance<string>(AA,).firstIndexOfOrNull('e',),).toBeNull(),)
            },)
            describe("4 fields", () => {
                test('a', () => expect(new instance(ABAB,).firstIndexOfOrNull('a',),).toBe(0,),)
                test('b', () => expect(new instance(ABAB,).firstIndexOfOrNull('b',),).toBe(1,),)
                test('e', () => expect(new instance<string>(ABAB,).firstIndexOfOrNull('e',),).toBeNull(),)
            },)

            describe("from", () => {
                test("NaN",  () => expect(new instance(ABAB,).firstIndexOfOrNull('a', NaN,),).toBeNull(),)
                test("-∞",   () => expect(new instance(ABAB,).firstIndexOfOrNull('a', -Infinity,),).toBeNull(),)
                test("-500", () => expect(new instance(ABAB,).firstIndexOfOrNull('a', -500,),).toBeNull(),)
                test("-6",   () => expect(new instance(ABAB,).firstIndexOfOrNull('a', -6,),).toBeNull(),)
                test("-5",   () => expect(new instance(ABAB,).firstIndexOfOrNull('a', -5,),).toBeNull(),)
                test("-4",   () => expect(new instance(ABAB,).firstIndexOfOrNull('a', -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).firstIndexOfOrNull('a', -3,),).toBe(2,),)
                test("-2",   () => expect(new instance(ABAB,).firstIndexOfOrNull('a', -2,),).toBe(2,),)
                test("-1",   () => expect(new instance(ABAB,).firstIndexOfOrNull('a', -1,),).toBeNull(),)
                test('0',    () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 1,),).toBe(2,),)
                test('2',    () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 3,),).toBeNull(),)
                test('4',    () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 4,),).toBeNull(),)
                test('5',    () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 5,),).toBeNull(),)
                test("500",  () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 500,),).toBeNull(),)
                test("+∞",   () => expect(new instance(ABAB,).firstIndexOfOrNull('a', Infinity,),).toBeNull(),)
            },)
            describe("to", () => {
                test("NaN",  () => expect(new instance(ABAB,).firstIndexOfOrNull('a', null, NaN,),).toBeNull(),)
                test("-∞",   () => expect(new instance(ABAB,).firstIndexOfOrNull('a', null, -Infinity,),).toBeNull(),)
                test("-500", () => expect(new instance(ABAB,).firstIndexOfOrNull('a', null, -500,),).toBeNull(),)
                test("-6",   () => expect(new instance(ABAB,).firstIndexOfOrNull('a', null, -6,),).toBeNull(),)
                test("-5",   () => expect(new instance(ABAB,).firstIndexOfOrNull('a', null, -5,),).toBeNull(),)
                test("-4",   () => expect(new instance(ABAB,).firstIndexOfOrNull('a', null, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).firstIndexOfOrNull('a', null, -3,),).toBe(0,),)
                test("-2",   () => expect(new instance(ABAB,).firstIndexOfOrNull('a', null, -2,),).toBe(0,),)
                test("-1",   () => expect(new instance(ABAB,).firstIndexOfOrNull('a', null, -1,),).toBe(0,),)
                test('0',    () => expect(new instance(ABAB,).firstIndexOfOrNull('a', null, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).firstIndexOfOrNull('a', null, 1,),).toBe(0,),)
                test('2',    () => expect(new instance(ABAB,).firstIndexOfOrNull('a', null, 2,),).toBe(0,),)
                test('3',    () => expect(new instance(ABAB,).firstIndexOfOrNull('a', null, 3,),).toBe(0,),)
                test('4',    () => expect(new instance(ABAB,).firstIndexOfOrNull('a', null, 4,),).toBeNull(),)
                test('5',    () => expect(new instance(ABAB,).firstIndexOfOrNull('a', null, 5,),).toBeNull(),)
                test("500",  () => expect(new instance(ABAB,).firstIndexOfOrNull('a', null, 500,),).toBeNull(),)
                test("+∞",   () => expect(new instance(ABAB,).firstIndexOfOrNull('a', null, Infinity,),).toBeNull(),)
            },)
            describe("from + to", () => {
                test("0, 0", () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 0, 0,),).toBe(0,),)
                test("0, 1", () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 0, 1,),).toBe(0,),)
                test("0, 2", () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 0, 2,),).toBe(0,),)
                test("0, 3", () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 0, 3,),).toBe(0,),)
                test("1, 0", () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 1, 0,),).toBeNull(),)
                test("1, 1", () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 1, 1,),).toBeNull(),)
                test("1, 2", () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 1, 2,),).toBe(2,),)
                test("1, 3", () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 1, 3,),).toBe(2,),)
                test("2, 0", () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 2, 0,),).toBeNull(),)
                test("2, 1", () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 2, 1,),).toBeNull(),)
                test("2, 2", () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 2, 2,),).toBe(2,),)
                test("2, 3", () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 2, 3,),).toBe(2,),)
                test("3, 0", () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 3, 0,),).toBeNull(),)
                test("3, 1", () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 3, 1,),).toBeNull(),)
                test("3, 2", () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 3, 2,),).toBeNull(),)
                test("3, 3", () => expect(new instance(ABAB,).firstIndexOfOrNull('a', 3, 3,),).toBeNull(),)
            },)
        },)

        describe("lastIndexOf", () => {
            describe("empty", () => {
                test("direct",     () => expect(() => new instance<string>(EMPTY,).lastIndexOf('a',),).toThrow(EmptyCollectionException,),)
                test("from (NaN)", () => expect(() => new instance<string>(EMPTY,).lastIndexOf('a', NaN,),).toThrow(EmptyCollectionException,),)
                test("from (-∞)",  () => expect(() => new instance<string>(EMPTY,).lastIndexOf('a', -Infinity,),).toThrow(EmptyCollectionException,),)
                test("from (-1)",  () => expect(() => new instance<string>(EMPTY,).lastIndexOf('a', -1,),).toThrow(EmptyCollectionException,),)
                test("from (0)",   () => expect(() => new instance<string>(EMPTY,).lastIndexOf('a', 0,),).toThrow(EmptyCollectionException,),)
                test("from (1)",   () => expect(() => new instance<string>(EMPTY,).lastIndexOf('a', 1,),).toThrow(EmptyCollectionException,),)
                test("from (+∞)",  () => expect(() => new instance<string>(EMPTY,).lastIndexOf('a', Infinity,),).toThrow(EmptyCollectionException,),)
                test("to (NaN)",   () => expect(() => new instance<string>(EMPTY,).lastIndexOf('a', null, NaN,),).toThrow(EmptyCollectionException,),)
                test("to (-∞)",    () => expect(() => new instance<string>(EMPTY,).lastIndexOf('a', null, -Infinity,),).toThrow(EmptyCollectionException,),)
                test("to (-1)",    () => expect(() => new instance<string>(EMPTY,).lastIndexOf('a', null, -1,),).toThrow(EmptyCollectionException,),)
                test("to (0)",     () => expect(() => new instance<string>(EMPTY,).lastIndexOf('a', null, 0,),).toThrow(EmptyCollectionException,),)
                test("to (1)",     () => expect(() => new instance<string>(EMPTY,).lastIndexOf('a', null, 1,),).toThrow(EmptyCollectionException,),)
                test("to (+∞)",    () => expect(() => new instance<string>(EMPTY,).lastIndexOf('a', null, Infinity,),).toThrow(EmptyCollectionException,),)
            },)
            describe("1 field", () => {
                test('a', () => expect(new instance(A,).lastIndexOf('a',),).toBe(0,),)
                test('e', () => expect(() => new instance<string>(A,).lastIndexOf('e',),).toThrow(IndexOutOfBoundsException,),)
            },)
            describe("2 fields", () => {
                test('a', () => expect(new instance(AB,).lastIndexOf('a',),).toBe(0,),)
                test('b', () => expect(new instance(AB,).lastIndexOf('b',),).toBe(1,),)
                test('e', () => expect(() => new instance<string>(AB,).lastIndexOf('e',),).toThrow(IndexOutOfBoundsException,),)
            },)
            describe("4 fields", () => {
                test('a', () => expect(new instance(ABCD,).lastIndexOf('a',),).toBe(0,),)
                test('b', () => expect(new instance(ABCD,).lastIndexOf('b',),).toBe(1,),)
                test('c', () => expect(new instance(ABCD,).lastIndexOf('c',),).toBe(2,),)
                test('d', () => expect(new instance(ABCD,).lastIndexOf('d',),).toBe(3,),)
                test('e', () => expect(() => new instance<string>(ABCD,).lastIndexOf('e',),).toThrow(IndexOutOfBoundsException,),)
            },)

            describe("from", () => {
                test("NaN",  () => expect(() => new instance(ABAB,).lastIndexOf('a', NaN,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).lastIndexOf('a', -Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-500", () => expect(() => new instance(ABAB,).lastIndexOf('a', -500,),).toThrow(IndexOutOfBoundsException,),)
                test("-6",   () => expect(() => new instance(ABAB,).lastIndexOf('a', -6,),).toThrow(IndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).lastIndexOf('a', -5,),).toThrow(IndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).lastIndexOf('a', -4,),).toBe(2,),)
                test("-3",   () => expect(new instance(ABAB,).lastIndexOf('a', -3,),).toBe(2,),)
                test("-2",   () => expect(new instance(ABAB,).lastIndexOf('a', -2,),).toBe(2,),)
                test("-1",   () => expect(() => new instance(ABAB,).lastIndexOf('a', -1,),).toThrow(IndexOutOfBoundsException,),)
                test('0',    () => expect(new instance(ABAB,).lastIndexOf('a', 0,),).toBe(2,),)
                test('1',    () => expect(new instance(ABAB,).lastIndexOf('a', 1,),).toBe(2,),)
                test('2',    () => expect(new instance(ABAB,).lastIndexOf('a', 2,),).toBe(2,),)
                test('3',    () => expect(() => new instance(ABAB,).lastIndexOf('a', 3,),).toThrow(IndexOutOfBoundsException,),)
                test('4',    () => expect(() => new instance(ABAB,).lastIndexOf('a', 4,),).toThrow(IndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).lastIndexOf('a', 5,),).toThrow(IndexOutOfBoundsException,),)
                test("500",  () => expect(() => new instance(ABAB,).lastIndexOf('a', 500,),).toThrow(IndexOutOfBoundsException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).lastIndexOf('a', Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("to", () => {
                test("NaN",  () => expect(() => new instance(ABAB,).lastIndexOf('a', null, NaN,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).lastIndexOf('a', null, -Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-500", () => expect(() => new instance(ABAB,).lastIndexOf('a', null, -500,),).toThrow(IndexOutOfBoundsException,),)
                test("-6",   () => expect(() => new instance(ABAB,).lastIndexOf('a', null, -6,),).toThrow(IndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).lastIndexOf('a', null, -5,),).toThrow(IndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).lastIndexOf('a', null, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).lastIndexOf('a', null, -3,),).toBe(0,),)
                test("-2",   () => expect(new instance(ABAB,).lastIndexOf('a', null, -2,),).toBe(2,),)
                test("-1",   () => expect(new instance(ABAB,).lastIndexOf('a', null, -1,),).toBe(2,),)
                test('0',    () => expect(new instance(ABAB,).lastIndexOf('a', null, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).lastIndexOf('a', null, 1,),).toBe(0,),)
                test('2',    () => expect(new instance(ABAB,).lastIndexOf('a', null, 2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABAB,).lastIndexOf('a', null, 3,),).toBe(2,),)
                test('4',    () => expect(() => new instance(ABAB,).lastIndexOf('a', null, 4,),).toThrow(IndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).lastIndexOf('a', null, 5,),).toThrow(IndexOutOfBoundsException,),)
                test("500",  () => expect(() => new instance(ABAB,).lastIndexOf('a', null, 500,),).toThrow(IndexOutOfBoundsException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).lastIndexOf('a', null, Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("from + to", () => {
                test("0, 0", () => expect(new instance(ABAB,).lastIndexOf('a', 0, 0,),).toBe(0,),)
                test("0, 1", () => expect(new instance(ABAB,).lastIndexOf('a', 0, 1,),).toBe(0,),)
                test("0, 2", () => expect(new instance(ABAB,).lastIndexOf('a', 0, 2,),).toBe(2,),)
                test("0, 3", () => expect(new instance(ABAB,).lastIndexOf('a', 0, 3,),).toBe(2,),)
                test("1, 0", () => expect(() => new instance(ABAB,).lastIndexOf('a', 1, 0,),).toThrow(InvalidIndexRangeException,),)
                test("1, 1", () => expect(() => new instance(ABAB,).lastIndexOf('a', 1, 1,),).toThrow(IndexOutOfBoundsException,),)
                test("1, 2", () => expect(new instance(ABAB,).lastIndexOf('a', 1, 2,),).toBe(2,),)
                test("1, 3", () => expect(new instance(ABAB,).lastIndexOf('a', 1, 3,),).toBe(2,),)
                test("2, 0", () => expect(() => new instance(ABAB,).lastIndexOf('a', 2, 0,),).toThrow(InvalidIndexRangeException,),)
                test("2, 1", () => expect(() => new instance(ABAB,).lastIndexOf('a', 2, 1,),).toThrow(InvalidIndexRangeException,),)
                test("2, 2", () => expect(new instance(ABAB,).lastIndexOf('a', 2, 2,),).toBe(2,),)
                test("2, 3", () => expect(new instance(ABAB,).lastIndexOf('a', 2, 3,),).toBe(2,),)
                test("3, 0", () => expect(() => new instance(ABAB,).lastIndexOf('a', 3, 0,),).toThrow(InvalidIndexRangeException,),)
                test("3, 1", () => expect(() => new instance(ABAB,).lastIndexOf('a', 3, 1,),).toThrow(InvalidIndexRangeException,),)
                test("3, 2", () => expect(() => new instance(ABAB,).lastIndexOf('a', 3, 2,),).toThrow(InvalidIndexRangeException,),)
                test("3, 3", () => expect(() => new instance(ABAB,).lastIndexOf('a', 3, 3,),).toThrow(IndexOutOfBoundsException,),)
            },)
        },)
        describe("lastIndexOfOrNull", () => {
            describe("empty", () => {
                test("direct",     () => expect(new instance<string>(EMPTY,).lastIndexOfOrNull('a',),).toBeNull(),)
                test("from (NaN)", () => expect(new instance<string>(EMPTY,).lastIndexOfOrNull('a', NaN,),).toBeNull(),)
                test("from (-∞)",  () => expect(new instance<string>(EMPTY,).lastIndexOfOrNull('a', -Infinity,),).toBeNull(),)
                test("from (-1)",  () => expect(new instance<string>(EMPTY,).lastIndexOfOrNull('a', -1,),).toBeNull(),)
                test("from (0)",   () => expect(new instance<string>(EMPTY,).lastIndexOfOrNull('a', 0,),).toBeNull(),)
                test("from (1)",   () => expect(new instance<string>(EMPTY,).lastIndexOfOrNull('a', 1,),).toBeNull(),)
                test("from (+∞)",  () => expect(new instance<string>(EMPTY,).lastIndexOfOrNull('a', Infinity,),).toBeNull(),)
                test("to (NaN)",   () => expect(new instance<string>(EMPTY,).lastIndexOfOrNull('a', null, NaN,),).toBeNull(),)
                test("to (-∞)",    () => expect(new instance<string>(EMPTY,).lastIndexOfOrNull('a', null, -Infinity,),).toBeNull(),)
                test("to (-1)",    () => expect(new instance<string>(EMPTY,).lastIndexOfOrNull('a', null, -1,),).toBeNull(),)
                test("to (0)",     () => expect(new instance<string>(EMPTY,).lastIndexOfOrNull('a', null, 0,),).toBeNull(),)
                test("to (1)",     () => expect(new instance<string>(EMPTY,).lastIndexOfOrNull('a', null, 1,),).toBeNull(),)
                test("to (+∞)",    () => expect(new instance<string>(EMPTY,).lastIndexOfOrNull('a', null, Infinity,),).toBeNull(),)
            },)
            describe("1 field", () => {
                test('a', () => expect(new instance(A,).lastIndexOfOrNull('a',),).toBe(0,),)
                test('e', () => expect(new instance<string>(A,).lastIndexOfOrNull('e',),).toBeNull(),)
            },)
            describe("2 fields", () => {
                test('a', () => expect(new instance(AB,).lastIndexOfOrNull('a',),).toBe(0,),)
                test('b', () => expect(new instance(AB,).lastIndexOfOrNull('b',),).toBe(1,),)
                test('e', () => expect(new instance<string>(AB,).lastIndexOfOrNull('e',),).toBeNull(),)
            },)
            describe("4 fields", () => {
                test('a', () => expect(new instance(ABCD,).lastIndexOfOrNull('a',),).toBe(0,),)
                test('b', () => expect(new instance(ABCD,).lastIndexOfOrNull('b',),).toBe(1,),)
                test('c', () => expect(new instance(ABCD,).lastIndexOfOrNull('c',),).toBe(2,),)
                test('d', () => expect(new instance(ABCD,).lastIndexOfOrNull('d',),).toBe(3,),)
                test('e', () => expect(new instance<string>(ABCD,).lastIndexOfOrNull('e',),).toBeNull(),)
            },)

            describe("from", () => {
                test("NaN",  () => expect(new instance(ABAB,).lastIndexOfOrNull('a', NaN,),).toBeNull(),)
                test("-∞",   () => expect(new instance(ABAB,).lastIndexOfOrNull('a', -Infinity,),).toBeNull(),)
                test("-500", () => expect(new instance(ABAB,).lastIndexOfOrNull('a', -500,),).toBeNull(),)
                test("-6",   () => expect(new instance(ABAB,).lastIndexOfOrNull('a', -6,),).toBeNull(),)
                test("-5",   () => expect(new instance(ABAB,).lastIndexOfOrNull('a', -5,),).toBeNull(),)
                test("-4",   () => expect(new instance(ABAB,).lastIndexOfOrNull('a', -4,),).toBe(2,),)
                test("-3",   () => expect(new instance(ABAB,).lastIndexOfOrNull('a', -3,),).toBe(2,),)
                test("-2",   () => expect(new instance(ABAB,).lastIndexOfOrNull('a', -2,),).toBe(2,),)
                test("-1",   () => expect(new instance(ABAB,).lastIndexOfOrNull('a', -1,),).toBeNull(),)
                test('0',    () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 0,),).toBe(2,),)
                test('1',    () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 1,),).toBe(2,),)
                test('2',    () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 3,),).toBeNull(),)
                test('4',    () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 4,),).toBeNull(),)
                test('5',    () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 5,),).toBeNull(),)
                test("500",  () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 500,),).toBeNull(),)
                test("+∞",   () => expect(new instance(ABAB,).lastIndexOfOrNull('a', Infinity,),).toBeNull(),)
            },)
            describe("to", () => {
                test("NaN",  () => expect(new instance(ABAB,).lastIndexOfOrNull('a', null, NaN,),).toBeNull(),)
                test("-∞",   () => expect(new instance(ABAB,).lastIndexOfOrNull('a', null, -Infinity,),).toBeNull(),)
                test("-500", () => expect(new instance(ABAB,).lastIndexOfOrNull('a', null, -500,),).toBeNull(),)
                test("-6",   () => expect(new instance(ABAB,).lastIndexOfOrNull('a', null, -6,),).toBeNull(),)
                test("-5",   () => expect(new instance(ABAB,).lastIndexOfOrNull('a', null, -5,),).toBeNull(),)
                test("-4",   () => expect(new instance(ABAB,).lastIndexOfOrNull('a', null, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).lastIndexOfOrNull('a', null, -3,),).toBe(0,),)
                test("-2",   () => expect(new instance(ABAB,).lastIndexOfOrNull('a', null, -2,),).toBe(2,),)
                test("-1",   () => expect(new instance(ABAB,).lastIndexOfOrNull('a', null, -1,),).toBe(2,),)
                test('0',    () => expect(new instance(ABAB,).lastIndexOfOrNull('a', null, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).lastIndexOfOrNull('a', null, 1,),).toBe(0,),)
                test('2',    () => expect(new instance(ABAB,).lastIndexOfOrNull('a', null, 2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABAB,).lastIndexOfOrNull('a', null, 3,),).toBe(2,),)
                test('4',    () => expect(new instance(ABAB,).lastIndexOfOrNull('a', null, 4,),).toBeNull(),)
                test('5',    () => expect(new instance(ABAB,).lastIndexOfOrNull('a', null, 5,),).toBeNull(),)
                test("500",  () => expect(new instance(ABAB,).lastIndexOfOrNull('a', null, 500,),).toBeNull(),)
                test("+∞",   () => expect(new instance(ABAB,).lastIndexOfOrNull('a', null, Infinity,),).toBeNull(),)
            },)
            describe("from + to", () => {
                test("0, 0", () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 0, 0,),).toBe(0,),)
                test("0, 1", () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 0, 1,),).toBe(0,),)
                test("0, 2", () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 0, 2,),).toBe(2,),)
                test("0, 3", () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 0, 3,),).toBe(2,),)
                test("1, 0", () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 1, 0,),).toBeNull(),)
                test("1, 1", () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 1, 1,),).toBeNull(),)
                test("1, 2", () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 1, 2,),).toBe(2,),)
                test("1, 3", () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 1, 3,),).toBe(2,),)
                test("2, 0", () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 2, 0,),).toBeNull(),)
                test("2, 1", () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 2, 1,),).toBeNull(),)
                test("2, 2", () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 2, 2,),).toBe(2,),)
                test("2, 3", () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 2, 3,),).toBe(2,),)
                test("3, 0", () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 3, 0,),).toBeNull(),)
                test("3, 1", () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 3, 1,),).toBeNull(),)
                test("3, 2", () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 3, 2,),).toBeNull(),)
                test("3, 3", () => expect(new instance(ABAB,).lastIndexOfOrNull('a', 3, 3,),).toBeNull(),)
            },)
        },)

        describe("indexOfFirst", () => {
            describe("empty", () => {
                test("direct",     () => expect(() => new instance(EMPTY,).indexOfFirst(callbackAsFail0,),).toThrow(EmptyCollectionException,),)
                test("from (NaN)", () => expect(() => new instance(EMPTY,).indexOfFirst(callbackAsFail0, NaN,),).toThrow(EmptyCollectionException,),)
                test("from (-∞)",  () => expect(() => new instance(EMPTY,).indexOfFirst(callbackAsFail0, -Infinity,),).toThrow(EmptyCollectionException,),)
                test("from (-1)",  () => expect(() => new instance(EMPTY,).indexOfFirst(callbackAsFail0, -1,),).toThrow(EmptyCollectionException,),)
                test("from (0)",   () => expect(() => new instance(EMPTY,).indexOfFirst(callbackAsFail0, 0,),).toThrow(EmptyCollectionException,),)
                test("from (1)",   () => expect(() => new instance(EMPTY,).indexOfFirst(callbackAsFail0, 1,),).toThrow(EmptyCollectionException,),)
                test("from (+∞)",  () => expect(() => new instance(EMPTY,).indexOfFirst(callbackAsFail0, Infinity,),).toThrow(EmptyCollectionException,),)
                test("to (NaN)",   () => expect(() => new instance(EMPTY,).indexOfFirst(callbackAsFail0, null, NaN,),).toThrow(EmptyCollectionException,),)
                test("to (-∞)",    () => expect(() => new instance(EMPTY,).indexOfFirst(callbackAsFail0, null, -Infinity,),).toThrow(EmptyCollectionException,),)
                test("to (-1)",    () => expect(() => new instance(EMPTY,).indexOfFirst(callbackAsFail0, null, -1,),).toThrow(EmptyCollectionException,),)
                test("to (0)",     () => expect(() => new instance(EMPTY,).indexOfFirst(callbackAsFail0, null, 0,),).toThrow(EmptyCollectionException,),)
                test("to (1)",     () => expect(() => new instance(EMPTY,).indexOfFirst(callbackAsFail0, null, 1,),).toThrow(EmptyCollectionException,),)
                test("to (+∞)",    () => expect(() => new instance(EMPTY,).indexOfFirst(callbackAsFail0, null, Infinity,),).toThrow(EmptyCollectionException,),)
            },)
            describe("boolean callbacks", () => {
                describe.each(trueCallbacks,)("true: %s", ({value: it,},) => {
                    test("1 field",  () => expect(new instance(A,).indexOfFirst(it,),).toBe(0,),)
                    test("2 fields", () => expect(new instance(AB,).indexOfFirst(it,),).toBe(0,),)
                    test("4 fields", () => expect(new instance(ABCD,).indexOfFirst(it,),).toBe(0,),)
                },)
                describe.each(falseCallbacks,)("false: %s", ({value: it,},) => {
                    test("1 field",  () => expect(() => new instance(A,).indexOfFirst(it,),).toThrow(IndexOutOfBoundsException,),)
                    test("2 fields", () => expect(() => new instance(AB,).indexOfFirst(it,),).toThrow(IndexOutOfBoundsException,),)
                    test("4 fields", () => expect(() => new instance(ABCD,).indexOfFirst(it,),).toThrow(IndexOutOfBoundsException,),)
                },)
            },)
            describe("1 field", () => {
                test('a',    () => expect(new instance(A,).indexOfFirst(callbackIsA,),).toBe(0,),)
                test('e',    () => expect(() => new instance(A,).indexOfFirst(callbackIsE,),).toThrow(IndexOutOfBoundsException,),)
                test("even", () => expect(new instance(A,).indexOfFirst(callbackIsEvenAlt,),).toBe(0,),)
                test("odd",  () => expect(() => new instance(A,).indexOfFirst(callbackIsOddAlt,),).toThrow(IndexOutOfBoundsException,),)
                test('0',    () => expect(new instance(A,).indexOfFirst(callbackIs0Alt,),).toBe(0,),)
                test('4',    () => expect(() => new instance(A,).indexOfFirst(callbackIs4Alt,),).toThrow(IndexOutOfBoundsException,),)
            },)
            describe("2 fields", () => {
                test('a',    () => expect(new instance(AB,).indexOfFirst(callbackIsA,),).toBe(0,),)
                test('b',    () => expect(new instance(AB,).indexOfFirst(callbackIsB,),).toBe(1,),)
                test('e',    () => expect(() => new instance(AB,).indexOfFirst(callbackIsE,),).toThrow(IndexOutOfBoundsException,),)
                test("even", () => expect(new instance(AB,).indexOfFirst(callbackIsEvenAlt,),).toBe(0,),)
                test("odd",  () => expect(new instance(AB,).indexOfFirst(callbackIsOddAlt,),).toBe(1,),)
                test('0',    () => expect(new instance(AB,).indexOfFirst(callbackIs0Alt,),).toBe(0,),)
                test('1',    () => expect(new instance(AB,).indexOfFirst(callbackIs1Alt,),).toBe(1,),)
                test('4',    () => expect(() => new instance(AB,).indexOfFirst(callbackIs4Alt,),).toThrow(IndexOutOfBoundsException,),)
            },)
            describe("4 fields", () => {
                test('a',    () => expect(new instance(ABCD,).indexOfFirst(callbackIsA,),).toBe(0,),)
                test('b',    () => expect(new instance(ABCD,).indexOfFirst(callbackIsB,),).toBe(1,),)
                test('c',    () => expect(new instance(ABCD,).indexOfFirst(callbackIsC,),).toBe(2,),)
                test('d',    () => expect(new instance(ABCD,).indexOfFirst(callbackIsD,),).toBe(3,),)
                test('e',    () => expect(() => new instance(ABCD,).indexOfFirst(callbackIsE,),).toThrow(IndexOutOfBoundsException,),)
                test("even", () => expect(new instance(ABCD,).indexOfFirst(callbackIsEvenAlt,),).toBe(0,),)
                test("odd",  () => expect(new instance(ABCD,).indexOfFirst(callbackIsOddAlt,),).toBe(1,),)
                test('0',    () => expect(new instance(ABCD,).indexOfFirst(callbackIs0Alt,),).toBe(0,),)
                test('1',    () => expect(new instance(ABCD,).indexOfFirst(callbackIs1Alt,),).toBe(1,),)
                test('2',    () => expect(new instance(ABCD,).indexOfFirst(callbackIs2Alt,),).toBe(2,),)
                test('3',    () => expect(new instance(ABCD,).indexOfFirst(callbackIs3Alt,),).toBe(3,),)
                test('4',    () => expect(() => new instance(ABCD,).indexOfFirst(callbackIs4Alt,),).toThrow(IndexOutOfBoundsException,),)
            },)

            describe("from", () => {
                test("NaN",  () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, NaN,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, -Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-500", () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, -500,),).toThrow(IndexOutOfBoundsException,),)
                test("-6",   () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, -6,),).toThrow(IndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, -5,),).toThrow(IndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, -3,),).toBe(2,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, -2,),).toBe(2,),)
                test("-1",   () => expect(() => new instance(ABAB,).indexOfFirst(callbackIsA, -1,),).toThrow(IndexOutOfBoundsException,),)
                test('0',    () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 1,),).toBe(2,),)
                test('2',    () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 2,),).toBe(2,),)
                test('3',    () => expect(() => new instance(ABAB,).indexOfFirst(callbackIsA, 3,),).toThrow(IndexOutOfBoundsException,),)
                test('4',    () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, 4,),).toThrow(IndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, 5,),).toThrow(IndexOutOfBoundsException,),)
                test("500",  () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, 500,),).toThrow(IndexOutOfBoundsException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("to", () => {
                test("NaN",  () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, null, NaN,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, null, -Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-500", () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, null, -500,),).toThrow(IndexOutOfBoundsException,),)
                test("-6",   () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, null, -6,),).toThrow(IndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, null, -5,),).toThrow(IndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, null, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, null, -3,),).toBe(0,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, null, -2,),).toBe(0,),)
                test("-1",   () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, null, -1,),).toBe(0,),)
                test('0',    () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, null, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, null, 1,),).toBe(0,),)
                test('2',    () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, null, 2,),).toBe(0,),)
                test('3',    () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, null, 3,),).toBe(0,),)
                test('4',    () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, null, 4,),).toThrow(IndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, null, 5,),).toThrow(IndexOutOfBoundsException,),)
                test("500",  () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, null, 500,),).toThrow(IndexOutOfBoundsException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, null, Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("from + to", () => {
                test("0, 0", () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 0, 0,),).toBe(0,),)
                test("0, 1", () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 0, 1,),).toBe(0,),)
                test("0, 2", () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 0, 2,),).toBe(0,),)
                test("0, 3", () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 0, 3,),).toBe(0,),)
                test("1, 0", () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, 1, 0,),).toThrow(InvalidIndexRangeException,),)
                test("1, 1", () => expect(() => new instance(ABAB,).indexOfFirst(callbackIsA, 1, 1,),).toThrow(IndexOutOfBoundsException,),)
                test("1, 2", () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 1, 2,),).toBe(2,),)
                test("1, 3", () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 1, 3,),).toBe(2,),)
                test("2, 0", () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, 2, 0,),).toThrow(InvalidIndexRangeException,),)
                test("2, 1", () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, 2, 1,),).toThrow(InvalidIndexRangeException,),)
                test("2, 2", () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 2, 2,),).toBe(2,),)
                test("2, 3", () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 2, 3,),).toBe(2,),)
                test("3, 0", () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, 3, 0,),).toThrow(InvalidIndexRangeException,),)
                test("3, 1", () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, 3, 1,),).toThrow(InvalidIndexRangeException,),)
                test("3, 2", () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, 3, 2,),).toThrow(InvalidIndexRangeException,),)
                test("3, 3", () => expect(() => new instance(ABAB,).indexOfFirst(callbackIsA, 3, 3,),).toThrow(IndexOutOfBoundsException,),)
            },)
        },)
        describe("indexOfFirstOrNull", () => {
            describe("empty", () => {
                test("direct",     () => expect(new instance(EMPTY,).indexOfFirstOrNull(callbackAsFail0,),).toBeNull(),)
                test("from (NaN)", () => expect(new instance(EMPTY,).indexOfFirstOrNull(callbackAsFail0, NaN,),).toBeNull(),)
                test("from (-∞)",  () => expect(new instance(EMPTY,).indexOfFirstOrNull(callbackAsFail0, -Infinity,),).toBeNull(),)
                test("from (-1)",  () => expect(new instance(EMPTY,).indexOfFirstOrNull(callbackAsFail0, -1,),).toBeNull(),)
                test("from (0)",   () => expect(new instance(EMPTY,).indexOfFirstOrNull(callbackAsFail0, 0,),).toBeNull(),)
                test("from (1)",   () => expect(new instance(EMPTY,).indexOfFirstOrNull(callbackAsFail0, 1,),).toBeNull(),)
                test("from (+∞)",  () => expect(new instance(EMPTY,).indexOfFirstOrNull(callbackAsFail0, Infinity,),).toBeNull(),)
                test("to (NaN)",   () => expect(new instance(EMPTY,).indexOfFirstOrNull(callbackAsFail0, null, NaN,),).toBeNull(),)
                test("to (-∞)",    () => expect(new instance(EMPTY,).indexOfFirstOrNull(callbackAsFail0, null, -Infinity,),).toBeNull(),)
                test("to (-1)",    () => expect(new instance(EMPTY,).indexOfFirstOrNull(callbackAsFail0, null, -1,),).toBeNull(),)
                test("to (0)",     () => expect(new instance(EMPTY,).indexOfFirstOrNull(callbackAsFail0, null, 0,),).toBeNull(),)
                test("to (1)",     () => expect(new instance(EMPTY,).indexOfFirstOrNull(callbackAsFail0, null, 1,),).toBeNull(),)
                test("to (+∞)",    () => expect(new instance(EMPTY,).indexOfFirstOrNull(callbackAsFail0, null, Infinity,),).toBeNull(),)
            },)
            describe("boolean callbacks", () => {
                describe.each(trueCallbacks,)("true: %s", ({value: it,},) => {
                    test("1 field",  () => expect(new instance(A,).indexOfFirstOrNull(it,),).toBe(0,),)
                    test("2 fields", () => expect(new instance(AB,).indexOfFirstOrNull(it,),).toBe(0,),)
                    test("4 fields", () => expect(new instance(ABCD,).indexOfFirstOrNull(it,),).toBe(0,),)
                },)
                describe.each(falseCallbacks,)("false: %s", ({value: it,},) => {
                    test("1 field",  () => expect(new instance(A,).indexOfFirstOrNull(it,),).toBeNull(),)
                    test("2 fields", () => expect(new instance(AB,).indexOfFirstOrNull(it,),).toBeNull(),)
                    test("4 fields", () => expect(new instance(ABCD,).indexOfFirstOrNull(it,),).toBeNull(),)
                },)
            },)
            describe("1 field", () => {
                test('a',    () => expect(new instance(A,).indexOfFirstOrNull(callbackIsA,),).toBe(0,),)
                test('e',    () => expect(new instance(A,).indexOfFirstOrNull(callbackIsE,),).toBeNull(),)
                test("even", () => expect(new instance(A,).indexOfFirstOrNull(callbackIsEvenAlt,),).toBe(0,),)
                test("odd",  () => expect(new instance(A,).indexOfFirstOrNull(callbackIsOddAlt,),).toBeNull(),)
                test('0',    () => expect(new instance(A,).indexOfFirstOrNull(callbackIs0Alt,),).toBe(0,),)
                test('4',    () => expect(new instance(A,).indexOfFirstOrNull(callbackIs4Alt,),).toBeNull(),)
            },)
            describe("2 fields", () => {
                test('a',    () => expect(new instance(AB,).indexOfFirstOrNull(callbackIsA,),).toBe(0,),)
                test('b',    () => expect(new instance(AB,).indexOfFirstOrNull(callbackIsB,),).toBe(1,),)
                test('e',    () => expect(new instance(AB,).indexOfFirstOrNull(callbackIsE,),).toBeNull(),)
                test("even", () => expect(new instance(AB,).indexOfFirstOrNull(callbackIsEvenAlt,),).toBe(0,),)
                test("odd",  () => expect(new instance(AB,).indexOfFirstOrNull(callbackIsOddAlt,),).toBe(1,),)
                test('0',    () => expect(new instance(AB,).indexOfFirstOrNull(callbackIs0Alt,),).toBe(0,),)
                test('1',    () => expect(new instance(AB,).indexOfFirstOrNull(callbackIs1Alt,),).toBe(1,),)
                test('4',    () => expect(new instance(AB,).indexOfFirstOrNull(callbackIs4Alt,),).toBeNull(),)
            },)
            describe("4 fields", () => {
                test('a',    () => expect(new instance(ABCD,).indexOfFirstOrNull(callbackIsA,),).toBe(0,),)
                test('b',    () => expect(new instance(ABCD,).indexOfFirstOrNull(callbackIsB,),).toBe(1,),)
                test('c',    () => expect(new instance(ABCD,).indexOfFirstOrNull(callbackIsC,),).toBe(2,),)
                test('d',    () => expect(new instance(ABCD,).indexOfFirstOrNull(callbackIsD,),).toBe(3,),)
                test('e',    () => expect(new instance(ABCD,).indexOfFirstOrNull(callbackIsE,),).toBeNull(),)
                test("even", () => expect(new instance(ABCD,).indexOfFirstOrNull(callbackIsEvenAlt,),).toBe(0,),)
                test("odd",  () => expect(new instance(ABCD,).indexOfFirstOrNull(callbackIsOddAlt,),).toBe(1,),)
                test('0',    () => expect(new instance(ABCD,).indexOfFirstOrNull(callbackIs0Alt,),).toBe(0,),)
                test('1',    () => expect(new instance(ABCD,).indexOfFirstOrNull(callbackIs1Alt,),).toBe(1,),)
                test('2',    () => expect(new instance(ABCD,).indexOfFirstOrNull(callbackIs2Alt,),).toBe(2,),)
                test('3',    () => expect(new instance(ABCD,).indexOfFirstOrNull(callbackIs3Alt,),).toBe(3,),)
                test('4',    () => expect(new instance(ABCD,).indexOfFirstOrNull(callbackIs4Alt,),).toBeNull(),)
            },)

            describe("from", () => {
                test("NaN",  () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, NaN,),).toBeNull(),)
                test("-∞",   () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, -Infinity,),).toBeNull(),)
                test("-500", () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, -500,),).toBeNull(),)
                test("-6",   () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, -6,),).toBeNull(),)
                test("-5",   () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, -5,),).toBeNull(),)
                test("-4",   () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, -3,),).toBe(2,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, -2,),).toBe(2,),)
                test("-1",   () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, -1,),).toBeNull(),)
                test('0',    () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, 1,),).toBe(2,),)
                test('2',    () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, 2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, 3,),).toBeNull(),)
                test('4',    () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, 4,),).toBeNull(),)
                test('5',    () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, 5,),).toBeNull(),)
                test("500",  () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, 500,),).toBeNull(),)
                test("+∞",   () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, Infinity,),).toBeNull(),)
            },)
            describe("to", () => {
                test("NaN",  () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, null, NaN,),).toBeNull(),)
                test("-∞",   () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, null, -Infinity,),).toBeNull(),)
                test("-500", () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, null, -500,),).toBeNull(),)
                test("-6",   () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, null, -6,),).toBeNull(),)
                test("-5",   () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, null, -5,),).toBeNull(),)
                test("-4",   () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, null, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, null, -3,),).toBe(0,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, null, -2,),).toBe(0,),)
                test("-1",   () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, null, -1,),).toBe(0,),)
                test('0',    () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, null, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, null, 1,),).toBe(0,),)
                test('2',    () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, null, 2,),).toBe(0,),)
                test('3',    () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, null, 3,),).toBe(0,),)
                test('4',    () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, null, 4,),).toBeNull(),)
                test('5',    () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, null, 5,),).toBeNull(),)
                test("500",  () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, null, 500,),).toBeNull(),)
                test("+∞",   () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, null, Infinity,),).toBeNull(),)
            },)
            describe("from + to", () => {
                test("0, 0", () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, 0, 0,),).toBe(0,),)
                test("0, 1", () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, 0, 1,),).toBe(0,),)
                test("0, 2", () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, 0, 2,),).toBe(0,),)
                test("0, 3", () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, 0, 3,),).toBe(0,),)
                test("1, 0", () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, 1, 0,),).toBeNull(),)
                test("1, 1", () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, 1, 1,),).toBeNull(),)
                test("1, 2", () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, 1, 2,),).toBe(2,),)
                test("1, 3", () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, 1, 3,),).toBe(2,),)
                test("2, 0", () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, 2, 0,),).toBeNull(),)
                test("2, 1", () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, 2, 1,),).toBeNull(),)
                test("2, 2", () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, 2, 2,),).toBe(2,),)
                test("2, 3", () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, 2, 3,),).toBe(2,),)
                test("3, 0", () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, 3, 0,),).toBeNull(),)
                test("3, 1", () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, 3, 1,),).toBeNull(),)
                test("3, 2", () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackAsFail0, 3, 2,),).toBeNull(),)
                test("3, 3", () => expect(new instance(ABAB,).indexOfFirstOrNull(callbackIsA, 3, 3,),).toBeNull(),)
            },)
        },)
        describe("indexOfFirstIndexed", () => {
            describe("empty", () => {
                test("direct",     () => expect(() => new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0,),).toThrow(EmptyCollectionException,),)
                test("from (NaN)", () => expect(() => new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, NaN,),).toThrow(EmptyCollectionException,),)
                test("from (-∞)",  () => expect(() => new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, -Infinity,),).toThrow(EmptyCollectionException,),)
                test("from (-1)",  () => expect(() => new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, -1,),).toThrow(EmptyCollectionException,),)
                test("from (0)",   () => expect(() => new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, 0,),).toThrow(EmptyCollectionException,),)
                test("from (1)",   () => expect(() => new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, 1,),).toThrow(EmptyCollectionException,),)
                test("from (+∞)",  () => expect(() => new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, Infinity,),).toThrow(EmptyCollectionException,),)
                test("to (NaN)",   () => expect(() => new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, null, NaN,),).toThrow(EmptyCollectionException,),)
                test("to (-∞)",    () => expect(() => new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, null, -Infinity,),).toThrow(EmptyCollectionException,),)
                test("to (-1)",    () => expect(() => new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, null, -1,),).toThrow(EmptyCollectionException,),)
                test("to (0)",     () => expect(() => new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, null, 0,),).toThrow(EmptyCollectionException,),)
                test("to (1)",     () => expect(() => new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, null, 1,),).toThrow(EmptyCollectionException,),)
                test("to (+∞)",    () => expect(() => new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, null, Infinity,),).toThrow(EmptyCollectionException,),)
            },)
            describe("boolean callbacks", () => {
                describe.each(trueCallbacks,)("true: %s", ({value: it,},) => {
                    test("1 field",  () => expect(new instance(A,).indexOfFirstIndexed(it,),).toBe(0,),)
                    test("2 fields", () => expect(new instance(AB,).indexOfFirstIndexed(it,),).toBe(0,),)
                    test("4 fields", () => expect(new instance(ABCD,).indexOfFirstIndexed(it,),).toBe(0,),)
                },)
                describe.each(falseCallbacks,)("false: %s", ({value: it,},) => {
                    test("1 field",  () => expect(() => new instance(A,).indexOfFirstIndexed(it,),).toThrow(IndexOutOfBoundsException,),)
                    test("2 fields", () => expect(() => new instance(AB,).indexOfFirstIndexed(it,),).toThrow(IndexOutOfBoundsException,),)
                    test("4 fields", () => expect(() => new instance(ABCD,).indexOfFirstIndexed(it,),).toThrow(IndexOutOfBoundsException,),)
                },)
            },)
            describe("1 field", () => {
                test('a',    () => expect(new instance(A,).indexOfFirstIndexed(callbackIsAAlt,),).toBe(0,),)
                test('e',    () => expect(() => new instance(A,).indexOfFirstIndexed(callbackIsEAlt,),).toThrow(IndexOutOfBoundsException,),)
                test("even", () => expect(new instance(A,).indexOfFirstIndexed(callbackIsEven,),).toBe(0,),)
                test("odd",  () => expect(() => new instance(A,).indexOfFirstIndexed(callbackIsOdd,),).toThrow(IndexOutOfBoundsException,),)
                test('0',    () => expect(new instance(A,).indexOfFirstIndexed(callbackIs0,),).toBe(0,),)
                test('4',    () => expect(() => new instance(A,).indexOfFirstIndexed(callbackIs4,),).toThrow(IndexOutOfBoundsException,),)

            },)
            describe("2 fields", () => {
                test('a',    () => expect(new instance(AB,).indexOfFirstIndexed(callbackIsAAlt,),).toBe(0,),)
                test('b',    () => expect(new instance(AB,).indexOfFirstIndexed(callbackIsBAlt,),).toBe(1,),)
                test('e',    () => expect(() => new instance(AB,).indexOfFirstIndexed(callbackIsEAlt,),).toThrow(IndexOutOfBoundsException,),)
                test("even", () => expect(new instance(AB,).indexOfFirstIndexed(callbackIsEven,),).toBe(0,),)
                test("odd",  () => expect(new instance(AB,).indexOfFirstIndexed(callbackIsOdd,),).toBe(1,),)
                test('0',    () => expect(new instance(AB,).indexOfFirstIndexed(callbackIs0,),).toBe(0,),)
                test('1',    () => expect(new instance(AB,).indexOfFirstIndexed(callbackIs1,),).toBe(1,),)
                test('4',    () => expect(() => new instance(AB,).indexOfFirstIndexed(callbackIs4,),).toThrow(IndexOutOfBoundsException,),)

            },)
            describe("4 fields", () => {
                test('a',    () => expect(new instance(ABCD,).indexOfFirstIndexed(callbackIsAAlt,),).toBe(0,),)
                test('b',    () => expect(new instance(ABCD,).indexOfFirstIndexed(callbackIsBAlt,),).toBe(1,),)
                test('c',    () => expect(new instance(ABCD,).indexOfFirstIndexed(callbackIsCAlt,),).toBe(2,),)
                test('d',    () => expect(new instance(ABCD,).indexOfFirstIndexed(callbackIsDAlt,),).toBe(3,),)
                test('e',    () => expect(() => new instance(ABCD,).indexOfFirstIndexed(callbackIsEAlt,),).toThrow(IndexOutOfBoundsException,),)
                test("even", () => expect(new instance(ABCD,).indexOfFirstIndexed(callbackIsEven,),).toBe(0,),)
                test("odd",  () => expect(new instance(ABCD,).indexOfFirstIndexed(callbackIsOdd,),).toBe(1,),)
                test('0',    () => expect(new instance(ABCD,).indexOfFirstIndexed(callbackIs0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABCD,).indexOfFirstIndexed(callbackIs1,),).toBe(1,),)
                test('2',    () => expect(new instance(ABCD,).indexOfFirstIndexed(callbackIs2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABCD,).indexOfFirstIndexed(callbackIs3,),).toBe(3,),)
                test('4',    () => expect(() => new instance(ABCD,).indexOfFirstIndexed(callbackIs4,),).toThrow(IndexOutOfBoundsException,),)
            },)

            describe("from", () => {
                test("NaN",  () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, NaN,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, -Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-500", () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, -500,),).toThrow(IndexOutOfBoundsException,),)
                test("-6",   () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, -6,),).toThrow(IndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, -5,),).toThrow(IndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, -3,),).toBe(2,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, -2,),).toBe(2,),)
                test("-1",   () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, -1,),).toThrow(IndexOutOfBoundsException,),)
                test('0',    () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, 1,),).toBe(2,),)
                test('2',    () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, 2,),).toBe(2,),)
                test('3',    () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, 3,),).toThrow(IndexOutOfBoundsException,),)
                test('4',    () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, 4,),).toThrow(IndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, 5,),).toThrow(IndexOutOfBoundsException,),)
                test("500",  () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, 500,),).toThrow(IndexOutOfBoundsException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("to", () => {
                test("NaN",  () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, null, NaN,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, null, -Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-500", () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, null, -500,),).toThrow(IndexOutOfBoundsException,),)
                test("-6",   () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, null, -6,),).toThrow(IndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, null, -5,),).toThrow(IndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, null, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, null, -3,),).toBe(0,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, null, -2,),).toBe(0,),)
                test("-1",   () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, null, -1,),).toBe(0,),)
                test('0',    () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, null, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, null, 1,),).toBe(0,),)
                test('2',    () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, null, 2,),).toBe(0,),)
                test('3',    () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, null, 3,),).toBe(0,),)
                test('4',    () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, null, 4,),).toThrow(IndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, null, 5,),).toThrow(IndexOutOfBoundsException,),)
                test("500",  () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, null, 500,),).toThrow(IndexOutOfBoundsException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, null, Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("from + to", () => {
                test("0, 0", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsAAlt, 0, 0,),).toBe(0,),)
                test("0, 1", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsAAlt, 0, 1,),).toBe(0,),)
                test("0, 2", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsAAlt, 0, 2,),).toBe(0,),)
                test("0, 3", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsAAlt, 0, 3,),).toBe(0,),)
                test("1, 0", () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, 1, 0,),).toThrow(InvalidIndexRangeException,),)
                test("1, 1", () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackIsAAlt, 1, 1,),).toThrow(IndexOutOfBoundsException,),)
                test("1, 2", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsAAlt, 1, 2,),).toBe(2,),)
                test("1, 3", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsAAlt, 1, 3,),).toBe(2,),)
                test("2, 0", () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, 2, 0,),).toThrow(InvalidIndexRangeException,),)
                test("2, 1", () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, 2, 1,),).toThrow(InvalidIndexRangeException,),)
                test("2, 2", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsAAlt, 2, 2,),).toBe(2,),)
                test("2, 3", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsAAlt, 2, 3,),).toBe(2,),)
                test("3, 0", () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, 3, 0,),).toThrow(InvalidIndexRangeException,),)
                test("3, 1", () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, 3, 1,),).toThrow(InvalidIndexRangeException,),)
                test("3, 2", () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, 3, 2,),).toThrow(InvalidIndexRangeException,),)
                test("3, 3", () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackIsAAlt, 3, 3,),).toThrow(IndexOutOfBoundsException,),)
            },)
        },)
        describe("indexOfFirstIndexedOrNull", () => {
            describe("empty", () => {
                test("direct",     () => expect(new instance(EMPTY,).indexOfFirstIndexedOrNull(callbackAsFail0,),).toBeNull(),)
                test("from (NaN)", () => expect(new instance(EMPTY,).indexOfFirstIndexedOrNull(callbackAsFail0, NaN,),).toBeNull(),)
                test("from (-∞)",  () => expect(new instance(EMPTY,).indexOfFirstIndexedOrNull(callbackAsFail0, -Infinity,),).toBeNull(),)
                test("from (-1)",  () => expect(new instance(EMPTY,).indexOfFirstIndexedOrNull(callbackAsFail0, -1,),).toBeNull(),)
                test("from (0)",   () => expect(new instance(EMPTY,).indexOfFirstIndexedOrNull(callbackAsFail0, 0,),).toBeNull(),)
                test("from (1)",   () => expect(new instance(EMPTY,).indexOfFirstIndexedOrNull(callbackAsFail0, 1,),).toBeNull(),)
                test("from (+∞)",  () => expect(new instance(EMPTY,).indexOfFirstIndexedOrNull(callbackAsFail0, Infinity,),).toBeNull(),)
                test("to (NaN)",   () => expect(new instance(EMPTY,).indexOfFirstIndexedOrNull(callbackAsFail0, null, NaN,),).toBeNull(),)
                test("to (-∞)",    () => expect(new instance(EMPTY,).indexOfFirstIndexedOrNull(callbackAsFail0, null, -Infinity,),).toBeNull(),)
                test("to (-1)",    () => expect(new instance(EMPTY,).indexOfFirstIndexedOrNull(callbackAsFail0, null, -1,),).toBeNull(),)
                test("to (0)",     () => expect(new instance(EMPTY,).indexOfFirstIndexedOrNull(callbackAsFail0, null, 0,),).toBeNull(),)
                test("to (1)",     () => expect(new instance(EMPTY,).indexOfFirstIndexedOrNull(callbackAsFail0, null, 1,),).toBeNull(),)
                test("to (+∞)",    () => expect(new instance(EMPTY,).indexOfFirstIndexedOrNull(callbackAsFail0, null, Infinity,),).toBeNull(),)
            },)
            describe("boolean callbacks", () => {
                describe.each(trueCallbacks,)("true: %s", ({value: it,},) => {
                    test("1 field",  () => expect(new instance(A,).indexOfFirstIndexedOrNull(it,),).toBe(0,),)
                    test("2 fields", () => expect(new instance(AB,).indexOfFirstIndexedOrNull(it,),).toBe(0,),)
                    test("4 fields", () => expect(new instance(ABCD,).indexOfFirstIndexedOrNull(it,),).toBe(0,),)
                },)
                describe.each(falseCallbacks,)("false: %s", ({value: it,},) => {
                    test("1 field",  () => expect(new instance(A,).indexOfFirstIndexedOrNull(it,),).toBeNull(),)
                    test("2 fields", () => expect(new instance(AB,).indexOfFirstIndexedOrNull(it,),).toBeNull(),)
                    test("4 fields", () => expect(new instance(ABCD,).indexOfFirstIndexedOrNull(it,),).toBeNull(),)
                },)
            },)
            describe("1 field", () => {
                test('a',    () => expect(new instance(A,).indexOfFirstIndexedOrNull(callbackIsAAlt,),).toBe(0,),)
                test('e',    () => expect(new instance(A,).indexOfFirstIndexedOrNull(callbackIsEAlt,),).toBeNull(),)
                test("even", () => expect(new instance(A,).indexOfFirstIndexedOrNull(callbackIsEven,),).toBe(0,),)
                test("odd",  () => expect(new instance(A,).indexOfFirstIndexedOrNull(callbackIsOdd,),).toBeNull(),)
                test('0',    () => expect(new instance(A,).indexOfFirstIndexedOrNull(callbackIs0,),).toBe(0,),)
                test('4',    () => expect(new instance(A,).indexOfFirstIndexedOrNull(callbackIs4,),).toBeNull(),)

            },)
            describe("2 fields", () => {
                test('a',    () => expect(new instance(AB,).indexOfFirstIndexedOrNull(callbackIsAAlt,),).toBe(0,),)
                test('b',    () => expect(new instance(AB,).indexOfFirstIndexedOrNull(callbackIsBAlt,),).toBe(1,),)
                test('e',    () => expect(new instance(AB,).indexOfFirstIndexedOrNull(callbackIsEAlt,),).toBeNull(),)
                test("even", () => expect(new instance(AB,).indexOfFirstIndexedOrNull(callbackIsEven,),).toBe(0,),)
                test("odd",  () => expect(new instance(AB,).indexOfFirstIndexedOrNull(callbackIsOdd,),).toBe(1,),)
                test('0',    () => expect(new instance(AB,).indexOfFirstIndexedOrNull(callbackIs0,),).toBe(0,),)
                test('1',    () => expect(new instance(AB,).indexOfFirstIndexedOrNull(callbackIs1,),).toBe(1,),)
                test('4',    () => expect(new instance(AB,).indexOfFirstIndexedOrNull(callbackIs4,),).toBeNull(),)

            },)
            describe("4 fields", () => {
                test('a',    () => expect(new instance(ABCD,).indexOfFirstIndexedOrNull(callbackIsAAlt,),).toBe(0,),)
                test('b',    () => expect(new instance(ABCD,).indexOfFirstIndexedOrNull(callbackIsBAlt,),).toBe(1,),)
                test('c',    () => expect(new instance(ABCD,).indexOfFirstIndexedOrNull(callbackIsCAlt,),).toBe(2,),)
                test('d',    () => expect(new instance(ABCD,).indexOfFirstIndexedOrNull(callbackIsDAlt,),).toBe(3,),)
                test('e',    () => expect(new instance(ABCD,).indexOfFirstIndexedOrNull(callbackIsEAlt,),).toBeNull(),)
                test("even", () => expect(new instance(ABCD,).indexOfFirstIndexedOrNull(callbackIsEven,),).toBe(0,),)
                test("odd",  () => expect(new instance(ABCD,).indexOfFirstIndexedOrNull(callbackIsOdd,),).toBe(1,),)
                test('0',    () => expect(new instance(ABCD,).indexOfFirstIndexedOrNull(callbackIs0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABCD,).indexOfFirstIndexedOrNull(callbackIs1,),).toBe(1,),)
                test('2',    () => expect(new instance(ABCD,).indexOfFirstIndexedOrNull(callbackIs2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABCD,).indexOfFirstIndexedOrNull(callbackIs3,),).toBe(3,),)
                test('4',    () => expect(new instance(ABCD,).indexOfFirstIndexedOrNull(callbackIs4,),).toBeNull(),)
            },)

            describe("from", () => {
                test("NaN",  () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, NaN,),).toBeNull(),)
                test("-∞",   () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, -Infinity,),).toBeNull(),)
                test("-500", () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, -500,),).toBeNull(),)
                test("-6",   () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, -6,),).toBeNull(),)
                test("-5",   () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, -5,),).toBeNull(),)
                test("-4",   () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsEven, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsEven, -3,),).toBe(2,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsEven, -2,),).toBe(2,),)
                test("-1",   () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsEven, -1,),).toBeNull(),)
                test('0',    () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsEven, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsEven, 1,),).toBe(2,),)
                test('2',    () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsEven, 2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsEven, 3,),).toBeNull(),)
                test('4',    () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, 4,),).toBeNull(),)
                test('5',    () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, 5,),).toBeNull(),)
                test("500",  () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, 500,),).toBeNull(),)
                test("+∞",   () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, Infinity,),).toBeNull(),)
            },)
            describe("to", () => {
                test("NaN",  () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, null, NaN,),).toBeNull(),)
                test("-∞",   () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, null, -Infinity,),).toBeNull(),)
                test("-500", () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, null, -500,),).toBeNull(),)
                test("-6",   () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, null, -6,),).toBeNull(),)
                test("-5",   () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, null, -5,),).toBeNull(),)
                test("-4",   () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsEven, null, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsEven, null, -3,),).toBe(0,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsEven, null, -2,),).toBe(0,),)
                test("-1",   () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsEven, null, -1,),).toBe(0,),)
                test('0',    () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsEven, null, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsEven, null, 1,),).toBe(0,),)
                test('2',    () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsEven, null, 2,),).toBe(0,),)
                test('3',    () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsEven, null, 3,),).toBe(0,),)
                test('4',    () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, null, 4,),).toBeNull(),)
                test('5',    () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, null, 5,),).toBeNull(),)
                test("500",  () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, null, 500,),).toBeNull(),)
                test("+∞",   () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, null, Infinity,),).toBeNull(),)
            },)
            describe("from + to", () => {
                test("0, 0", () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsAAlt, 0, 0,),).toBe(0,),)
                test("0, 1", () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsAAlt, 0, 1,),).toBe(0,),)
                test("0, 2", () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsAAlt, 0, 2,),).toBe(0,),)
                test("0, 3", () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsAAlt, 0, 3,),).toBe(0,),)
                test("1, 0", () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, 1, 0,),).toBeNull(),)
                test("1, 1", () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsAAlt, 1, 1,),).toBeNull(),)
                test("1, 2", () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsAAlt, 1, 2,),).toBe(2,),)
                test("1, 3", () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsAAlt, 1, 3,),).toBe(2,),)
                test("2, 0", () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, 2, 0,),).toBeNull(),)
                test("2, 1", () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, 2, 1,),).toBeNull(),)
                test("2, 2", () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsAAlt, 2, 2,),).toBe(2,),)
                test("2, 3", () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsAAlt, 2, 3,),).toBe(2,),)
                test("3, 0", () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, 3, 0,),).toBeNull(),)
                test("3, 1", () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, 3, 1,),).toBeNull(),)
                test("3, 2", () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackAsFail0, 3, 2,),).toBeNull(),)
                test("3, 3", () => expect(new instance(ABAB,).indexOfFirstIndexedOrNull(callbackIsAAlt, 3, 3,),).toBeNull(),)
            },)
        },)

        describe("indexOfLast", () => {
            describe("empty", () => {
                test("direct",     () => expect(() => new instance(EMPTY,).indexOfLast(callbackAsFail0,),).toThrow(EmptyCollectionException,),)
                test("from (NaN)", () => expect(() => new instance(EMPTY,).indexOfLast(callbackAsFail0, NaN,),).toThrow(EmptyCollectionException,),)
                test("from (-∞)",  () => expect(() => new instance(EMPTY,).indexOfLast(callbackAsFail0, -Infinity,),).toThrow(EmptyCollectionException,),)
                test("from (-1)",  () => expect(() => new instance(EMPTY,).indexOfLast(callbackAsFail0, -1,),).toThrow(EmptyCollectionException,),)
                test("from (0)",   () => expect(() => new instance(EMPTY,).indexOfLast(callbackAsFail0, 0,),).toThrow(EmptyCollectionException,),)
                test("from (1)",   () => expect(() => new instance(EMPTY,).indexOfLast(callbackAsFail0, 1,),).toThrow(EmptyCollectionException,),)
                test("from (+∞)",  () => expect(() => new instance(EMPTY,).indexOfLast(callbackAsFail0, Infinity,),).toThrow(EmptyCollectionException,),)
                test("to (NaN)",   () => expect(() => new instance(EMPTY,).indexOfLast(callbackAsFail0, null, NaN,),).toThrow(EmptyCollectionException,),)
                test("to (-∞)",    () => expect(() => new instance(EMPTY,).indexOfLast(callbackAsFail0, null, -Infinity,),).toThrow(EmptyCollectionException,),)
                test("to (-1)",    () => expect(() => new instance(EMPTY,).indexOfLast(callbackAsFail0, null, -1,),).toThrow(EmptyCollectionException,),)
                test("to (0)",     () => expect(() => new instance(EMPTY,).indexOfLast(callbackAsFail0, null, 0,),).toThrow(EmptyCollectionException,),)
                test("to (1)",     () => expect(() => new instance(EMPTY,).indexOfLast(callbackAsFail0, null, 1,),).toThrow(EmptyCollectionException,),)
                test("to (+∞)",    () => expect(() => new instance(EMPTY,).indexOfLast(callbackAsFail0, null, Infinity,),).toThrow(EmptyCollectionException,),)
            },)
            describe("boolean callbacks", () => {
                describe.each(trueCallbacks,)("true: %s", ({value: it,},) => {
                    test("1 field",  () => expect(new instance(A,).indexOfLast(it,),).toBe(0,),)
                    test("2 fields", () => expect(new instance(AB,).indexOfLast(it,),).toBe(1,),)
                    test("4 fields", () => expect(new instance(ABCD,).indexOfLast(it,),).toBe(3,),)
                },)
                describe.each(falseCallbacks,)("false: %s", ({value: it,},) => {
                    test("1 field",  () => expect(() => new instance(A,).indexOfLast(it,),).toThrow(IndexOutOfBoundsException,),)
                    test("2 fields", () => expect(() => new instance(AB,).indexOfLast(it,),).toThrow(IndexOutOfBoundsException,),)
                    test("4 fields", () => expect(() => new instance(ABCD,).indexOfLast(it,),).toThrow(IndexOutOfBoundsException,),)
                },)
            },)
            describe("1 field", () => {
                test('a',     () => expect(new instance(A,).indexOfLast(callbackIsA,),).toBe(0,),)
                test('e',     () => expect(() => new instance(A,).indexOfLast(callbackIsE,),).toThrow(IndexOutOfBoundsException,),)
                test("even",  () => expect(new instance(A,).indexOfLast(callbackIsEvenAlt,),).toBe(0,),)
                test("odd",   () => expect(() => new instance(A,).indexOfLast(callbackIsOddAlt,),).toThrow(IndexOutOfBoundsException,),)
                test('0',     () => expect(new instance(A,).indexOfLast(callbackIs0Alt,),).toBe(0,),)
                test('4',     () => expect(() => new instance(A,).indexOfLast(callbackIs4Alt,),).toThrow(IndexOutOfBoundsException,),)
            },)
            describe("2 fields", () => {
                test('a',     () => expect(new instance(AB,).indexOfLast(callbackIsA,),).toBe(0,),)
                test('b',     () => expect(new instance(AB,).indexOfLast(callbackIsB,),).toBe(1,),)
                test('e',     () => expect(() => new instance(AB,).indexOfLast(callbackIsE,),).toThrow(IndexOutOfBoundsException,),)
                test("even",  () => expect(new instance(AB,).indexOfLast(callbackIsEvenAlt,),).toBe(0,),)
                test("odd",   () => expect(new instance(AB,).indexOfLast(callbackIsOddAlt,),).toBe(1,),)
                test('0',     () => expect(new instance(AB,).indexOfLast(callbackIs0Alt,),).toBe(0,),)
                test('1',     () => expect(new instance(AB,).indexOfLast(callbackIs1Alt,),).toBe(1,),)
                test('4',     () => expect(() => new instance(AB,).indexOfLast(callbackIs4Alt,),).toThrow(IndexOutOfBoundsException,),)
            },)
            describe("4 fields", () => {
                test('a',     () => expect(new instance(ABCD,).indexOfLast(callbackIsA,),).toBe(0,),)
                test('b',     () => expect(new instance(ABCD,).indexOfLast(callbackIsB,),).toBe(1,),)
                test('c',     () => expect(new instance(ABCD,).indexOfLast(callbackIsC,),).toBe(2,),)
                test('d',     () => expect(new instance(ABCD,).indexOfLast(callbackIsD,),).toBe(3,),)
                test('e',     () => expect(() => new instance(ABCD,).indexOfLast(callbackIsE,),).toThrow(IndexOutOfBoundsException,),)
                test("even",  () => expect(new instance(ABCD,).indexOfLast(callbackIsEvenAlt,),).toBe(2,),)
                test("odd",   () => expect(new instance(ABCD,).indexOfLast(callbackIsOddAlt,),).toBe(3,),)
                test('0',     () => expect(new instance(ABCD,).indexOfLast(callbackIs0Alt,),).toBe(0,),)
                test('1',     () => expect(new instance(ABCD,).indexOfLast(callbackIs1Alt,),).toBe(1,),)
                test('2',     () => expect(new instance(ABCD,).indexOfLast(callbackIs2Alt,),).toBe(2,),)
                test('3',     () => expect(new instance(ABCD,).indexOfLast(callbackIs3Alt,),).toBe(3,),)
                test('4',     () => expect(() => new instance(ABCD,).indexOfLast(callbackIs4Alt,),).toThrow(IndexOutOfBoundsException,),)
            },)

            describe("from", () => {
                test("NaN",  () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, NaN,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, -Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-500", () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, -500,),).toThrow(IndexOutOfBoundsException,),)
                test("-6",   () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, -6,),).toThrow(IndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, -5,),).toThrow(IndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).indexOfLast(callbackIsA, -4,),).toBe(2,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfLast(callbackIsA, -3,),).toBe(2,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfLast(callbackIsA, -2,),).toBe(2,),)
                test("-1",   () => expect(() => new instance(ABAB,).indexOfLast(callbackIsA, -1,),).toThrow(IndexOutOfBoundsException,),)
                test('0',    () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 0,),).toBe(2,),)
                test('1',    () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 1,),).toBe(2,),)
                test('2',    () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 2,),).toBe(2,),)
                test('3',    () => expect(() => new instance(ABAB,).indexOfLast(callbackIsA, 3,),).toThrow(IndexOutOfBoundsException,),)
                test('4',    () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, 4,),).toThrow(IndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, 5,),).toThrow(IndexOutOfBoundsException,),)
                test("500",  () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, 500,),).toThrow(IndexOutOfBoundsException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("to", () => {
                test("NaN",  () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, null, NaN,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, null, -Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-500", () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, null, -500,),).toThrow(IndexOutOfBoundsException,),)
                test("-6",   () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, null, -6,),).toThrow(IndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, null, -5,),).toThrow(IndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).indexOfLast(callbackIsA, null, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfLast(callbackIsA, null, -3,),).toBe(0,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfLast(callbackIsA, null, -2,),).toBe(2,),)
                test("-1",   () => expect(new instance(ABAB,).indexOfLast(callbackIsA, null, -1,),).toBe(2,),)
                test('0',    () => expect(new instance(ABAB,).indexOfLast(callbackIsA, null, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).indexOfLast(callbackIsA, null, 1,),).toBe(0,),)
                test('2',    () => expect(new instance(ABAB,).indexOfLast(callbackIsA, null, 2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABAB,).indexOfLast(callbackIsA, null, 3,),).toBe(2,),)
                test('4',    () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, null, 4,),).toThrow(IndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, null, 5,),).toThrow(IndexOutOfBoundsException,),)
                test("500",  () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, null, 500,),).toThrow(IndexOutOfBoundsException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, null, Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("from + to", () => {
                test("0, 0", () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 0, 0,),).toBe(0,),)
                test("0, 1", () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 0, 1,),).toBe(0,),)
                test("0, 2", () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 0, 2,),).toBe(2,),)
                test("0, 3", () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 0, 3,),).toBe(2,),)
                test("1, 0", () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, 1, 0,),).toThrow(InvalidIndexRangeException,),)
                test("1, 1", () => expect(() => new instance(ABAB,).indexOfLast(callbackIsA, 1, 1,),).toThrow(IndexOutOfBoundsException,),)
                test("1, 2", () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 1, 2,),).toBe(2,),)
                test("1, 3", () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 1, 3,),).toBe(2,),)
                test("2, 0", () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, 2, 0,),).toThrow(InvalidIndexRangeException,),)
                test("2, 1", () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, 2, 1,),).toThrow(InvalidIndexRangeException,),)
                test("2, 2", () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 2, 2,),).toBe(2,),)
                test("2, 3", () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 2, 3,),).toBe(2,),)
                test("3, 0", () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, 3, 0,),).toThrow(InvalidIndexRangeException,),)
                test("3, 1", () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, 3, 1,),).toThrow(InvalidIndexRangeException,),)
                test("3, 2", () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, 3, 2,),).toThrow(InvalidIndexRangeException,),)
                test("3, 3", () => expect(() => new instance(ABAB,).indexOfLast(callbackIsA, 3, 3,),).toThrow(IndexOutOfBoundsException,),)
            },)
        },)
        describe("indexOfLastOrNull", () => {
            describe("empty", () => {
                test("direct",     () => expect(new instance(EMPTY,).indexOfLastOrNull(callbackAsFail0,),).toBeNull(),)
                test("from (NaN)", () => expect(new instance(EMPTY,).indexOfLastOrNull(callbackAsFail0, NaN,),).toBeNull(),)
                test("from (-∞)",  () => expect(new instance(EMPTY,).indexOfLastOrNull(callbackAsFail0, -Infinity,),).toBeNull(),)
                test("from (-1)",  () => expect(new instance(EMPTY,).indexOfLastOrNull(callbackAsFail0, -1,),).toBeNull(),)
                test("from (0)",   () => expect(new instance(EMPTY,).indexOfLastOrNull(callbackAsFail0, 0,),).toBeNull(),)
                test("from (1)",   () => expect(new instance(EMPTY,).indexOfLastOrNull(callbackAsFail0, 1,),).toBeNull(),)
                test("from (+∞)",  () => expect(new instance(EMPTY,).indexOfLastOrNull(callbackAsFail0, Infinity,),).toBeNull(),)
                test("to (NaN)",   () => expect(new instance(EMPTY,).indexOfLastOrNull(callbackAsFail0, null, NaN,),).toBeNull(),)
                test("to (-∞)",    () => expect(new instance(EMPTY,).indexOfLastOrNull(callbackAsFail0, null, -Infinity,),).toBeNull(),)
                test("to (-1)",    () => expect(new instance(EMPTY,).indexOfLastOrNull(callbackAsFail0, null, -1,),).toBeNull(),)
                test("to (0)",     () => expect(new instance(EMPTY,).indexOfLastOrNull(callbackAsFail0, null, 0,),).toBeNull(),)
                test("to (1)",     () => expect(new instance(EMPTY,).indexOfLastOrNull(callbackAsFail0, null, 1,),).toBeNull(),)
                test("to (+∞)",    () => expect(new instance(EMPTY,).indexOfLastOrNull(callbackAsFail0, null, Infinity,),).toBeNull(),)
            },)
            describe("boolean callbacks", () => {
                describe.each(trueCallbacks,)("true: %s", ({value: it,},) => {
                    test("1 field",  () => expect(new instance(A,).indexOfLastOrNull(it,),).toBe(0,),)
                    test("2 fields", () => expect(new instance(AB,).indexOfLastOrNull(it,),).toBe(1,),)
                    test("4 fields", () => expect(new instance(ABCD,).indexOfLastOrNull(it,),).toBe(3,),)
                },)
                describe.each(falseCallbacks,)("false: %s", ({value: it,},) => {
                    test("1 field",  () => expect(new instance(A,).indexOfLastOrNull(it,),).toBeNull(),)
                    test("2 fields", () => expect(new instance(AB,).indexOfLastOrNull(it,),).toBeNull(),)
                    test("4 fields", () => expect(new instance(ABCD,).indexOfLastOrNull(it,),).toBeNull(),)
                },)
            },)
            describe("1 field", () => {
                test('a',     () => expect(new instance(A,).indexOfLastOrNull(callbackIsA,),).toBe(0,),)
                test('e',     () => expect(new instance(A,).indexOfLastOrNull(callbackIsE,),).toBeNull(),)
                test("even",  () => expect(new instance(A,).indexOfLastOrNull(callbackIsEvenAlt,),).toBe(0,),)
                test("odd",   () => expect(new instance(A,).indexOfLastOrNull(callbackIsOddAlt,),).toBeNull(),)
                test('0',     () => expect(new instance(A,).indexOfLastOrNull(callbackIs0Alt,),).toBe(0,),)
                test('4',     () => expect(new instance(A,).indexOfLastOrNull(callbackIs4Alt,),).toBeNull(),)
            },)
            describe("2 fields", () => {
                test('a',     () => expect(new instance(AB,).indexOfLastOrNull(callbackIsA,),).toBe(0,),)
                test('b',     () => expect(new instance(AB,).indexOfLastOrNull(callbackIsB,),).toBe(1,),)
                test('e',     () => expect(new instance(AB,).indexOfLastOrNull(callbackIsE,),).toBeNull(),)
                test("even",  () => expect(new instance(AB,).indexOfLastOrNull(callbackIsEvenAlt,),).toBe(0,),)
                test("odd",   () => expect(new instance(AB,).indexOfLastOrNull(callbackIsOddAlt,),).toBe(1,),)
                test('0',     () => expect(new instance(AB,).indexOfLastOrNull(callbackIs0Alt,),).toBe(0,),)
                test('1',     () => expect(new instance(AB,).indexOfLastOrNull(callbackIs1Alt,),).toBe(1,),)
                test('4',     () => expect(new instance(AB,).indexOfLastOrNull(callbackIs4Alt,),).toBeNull(),)
            },)
            describe("4 fields", () => {
                test('a',     () => expect(new instance(ABCD,).indexOfLastOrNull(callbackIsA,),).toBe(0,),)
                test('b',     () => expect(new instance(ABCD,).indexOfLastOrNull(callbackIsB,),).toBe(1,),)
                test('c',     () => expect(new instance(ABCD,).indexOfLastOrNull(callbackIsC,),).toBe(2,),)
                test('d',     () => expect(new instance(ABCD,).indexOfLastOrNull(callbackIsD,),).toBe(3,),)
                test('e',     () => expect(new instance(ABCD,).indexOfLastOrNull(callbackIsE,),).toBeNull(),)
                test("even",  () => expect(new instance(ABCD,).indexOfLastOrNull(callbackIsEvenAlt,),).toBe(2,),)
                test("odd",   () => expect(new instance(ABCD,).indexOfLastOrNull(callbackIsOddAlt,),).toBe(3,),)
                test('0',     () => expect(new instance(ABCD,).indexOfLastOrNull(callbackIs0Alt,),).toBe(0,),)
                test('1',     () => expect(new instance(ABCD,).indexOfLastOrNull(callbackIs1Alt,),).toBe(1,),)
                test('2',     () => expect(new instance(ABCD,).indexOfLastOrNull(callbackIs2Alt,),).toBe(2,),)
                test('3',     () => expect(new instance(ABCD,).indexOfLastOrNull(callbackIs3Alt,),).toBe(3,),)
                test('4',     () => expect(new instance(ABCD,).indexOfLastOrNull(callbackIs4Alt,),).toBeNull(),)
            },)

            describe("from", () => {
                test("NaN",  () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, NaN,),).toBeNull(),)
                test("-∞",   () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, -Infinity,),).toBeNull(),)
                test("-500", () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, -500,),).toBeNull(),)
                test("-6",   () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, -6,),).toBeNull(),)
                test("-5",   () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, -5,),).toBeNull(),)
                test("-4",   () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, -4,),).toBe(2,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, -3,),).toBe(2,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, -2,),).toBe(2,),)
                test("-1",   () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, -1,),).toBeNull(),)
                test('0',    () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, 0,),).toBe(2,),)
                test('1',    () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, 1,),).toBe(2,),)
                test('2',    () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, 2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, 3,),).toBeNull(),)
                test('4',    () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, 4,),).toBeNull(),)
                test('5',    () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, 5,),).toBeNull(),)
                test("500",  () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, 500,),).toBeNull(),)
                test("+∞",   () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, Infinity,),).toBeNull(),)
            },)
            describe("to", () => {
                test("NaN",  () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, null, NaN,),).toBeNull(),)
                test("-∞",   () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, null, -Infinity,),).toBeNull(),)
                test("-500", () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, null, -500,),).toBeNull(),)
                test("-6",   () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, null, -6,),).toBeNull(),)
                test("-5",   () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, null, -5,),).toBeNull(),)
                test("-4",   () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, null, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, null, -3,),).toBe(0,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, null, -2,),).toBe(2,),)
                test("-1",   () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, null, -1,),).toBe(2,),)
                test('0',    () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, null, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, null, 1,),).toBe(0,),)
                test('2',    () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, null, 2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, null, 3,),).toBe(2,),)
                test('4',    () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, null, 4,),).toBeNull(),)
                test('5',    () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, null, 5,),).toBeNull(),)
                test("500",  () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, null, 500,),).toBeNull(),)
                test("+∞",   () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, null, Infinity,),).toBeNull(),)
            },)
            describe("from + to", () => {
                test("0, 0", () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, 0, 0,),).toBe(0,),)
                test("0, 1", () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, 0, 1,),).toBe(0,),)
                test("0, 2", () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, 0, 2,),).toBe(2,),)
                test("0, 3", () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, 0, 3,),).toBe(2,),)
                test("1, 0", () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, 1, 0,),).toBeNull(),)
                test("1, 1", () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, 1, 1,),).toBeNull(),)
                test("1, 2", () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, 1, 2,),).toBe(2,),)
                test("1, 3", () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, 1, 3,),).toBe(2,),)
                test("2, 0", () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, 2, 0,),).toBeNull(),)
                test("2, 1", () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, 2, 1,),).toBeNull(),)
                test("2, 2", () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, 2, 2,),).toBe(2,),)
                test("2, 3", () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, 2, 3,),).toBe(2,),)
                test("3, 0", () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, 3, 0,),).toBeNull(),)
                test("3, 1", () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, 3, 1,),).toBeNull(),)
                test("3, 2", () => expect(new instance(ABAB,).indexOfLastOrNull(callbackAsFail0, 3, 2,),).toBeNull(),)
                test("3, 3", () => expect(new instance(ABAB,).indexOfLastOrNull(callbackIsA, 3, 3,),).toBeNull(),)
            },)
        },)
        describe("indexOfLastIndexed", () => {
            describe("empty", () => {
                test("direct",     () => expect(() => new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0,),).toThrow(EmptyCollectionException,),)
                test("from (NaN)", () => expect(() => new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, NaN,),).toThrow(EmptyCollectionException,),)
                test("from (-∞)",  () => expect(() => new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, -Infinity,),).toThrow(EmptyCollectionException,),)
                test("from (-1)",  () => expect(() => new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, -1,),).toThrow(EmptyCollectionException,),)
                test("from (0)",   () => expect(() => new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, 0,),).toThrow(EmptyCollectionException,),)
                test("from (1)",   () => expect(() => new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, 1,),).toThrow(EmptyCollectionException,),)
                test("from (+∞)",  () => expect(() => new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, Infinity,),).toThrow(EmptyCollectionException,),)
                test("to (NaN)",   () => expect(() => new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, null, NaN,),).toThrow(EmptyCollectionException,),)
                test("to (-∞)",    () => expect(() => new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, null, -Infinity,),).toThrow(EmptyCollectionException,),)
                test("to (-1)",    () => expect(() => new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, null, -1,),).toThrow(EmptyCollectionException,),)
                test("to (0)",     () => expect(() => new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, null, 0,),).toThrow(EmptyCollectionException,),)
                test("to (1)",     () => expect(() => new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, null, 1,),).toThrow(EmptyCollectionException,),)
                test("to (+∞)",    () => expect(() => new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, null, Infinity,),).toThrow(EmptyCollectionException,),)
            },)
            describe("boolean callbacks", () => {
                describe.each(trueCallbacks,)("true: %s", ({value: it,},) => {
                    test("1 field",  () => expect(new instance(A,).indexOfLastIndexed(it,),).toBe(0,),)
                    test("2 fields", () => expect(new instance(AB,).indexOfLastIndexed(it,),).toBe(1,),)
                    test("4 fields", () => expect(new instance(ABCD,).indexOfLastIndexed(it,),).toBe(3,),)
                },)
                describe.each(falseCallbacks,)("false: %s", ({value: it,},) => {
                    test("1 field",  () => expect(() => new instance(A,).indexOfLastIndexed(it,),).toThrow(IndexOutOfBoundsException,),)
                    test("2 fields", () => expect(() => new instance(AB,).indexOfLastIndexed(it,),).toThrow(IndexOutOfBoundsException,),)
                    test("4 fields", () => expect(() => new instance(ABCD,).indexOfLastIndexed(it,),).toThrow(IndexOutOfBoundsException,),)
                },)
            },)
            describe("1 field", () => {
                test('a',     () => expect(new instance(A,).indexOfLastIndexed(callbackIsAAlt,),).toBe(0,),)
                test('e',     () => expect(() => new instance(A,).indexOfLastIndexed(callbackIsEAlt,),).toThrow(IndexOutOfBoundsException,),)
                test("even",  () => expect(new instance(A,).indexOfLastIndexed(callbackIsEven,),).toBe(0,),)
                test("odd",   () => expect(() => new instance(A,).indexOfLastIndexed(callbackIsOdd,),).toThrow(IndexOutOfBoundsException,),)
                test('0',     () => expect(new instance(A,).indexOfLastIndexed(callbackIs0,),).toBe(0,),)
                test('4',     () => expect(() => new instance(A,).indexOfLastIndexed(callbackIs4,),).toThrow(IndexOutOfBoundsException,),)

            },)
            describe("2 fields", () => {
                test('a',     () => expect(new instance(AB,).indexOfLastIndexed(callbackIsAAlt,),).toBe(0,),)
                test('b',     () => expect(new instance(AB,).indexOfLastIndexed(callbackIsBAlt,),).toBe(1,),)
                test('e',     () => expect(() => new instance(AB,).indexOfLastIndexed(callbackIsEAlt,),).toThrow(IndexOutOfBoundsException,),)
                test("even",  () => expect(new instance(AB,).indexOfLastIndexed(callbackIsEven,),).toBe(0,),)
                test("odd",   () => expect(new instance(AB,).indexOfLastIndexed(callbackIsOdd,),).toBe(1,),)
                test('0',     () => expect(new instance(AB,).indexOfLastIndexed(callbackIs0,),).toBe(0,),)
                test('1',     () => expect(new instance(AB,).indexOfLastIndexed(callbackIs1,),).toBe(1,),)
                test('4',     () => expect(() => new instance(AB,).indexOfLastIndexed(callbackIs4,),).toThrow(IndexOutOfBoundsException,),)

            },)
            describe("4 fields", () => {
                test('a',     () => expect(new instance(ABCD,).indexOfLastIndexed(callbackIsAAlt,),).toBe(0,),)
                test('b',     () => expect(new instance(ABCD,).indexOfLastIndexed(callbackIsBAlt,),).toBe(1,),)
                test('c',     () => expect(new instance(ABCD,).indexOfLastIndexed(callbackIsCAlt,),).toBe(2,),)
                test('d',     () => expect(new instance(ABCD,).indexOfLastIndexed(callbackIsDAlt,),).toBe(3,),)
                test('e',     () => expect(() => new instance(ABCD,).indexOfLastIndexed(callbackIsEAlt,),).toThrow(IndexOutOfBoundsException,),)
                test("even",  () => expect(new instance(ABCD,).indexOfLastIndexed(callbackIsEven,),).toBe(2,),)
                test("odd",   () => expect(new instance(ABCD,).indexOfLastIndexed(callbackIsOdd,),).toBe(3,),)
                test('0',     () => expect(new instance(ABCD,).indexOfLastIndexed(callbackIs0,),).toBe(0,),)
                test('1',     () => expect(new instance(ABCD,).indexOfLastIndexed(callbackIs1,),).toBe(1,),)
                test('2',     () => expect(new instance(ABCD,).indexOfLastIndexed(callbackIs2,),).toBe(2,),)
                test('3',     () => expect(new instance(ABCD,).indexOfLastIndexed(callbackIs3,),).toBe(3,),)
                test('4',     () => expect(() => new instance(ABCD,).indexOfLastIndexed(callbackIs4,),).toThrow(IndexOutOfBoundsException,),)
            },)

            describe("from", () => {
                test("NaN",  () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, NaN,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, -Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-500", () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, -500,),).toThrow(IndexOutOfBoundsException,),)
                test("-6",   () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, -6,),).toThrow(IndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, -5,),).toThrow(IndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, -4,),).toBe(2,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, -3,),).toBe(2,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, -2,),).toBe(2,),)
                test("-1",   () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackIsEven, -1,),).toThrow(IndexOutOfBoundsException,),)
                test('0',    () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, 0,),).toBe(2,),)
                test('1',    () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, 1,),).toBe(2,),)
                test('2',    () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, 2,),).toBe(2,),)
                test('3',    () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackIsEven, 3,),).toThrow(IndexOutOfBoundsException,),)
                test('4',    () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, 4,),).toThrow(IndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, 5,),).toThrow(IndexOutOfBoundsException,),)
                test("500",  () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, 500,),).toThrow(IndexOutOfBoundsException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("to", () => {
                test("NaN",  () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, null, NaN,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, null, -Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-500", () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, null, -500,),).toThrow(IndexOutOfBoundsException,),)
                test("-6",   () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, null, -6,),).toThrow(IndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, null, -5,),).toThrow(IndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, null, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, null, -3,),).toBe(0,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, null, -2,),).toBe(2,),)
                test("-1",   () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, null, -1,),).toBe(2,),)
                test('0',    () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, null, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, null, 1,),).toBe(0,),)
                test('2',    () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, null, 2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, null, 3,),).toBe(2,),)
                test('4',    () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, null, 4,),).toThrow(IndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, null, 5,),).toThrow(IndexOutOfBoundsException,),)
                test("500",  () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, null, 500,),).toThrow(IndexOutOfBoundsException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, null, Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("from + to", () => {
                test("0, 0", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsAAlt, 0, 0,),).toBe(0,),)
                test("0, 1", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsAAlt, 0, 1,),).toBe(0,),)
                test("0, 2", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsAAlt, 0, 2,),).toBe(2,),)
                test("0, 3", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsAAlt, 0, 3,),).toBe(2,),)
                test("1, 0", () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, 1, 0,),).toThrow(InvalidIndexRangeException,),)
                test("1, 1", () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackIsAAlt, 1, 1,),).toThrow(IndexOutOfBoundsException,),)
                test("1, 2", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsAAlt, 1, 2,),).toBe(2,),)
                test("1, 3", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsAAlt, 1, 3,),).toBe(2,),)
                test("2, 0", () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, 2, 0,),).toThrow(InvalidIndexRangeException,),)
                test("2, 1", () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, 2, 1,),).toThrow(InvalidIndexRangeException,),)
                test("2, 2", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsAAlt, 2, 2,),).toBe(2,),)
                test("2, 3", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsAAlt, 2, 3,),).toBe(2,),)
                test("3, 0", () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, 3, 0,),).toThrow(InvalidIndexRangeException,),)
                test("3, 1", () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, 3, 1,),).toThrow(InvalidIndexRangeException,),)
                test("3, 2", () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, 3, 2,),).toThrow(InvalidIndexRangeException,),)
                test("3, 3", () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackIsAAlt, 3, 3,),).toThrow(IndexOutOfBoundsException,),)
            },)
        },)
        describe("indexOfLastIndexedOrNull", () => {
            describe("empty", () => {
                test("direct",     () => expect(new instance(EMPTY,).indexOfLastIndexedOrNull(callbackAsFail0,),).toBeNull(),)
                test("from (NaN)", () => expect(new instance(EMPTY,).indexOfLastIndexedOrNull(callbackAsFail0, NaN,),).toBeNull(),)
                test("from (-∞)",  () => expect(new instance(EMPTY,).indexOfLastIndexedOrNull(callbackAsFail0, -Infinity,),).toBeNull(),)
                test("from (-1)",  () => expect(new instance(EMPTY,).indexOfLastIndexedOrNull(callbackAsFail0, -1,),).toBeNull(),)
                test("from (0)",   () => expect(new instance(EMPTY,).indexOfLastIndexedOrNull(callbackAsFail0, 0,),).toBeNull(),)
                test("from (1)",   () => expect(new instance(EMPTY,).indexOfLastIndexedOrNull(callbackAsFail0, 1,),).toBeNull(),)
                test("from (+∞)",  () => expect(new instance(EMPTY,).indexOfLastIndexedOrNull(callbackAsFail0, Infinity,),).toBeNull(),)
                test("to (NaN)",   () => expect(new instance(EMPTY,).indexOfLastIndexedOrNull(callbackAsFail0, null, NaN,),).toBeNull(),)
                test("to (-∞)",    () => expect(new instance(EMPTY,).indexOfLastIndexedOrNull(callbackAsFail0, null, -Infinity,),).toBeNull(),)
                test("to (-1)",    () => expect(new instance(EMPTY,).indexOfLastIndexedOrNull(callbackAsFail0, null, -1,),).toBeNull(),)
                test("to (0)",     () => expect(new instance(EMPTY,).indexOfLastIndexedOrNull(callbackAsFail0, null, 0,),).toBeNull(),)
                test("to (1)",     () => expect(new instance(EMPTY,).indexOfLastIndexedOrNull(callbackAsFail0, null, 1,),).toBeNull(),)
                test("to (+∞)",    () => expect(new instance(EMPTY,).indexOfLastIndexedOrNull(callbackAsFail0, null, Infinity,),).toBeNull(),)
            },)
            describe("boolean callbacks", () => {
                describe.each(trueCallbacks,)("true: %s", ({value: it,},) => {
                    test("1 field",  () => expect(new instance(A,).indexOfLastIndexedOrNull(it,),).toBe(0,),)
                    test("2 fields", () => expect(new instance(AB,).indexOfLastIndexedOrNull(it,),).toBe(1,),)
                    test("4 fields", () => expect(new instance(ABCD,).indexOfLastIndexedOrNull(it,),).toBe(3,),)
                },)
                describe.each(falseCallbacks,)("false: %s", ({value: it,},) => {
                    test("1 field",  () => expect(new instance(A,).indexOfLastIndexedOrNull(it,),).toBeNull(),)
                    test("2 fields", () => expect(new instance(AB,).indexOfLastIndexedOrNull(it,),).toBeNull(),)
                    test("4 fields", () => expect(new instance(ABCD,).indexOfLastIndexedOrNull(it,),).toBeNull(),)
                },)
            },)
            describe("1 field", () => {
                test('a',     () => expect(new instance(A,).indexOfLastIndexedOrNull(callbackIsAAlt,),).toBe(0,),)
                test('e',     () => expect(new instance(A,).indexOfLastIndexedOrNull(callbackIsEAlt,),).toBeNull(),)
                test("even",  () => expect(new instance(A,).indexOfLastIndexedOrNull(callbackIsEven,),).toBe(0,),)
                test("odd",   () => expect(new instance(A,).indexOfLastIndexedOrNull(callbackIsOdd,),).toBeNull(),)
                test('0',     () => expect(new instance(A,).indexOfLastIndexedOrNull(callbackIs0,),).toBe(0,),)
                test('4',     () => expect(new instance(A,).indexOfLastIndexedOrNull(callbackIs4,),).toBeNull(),)

            },)
            describe("2 fields", () => {
                test('a',     () => expect(new instance(AB,).indexOfLastIndexedOrNull(callbackIsAAlt,),).toBe(0,),)
                test('b',     () => expect(new instance(AB,).indexOfLastIndexedOrNull(callbackIsBAlt,),).toBe(1,),)
                test('e',     () => expect(new instance(AB,).indexOfLastIndexedOrNull(callbackIsEAlt,),).toBeNull(),)
                test("even",  () => expect(new instance(AB,).indexOfLastIndexedOrNull(callbackIsEven,),).toBe(0,),)
                test("odd",   () => expect(new instance(AB,).indexOfLastIndexedOrNull(callbackIsOdd,),).toBe(1,),)
                test('0',     () => expect(new instance(AB,).indexOfLastIndexedOrNull(callbackIs0,),).toBe(0,),)
                test('1',     () => expect(new instance(AB,).indexOfLastIndexedOrNull(callbackIs1,),).toBe(1,),)
                test('4',     () => expect(new instance(AB,).indexOfLastIndexedOrNull(callbackIs4,),).toBeNull(),)

            },)
            describe("4 fields", () => {
                test('a',     () => expect(new instance(ABCD,).indexOfLastIndexedOrNull(callbackIsAAlt,),).toBe(0,),)
                test('b',     () => expect(new instance(ABCD,).indexOfLastIndexedOrNull(callbackIsBAlt,),).toBe(1,),)
                test('c',     () => expect(new instance(ABCD,).indexOfLastIndexedOrNull(callbackIsCAlt,),).toBe(2,),)
                test('d',     () => expect(new instance(ABCD,).indexOfLastIndexedOrNull(callbackIsDAlt,),).toBe(3,),)
                test('e',     () => expect(new instance(ABCD,).indexOfLastIndexedOrNull(callbackIsEAlt,),).toBeNull(),)
                test("even",  () => expect(new instance(ABCD,).indexOfLastIndexedOrNull(callbackIsEven,),).toBe(2,),)
                test("odd",   () => expect(new instance(ABCD,).indexOfLastIndexedOrNull(callbackIsOdd,),).toBe(3,),)
                test('0',     () => expect(new instance(ABCD,).indexOfLastIndexedOrNull(callbackIs0,),).toBe(0,),)
                test('1',     () => expect(new instance(ABCD,).indexOfLastIndexedOrNull(callbackIs1,),).toBe(1,),)
                test('2',     () => expect(new instance(ABCD,).indexOfLastIndexedOrNull(callbackIs2,),).toBe(2,),)
                test('3',     () => expect(new instance(ABCD,).indexOfLastIndexedOrNull(callbackIs3,),).toBe(3,),)
                test('4',     () => expect(new instance(ABCD,).indexOfLastIndexedOrNull(callbackIs4,),).toBeNull(),)
            },)

            describe("from", () => {
                test("NaN",  () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, NaN,),).toBeNull(),)
                test("-∞",   () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, -Infinity,),).toBeNull(),)
                test("-500", () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, -500,),).toBeNull(),)
                test("-6",   () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, -6,),).toBeNull(),)
                test("-5",   () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, -5,),).toBeNull(),)
                test("-4",   () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsEven, -4,),).toBe(2,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsEven, -3,),).toBe(2,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsEven, -2,),).toBe(2,),)
                test("-1",   () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsEven, -1,),).toBeNull(),)
                test('0',    () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsEven, 0,),).toBe(2,),)
                test('1',    () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsEven, 1,),).toBe(2,),)
                test('2',    () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsEven, 2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsEven, 3,),).toBeNull(),)
                test('4',    () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, 4,),).toBeNull(),)
                test('5',    () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, 5,),).toBeNull(),)
                test("500",  () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, 500,),).toBeNull(),)
                test("+∞",   () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, Infinity,),).toBeNull(),)
            },)
            describe("to", () => {
                test("NaN",  () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, null, NaN,),).toBeNull(),)
                test("-∞",   () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, null, -Infinity,),).toBeNull(),)
                test("-500", () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, null, -500,),).toBeNull(),)
                test("-6",   () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, null, -6,),).toBeNull(),)
                test("-5",   () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, null, -5,),).toBeNull(),)
                test("-4",   () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsEven, null, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsEven, null, -3,),).toBe(0,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsEven, null, -2,),).toBe(2,),)
                test("-1",   () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsEven, null, -1,),).toBe(2,),)
                test('0',    () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsEven, null, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsEven, null, 1,),).toBe(0,),)
                test('2',    () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsEven, null, 2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsEven, null, 3,),).toBe(2,),)
                test('4',    () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, null, 4,),).toBeNull(),)
                test('5',    () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, null, 5,),).toBeNull(),)
                test("500",  () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, null, 500,),).toBeNull(),)
                test("+∞",   () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, null, Infinity,),).toBeNull(),)
            },)
            describe("from + to", () => {
                test("0, 0", () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsAAlt, 0, 0,),).toBe(0,),)
                test("0, 1", () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsAAlt, 0, 1,),).toBe(0,),)
                test("0, 2", () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsAAlt, 0, 2,),).toBe(2,),)
                test("0, 3", () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsAAlt, 0, 3,),).toBe(2,),)
                test("1, 0", () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, 1, 0,),).toBeNull(),)
                test("1, 1", () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsAAlt, 1, 1,),).toBeNull(),)
                test("1, 2", () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsAAlt, 1, 2,),).toBe(2,),)
                test("1, 3", () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsAAlt, 1, 3,),).toBe(2,),)
                test("2, 0", () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, 2, 0,),).toBeNull(),)
                test("2, 1", () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, 2, 1,),).toBeNull(),)
                test("2, 2", () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsAAlt, 2, 2,),).toBe(2,),)
                test("2, 3", () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsAAlt, 2, 3,),).toBe(2,),)
                test("3, 0", () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, 3, 0,),).toBeNull(),)
                test("3, 1", () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, 3, 1,),).toBeNull(),)
                test("3, 2", () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackAsFail0, 3, 2,),).toBeNull(),)
                test("3, 3", () => expect(new instance(ABAB,).indexOfLastIndexedOrNull(callbackIsAAlt, 3, 3,),).toBeNull(),)
            },)
        },)
    },)

},)

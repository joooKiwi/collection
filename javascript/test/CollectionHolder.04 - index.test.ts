/*******************************************************************************
 Copyright (c) 2023-2024. Jonathan Bédard ~ JóôòKiwi

 This project is free to use.
 All the right is reserved to the author of this project.
 ******************************************************************************/

import {EmptyCollectionHolderForTest}                                                                                                                                                                                        from "./instance/EmptyCollectionHolderForTest"
import {A, AA, AB, ABAB, ABCD, EMPTY}                                                                                                                                                                                        from "./value/arrays"
import {callbackAsFalse0, callbackAsFalse1, callbackAsFalse2, callbackAsTrue0, callbackAsTrue1, callbackAsTrue2, falseCallbacks, trueCallbacks}                                                                              from "./value/callbacks (boolean)"
import {callbackAsFail0, callbackAsFail1, callbackAsFail2}                                                                                                                                                                   from "./value/callbacks (fail)"
import {callbackIs0, callbackIs0Alt, callbackIs1, callbackIs1Alt, callbackIs2, callbackIs2Alt, callbackIs3, callbackIs3Alt, callbackIs4, callbackIs4Alt, callbackIsEven, callbackIsEvenAlt, callbackIsOdd, callbackIsOddAlt} from "./value/callbacks (number)"
import {callbackIsA, callbackIsAAlt, callbackIsB, callbackIsBAlt, callbackIsC, callbackIsCAlt, callbackIsD, callbackIsDAlt, callbackIsE, callbackIsEAlt}                                                                     from "./value/callbacks (string)"
import {everyCollectionInstancesAndExtensionFunctionAsCollectionHolder}                                                                                                                                                      from "./value/instances"

import {CollectionHolderIndexOutOfBoundsException} from "../src/exception/CollectionHolderIndexOutOfBoundsException"
import {ForbiddenIndexException}                   from "../src/exception/ForbiddenIndexException"

describe("CollectionHolderTest (index)", () => {

    describe("EmptyCollectionHolder", () => {
        test("indexOf",             () => expect(new EmptyCollectionHolderForTest().indexOf(),).toBeNull(),)
        test("lastIndexOf",         () => expect(new EmptyCollectionHolderForTest().lastIndexOf(),).toBeNull(),)
        test("indexOfFirst",        () => expect(new EmptyCollectionHolderForTest().indexOfFirst(),).toBeNull(),)
        test("indexOfFirstIndexed", () => expect(new EmptyCollectionHolderForTest().indexOfFirstIndexed(),).toBeNull(),)
        test("indexOfLast",         () => expect(new EmptyCollectionHolderForTest().indexOfLast(),).toBeNull(),)
        test("indexOfLastIndexed",  () => expect(new EmptyCollectionHolderForTest().indexOfLastIndexed(),).toBeNull(),)
    },)

    describe.each(everyCollectionInstancesAndExtensionFunctionAsCollectionHolder,)("%s", ({value: {instance, isExtension,},},) => {
        if (!isExtension)
            describe("get() being called", () => {
                describe("indexOf", () => {
                    test("empty",        () => expect(new instance<string>(EMPTY,).execute(it => it.indexOf('a',),).amountOfCall,).toBe(0,),)
                    test("1 field (a)",  () => expect(new instance(A,).execute(it => it.indexOf('a',),).amountOfCall,).toBe(1,),)
                    test("1 field (e)",  () => expect(new instance<string>(A,).execute(it => it.indexOf('e',),).amountOfCall,).toBe(1,),)
                    test("2 fields (a)", () => expect(new instance(AB,).execute(it => it.indexOf('a',),).amountOfCall,).toBe(1,),)
                    test("2 fields (k)", () => expect(new instance<string>(AB,).execute(it => it.indexOf('k',),).amountOfCall,).toBe(2,),)
                    test("4 fields (a)", () => expect(new instance(ABCD,).execute(it => it.indexOf('a',),).amountOfCall,).toBe(1,),)
                    test("4 fields (k)", () => expect(new instance<string>(ABCD,).execute(it => it.indexOf('k',),).amountOfCall,).toBe(4,),)
                },)
                describe("lastIndexOf", () => {
                    test("empty",        () => expect(new instance<string>(EMPTY,).execute(it => it.lastIndexOf('a',),).amountOfCall,).toBe(0,),)
                    test("1 field (a)",  () => expect(new instance(A,).execute(it => it.lastIndexOf('a',),).amountOfCall,).toBe(1,),)
                    test("1 field (k)",  () => expect(new instance<string>(A,).execute(it => it.lastIndexOf('k',),).amountOfCall,).toBe(1,),)
                    test("2 fields (b)", () => expect(new instance(AB,).execute(it => it.lastIndexOf('b',),).amountOfCall,).toBe(1,),)
                    test("2 fields (k)", () => expect(new instance<string>(AB,).execute(it => it.lastIndexOf('k',),).amountOfCall,).toBe(2,),)
                    test("4 fields (d)", () => expect(new instance(ABCD,).execute(it => it.lastIndexOf('d',),).amountOfCall,).toBe(1,),)
                    test("4 fields (k)", () => expect(new instance<string>(ABCD,).execute(it => it.lastIndexOf('k',),).amountOfCall,).toBe(4,),)
                },)

                describe("indexOfFirst", () => {
                    describe("empty", () => {
                        test("0 arguments", () => expect(new instance(EMPTY,).execute(it => it.indexOfFirst(callbackAsFail0,),).amountOfCall,).toBe(0,),)
                        test("1 argument",  () => expect(new instance(EMPTY,).execute(it => it.indexOfFirst(callbackAsFail1,),).amountOfCall,).toBe(0,),)
                        test("2 arguments", () => expect(new instance(EMPTY,).execute(it => it.indexOfFirst(callbackAsFail2,),).amountOfCall,).toBe(0,),)
                    },)
                    describe("1 field", () => {
                        test("true: 0 arguments",  () => expect(new instance(A,).execute(it => it.indexOfFirst(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(A,).execute(it => it.indexOfFirst(callbackAsTrue1,),).amountOfCall,).toBe(1,),)
                        test("true: 2 arguments",  () => expect(new instance(A,).execute(it => it.indexOfFirst(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(A,).execute(it => it.indexOfFirst(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(A,).execute(it => it.indexOfFirst(callbackAsFalse1,),).amountOfCall,).toBe(1,),)
                        test("false: 2 arguments", () => expect(new instance(A,).execute(it => it.indexOfFirst(callbackAsFalse2,),).amountOfCall,).toBe(1,),)
                    },)
                    describe("2 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfFirst(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(AB,).execute(it => it.indexOfFirst(callbackAsTrue1,),).amountOfCall,).toBe(1,),)
                        test("true: 2 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfFirst(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(AB,).execute(it => it.indexOfFirst(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(AB,).execute(it => it.indexOfFirst(callbackAsFalse1,),).amountOfCall,).toBe(2,),)
                        test("false: 2 arguments", () => expect(new instance(AB,).execute(it => it.indexOfFirst(callbackAsFalse2,),).amountOfCall,).toBe(2,),)
                    },)
                    describe("4 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfFirst(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(ABCD,).execute(it => it.indexOfFirst(callbackAsTrue1,),).amountOfCall,).toBe(1,),)
                        test("true: 2 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfFirst(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(ABCD,).execute(it => it.indexOfFirst(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(ABCD,).execute(it => it.indexOfFirst(callbackAsFalse1,),).amountOfCall,).toBe(4,),)
                        test("false: 2 arguments", () => expect(new instance(ABCD,).execute(it => it.indexOfFirst(callbackAsFalse2,),).amountOfCall,).toBe(4,),)
                    },)
                },)
                describe("indexOfFirstIndexed", () => {
                    describe("empty", () => {
                        test("0 arguments", () => expect(new instance(EMPTY,).execute(it => it.indexOfFirstIndexed(callbackAsFail0,),).amountOfCall,).toBe(0,),)
                        test("1 argument",  () => expect(new instance(EMPTY,).execute(it => it.indexOfFirstIndexed(callbackAsFail1,),).amountOfCall,).toBe(0,),)
                        test("2 arguments", () => expect(new instance(EMPTY,).execute(it => it.indexOfFirstIndexed(callbackAsFail2,),).amountOfCall,).toBe(0,),)
                    },)
                    describe("1 field", () => {
                        test("true: 0 arguments",  () => expect(new instance(A,).execute(it => it.indexOfFirstIndexed(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(A,).execute(it => it.indexOfFirstIndexed(callbackAsTrue1,),).amountOfCall,).toBe(0,),)
                        test("true: 2 arguments",  () => expect(new instance(A,).execute(it => it.indexOfFirstIndexed(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(A,).execute(it => it.indexOfFirstIndexed(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(A,).execute(it => it.indexOfFirstIndexed(callbackAsFalse1,),).amountOfCall,).toBe(0,),)
                        test("false: 2 arguments", () => expect(new instance(A,).execute(it => it.indexOfFirstIndexed(callbackAsFalse2,),).amountOfCall,).toBe(1,),)
                    },)
                    describe("2 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfFirstIndexed(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(AB,).execute(it => it.indexOfFirstIndexed(callbackAsTrue1,),).amountOfCall,).toBe(0,),)
                        test("true: 2 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfFirstIndexed(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(AB,).execute(it => it.indexOfFirstIndexed(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(AB,).execute(it => it.indexOfFirstIndexed(callbackAsFalse1,),).amountOfCall,).toBe(0,),)
                        test("false: 2 arguments", () => expect(new instance(AB,).execute(it => it.indexOfFirstIndexed(callbackAsFalse2,),).amountOfCall,).toBe(2,),)
                    },)
                    describe("4 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfFirstIndexed(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(ABCD,).execute(it => it.indexOfFirstIndexed(callbackAsTrue1,),).amountOfCall,).toBe(0,),)
                        test("true: 2 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfFirstIndexed(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(ABCD,).execute(it => it.indexOfFirstIndexed(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(ABCD,).execute(it => it.indexOfFirstIndexed(callbackAsFalse1,),).amountOfCall,).toBe(0,),)
                        test("false: 2 arguments", () => expect(new instance(ABCD,).execute(it => it.indexOfFirstIndexed(callbackAsFalse2,),).amountOfCall,).toBe(4,),)
                    },)
                },)
                describe("indexOfLast", () => {
                    describe("empty", () => {
                        test("0 arguments", () => expect(new instance(EMPTY,).execute(it => it.indexOfLast(callbackAsFail0,),).amountOfCall,).toBe(0,),)
                        test("1 argument",  () => expect(new instance(EMPTY,).execute(it => it.indexOfLast(callbackAsFail1,),).amountOfCall,).toBe(0,),)
                        test("2 arguments", () => expect(new instance(EMPTY,).execute(it => it.indexOfLast(callbackAsFail2,),).amountOfCall,).toBe(0,),)
                    },)
                    describe("1 field", () => {
                        test("true: 0 arguments",  () => expect(new instance(A,).execute(it => it.indexOfLast(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(A,).execute(it => it.indexOfLast(callbackAsTrue1,),).amountOfCall,).toBe(1,),)
                        test("true: 2 arguments",  () => expect(new instance(A,).execute(it => it.indexOfLast(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(A,).execute(it => it.indexOfLast(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(A,).execute(it => it.indexOfLast(callbackAsFalse1,),).amountOfCall,).toBe(1,),)
                        test("false: 2 arguments", () => expect(new instance(A,).execute(it => it.indexOfLast(callbackAsFalse2,),).amountOfCall,).toBe(1,),)
                    },)
                    describe("2 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfLast(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(AB,).execute(it => it.indexOfLast(callbackAsTrue1,),).amountOfCall,).toBe(1,),)
                        test("true: 2 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfLast(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(AB,).execute(it => it.indexOfLast(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(AB,).execute(it => it.indexOfLast(callbackAsFalse1,),).amountOfCall,).toBe(2,),)
                        test("false: 2 arguments", () => expect(new instance(AB,).execute(it => it.indexOfLast(callbackAsFalse2,),).amountOfCall,).toBe(2,),)
                    },)
                    describe("4 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfLast(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(ABCD,).execute(it => it.indexOfLast(callbackAsTrue1,),).amountOfCall,).toBe(1,),)
                        test("true: 2 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfLast(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(ABCD,).execute(it => it.indexOfLast(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(ABCD,).execute(it => it.indexOfLast(callbackAsFalse1,),).amountOfCall,).toBe(4,),)
                        test("false: 2 arguments", () => expect(new instance(ABCD,).execute(it => it.indexOfLast(callbackAsFalse2,),).amountOfCall,).toBe(4,),)
                    },)
                },)
                describe("indexOfLastIndexed", () => {
                    describe("empty", () => {
                        test("0 arguments", () => expect(new instance(EMPTY,).execute(it => it.indexOfLastIndexed(callbackAsFail0,),).amountOfCall,).toBe(0,),)
                        test("1 argument",  () => expect(new instance(EMPTY,).execute(it => it.indexOfLastIndexed(callbackAsFail1,),).amountOfCall,).toBe(0,),)
                        test("2 arguments", () => expect(new instance(EMPTY,).execute(it => it.indexOfLastIndexed(callbackAsFail2,),).amountOfCall,).toBe(0,),)
                    },)
                    describe("1 field", () => {
                        test("true: 0 arguments",  () => expect(new instance(A,).execute(it => it.indexOfLastIndexed(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(A,).execute(it => it.indexOfLastIndexed(callbackAsTrue1,),).amountOfCall,).toBe(0,),)
                        test("true: 2 arguments",  () => expect(new instance(A,).execute(it => it.indexOfLastIndexed(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(A,).execute(it => it.indexOfLastIndexed(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(A,).execute(it => it.indexOfLastIndexed(callbackAsFalse1,),).amountOfCall,).toBe(0,),)
                        test("false: 2 arguments", () => expect(new instance(A,).execute(it => it.indexOfLastIndexed(callbackAsFalse2,),).amountOfCall,).toBe(1,),)
                    },)
                    describe("2 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfLastIndexed(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(AB,).execute(it => it.indexOfLastIndexed(callbackAsTrue1,),).amountOfCall,).toBe(0,),)
                        test("true: 2 arguments",  () => expect(new instance(AB,).execute(it => it.indexOfLastIndexed(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(AB,).execute(it => it.indexOfLastIndexed(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(AB,).execute(it => it.indexOfLastIndexed(callbackAsFalse1,),).amountOfCall,).toBe(0,),)
                        test("false: 2 arguments", () => expect(new instance(AB,).execute(it => it.indexOfLastIndexed(callbackAsFalse2,),).amountOfCall,).toBe(2,),)
                    },)
                    describe("4 fields", () => {
                        test("true: 0 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfLastIndexed(callbackAsTrue0,),).amountOfCall,).toBe(0,),)
                        test("true: 1 argument",   () => expect(new instance(ABCD,).execute(it => it.indexOfLastIndexed(callbackAsTrue1,),).amountOfCall,).toBe(0,),)
                        test("true: 2 arguments",  () => expect(new instance(ABCD,).execute(it => it.indexOfLastIndexed(callbackAsTrue2,),).amountOfCall,).toBe(1,),)
                        test("false: 0 arguments", () => expect(new instance(ABCD,).execute(it => it.indexOfLastIndexed(callbackAsFalse0,),).amountOfCall,).toBe(0,),)
                        test("false: 1 argument",  () => expect(new instance(ABCD,).execute(it => it.indexOfLastIndexed(callbackAsFalse1,),).amountOfCall,).toBe(0,),)
                        test("false: 2 arguments", () => expect(new instance(ABCD,).execute(it => it.indexOfLastIndexed(callbackAsFalse2,),).amountOfCall,).toBe(4,),)
                    },)
                },)
            },)

        describe("indexOf", () => {
            describe("empty", () => {
                test("direct",     () => expect(new instance<string>(EMPTY,).indexOf('a',),).toBeNull(),)
                test("from (NaN)", () => expect(new instance<string>(EMPTY,).indexOf('a', NaN,),).toBeNull(),)
                test("from (-∞)",  () => expect(new instance<string>(EMPTY,).indexOf('a', -Infinity,),).toBeNull(),)
                test("from (-1)",  () => expect(new instance<string>(EMPTY,).indexOf('a', -1,),).toBeNull(),)
                test("from (0)",   () => expect(new instance<string>(EMPTY,).indexOf('a', 0,),).toBeNull(),)
                test("from (1)",   () => expect(new instance<string>(EMPTY,).indexOf('a', 1,),).toBeNull(),)
                test("from (+∞)",  () => expect(new instance<string>(EMPTY,).indexOf('a', Infinity,),).toBeNull(),)
                test("to (NaN)",   () => expect(new instance<string>(EMPTY,).indexOf('a', null, NaN,),).toBeNull(),)
                test("to (-∞)",    () => expect(new instance<string>(EMPTY,).indexOf('a', null, -Infinity,),).toBeNull(),)
                test("to (-1)",    () => expect(new instance<string>(EMPTY,).indexOf('a', null, -1,),).toBeNull(),)
                test("to (0)",     () => expect(new instance<string>(EMPTY,).indexOf('a', null, 0,),).toBeNull(),)
                test("to (1)",     () => expect(new instance<string>(EMPTY,).indexOf('a', null, 1,),).toBeNull(),)
                test("to (+∞)",    () => expect(new instance<string>(EMPTY,).indexOf('a', null, Infinity,),).toBeNull(),)
            },)
            describe("1 field", () => {
                test('a', () => expect(new instance(A,).indexOf('a',),).toBe(0,),)
                test('e', () => expect(new instance<string>(A,).indexOf('e',),).toBeNull(),)
            },)
            describe("2 fields", () => {
                test('a', () => expect(new instance(AA,).indexOf('a',),).toBe(0,),)
                test('e', () => expect(new instance<string>(AA,).indexOf('e',),).toBeNull(),)
            },)
            describe("4 fields", () => {
                test('a', () => expect(new instance(ABAB,).indexOf('a',),).toBe(0,),)
                test('b', () => expect(new instance(ABAB,).indexOf('b',),).toBe(1,),)
                test('e', () => expect(new instance<string>(ABAB,).indexOf('e',),).toBeNull(),)
            },)

            describe("from", () => {
                test("NaN",  () => expect(() => new instance(ABAB,).indexOf('a', NaN,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).indexOf('a', -Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-500", () => expect(() => new instance(ABAB,).indexOf('a', -500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-6",   () => expect(() => new instance(ABAB,).indexOf('a', -6,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).indexOf('a', -5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).indexOf('a', -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).indexOf('a', -3,),).toBe(2,),)
                test("-2",   () => expect(new instance(ABAB,).indexOf('a', -2,),).toBe(2,),)
                test("-1",   () => expect(new instance(ABAB,).indexOf('a', -1,),).toBeNull(),)
                test('0',    () => expect(new instance(ABAB,).indexOf('a', 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).indexOf('a', 1,),).toBe(2,),)
                test('2',    () => expect(new instance(ABAB,).indexOf('a', 2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABAB,).indexOf('a', 3,),).toBeNull(),)
                test('4',    () => expect(() => new instance(ABAB,).indexOf('a', 4,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).indexOf('a', 5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("500",  () => expect(() => new instance(ABAB,).indexOf('a', 500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).indexOf('a', Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("to", () => {
                test("NaN",  () => expect(() => new instance(ABAB,).indexOf('a', null, NaN,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).indexOf('a', null, -Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-500", () => expect(() => new instance(ABAB,).indexOf('a', null, -500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-6",   () => expect(() => new instance(ABAB,).indexOf('a', null, -6,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).indexOf('a', null, -5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).indexOf('a', null, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).indexOf('a', null, -3,),).toBe(0,),)
                test("-2",   () => expect(new instance(ABAB,).indexOf('a', null, -2,),).toBe(0,),)
                test("-1",   () => expect(new instance(ABAB,).indexOf('a', null, -1,),).toBe(0,),)
                test('0',    () => expect(new instance(ABAB,).indexOf('a', null, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).indexOf('a', null, 1,),).toBe(0,),)
                test('2',    () => expect(new instance(ABAB,).indexOf('a', null, 2,),).toBe(0,),)
                test('3',    () => expect(new instance(ABAB,).indexOf('a', null, 3,),).toBe(0,),)
                test('4',    () => expect(() => new instance(ABAB,).indexOf('a', null, 4,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).indexOf('a', null, 5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("500",  () => expect(() => new instance(ABAB,).indexOf('a', null, 500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).indexOf('a', null, Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("from + to", () => {
                test("0, 0", () => expect(new instance(ABAB,).indexOf('a', 0, 0,),).toBe(0,),)
                test("0, 1", () => expect(new instance(ABAB,).indexOf('a', 0, 1,),).toBe(0,),)
                test("0, 2", () => expect(new instance(ABAB,).indexOf('a', 0, 2,),).toBe(0,),)
                test("0, 3", () => expect(new instance(ABAB,).indexOf('a', 0, 3,),).toBe(0,),)
                test("1, 0", () => expect(new instance(ABAB,).indexOf('a', 1, 0,),).toBeNull(),)
                test("1, 1", () => expect(new instance(ABAB,).indexOf('a', 1, 1,),).toBeNull(),)
                test("1, 2", () => expect(new instance(ABAB,).indexOf('a', 1, 2,),).toBe(2,),)
                test("1, 3", () => expect(new instance(ABAB,).indexOf('a', 1, 3,),).toBe(2,),)
                test("2, 0", () => expect(new instance(ABAB,).indexOf('a', 2, 0,),).toBeNull(),)
                test("2, 1", () => expect(new instance(ABAB,).indexOf('a', 2, 1,),).toBeNull(),)
                test("2, 2", () => expect(new instance(ABAB,).indexOf('a', 2, 2,),).toBe(2,),)
                test("2, 3", () => expect(new instance(ABAB,).indexOf('a', 2, 3,),).toBe(2,),)
                test("3, 0", () => expect(new instance(ABAB,).indexOf('a', 3, 0,),).toBeNull(),)
                test("3, 1", () => expect(new instance(ABAB,).indexOf('a', 3, 1,),).toBeNull(),)
                test("3, 2", () => expect(new instance(ABAB,).indexOf('a', 3, 2,),).toBeNull(),)
                test("3, 3", () => expect(new instance(ABAB,).indexOf('a', 3, 3,),).toBeNull(),)
            },)
        },)
        describe("lastIndexOf", () => {
            describe("empty", () => {
                test("direct",     () => expect(new instance<string>(EMPTY,).lastIndexOf('a',),).toBeNull(),)
                test("from (-1)",  () => expect(new instance<string>(EMPTY,).lastIndexOf('a', -1,),).toBeNull(),)
                test("from (0)",   () => expect(new instance<string>(EMPTY,).lastIndexOf('a', 0,),).toBeNull(),)
                test("from (1)",   () => expect(new instance<string>(EMPTY,).lastIndexOf('a', 1,),).toBeNull(),)
                test("from (NaN)", () => expect(new instance<string>(EMPTY,).lastIndexOf('a', NaN,),).toBeNull(),)
                test("from (-∞)",  () => expect(new instance<string>(EMPTY,).lastIndexOf('a', -Infinity,),).toBeNull(),)
                test("from (+∞)",  () => expect(new instance<string>(EMPTY,).lastIndexOf('a', Infinity,),).toBeNull(),)
                test("to (-1)",    () => expect(new instance<string>(EMPTY,).lastIndexOf('a', null, -1,),).toBeNull(),)
                test("to (0)",     () => expect(new instance<string>(EMPTY,).lastIndexOf('a', null, 0,),).toBeNull(),)
                test("to (1)",     () => expect(new instance<string>(EMPTY,).lastIndexOf('a', null, 1,),).toBeNull(),)
                test("to (NaN)",   () => expect(new instance<string>(EMPTY,).lastIndexOf('a', null, NaN,),).toBeNull(),)
                test("to (-∞)",    () => expect(new instance<string>(EMPTY,).lastIndexOf('a', null, -Infinity,),).toBeNull(),)
                test("to (+∞)",    () => expect(new instance<string>(EMPTY,).lastIndexOf('a', null, Infinity,),).toBeNull(),)
            },)
            describe("1 field", () => {
                test('a', () => expect(new instance(A,).lastIndexOf('a',),).toBe(0,),)
                test('e', () => expect(new instance<string>(A,).lastIndexOf('e',),).toBeNull(),)
            },)
            describe("2 unique fields", () => {
                test('a', () => expect(new instance(AB,).lastIndexOf('a',),).toBe(0,),)
                test('b', () => expect(new instance(AB,).lastIndexOf('b',),).toBe(1,),)
                test('e', () => expect(new instance<string>(AB,).lastIndexOf('e',),).toBeNull(),)
            },)
            describe("2 duplicated fields", () => {
                test('a', () => expect(new instance(AA,).lastIndexOf('a',),).toBe(1,),)
                test('e', () => expect(new instance<string>(AA,).lastIndexOf('e',),).toBeNull(),)
            },)
            describe("4 unique fields", () => {
                test('a', () => expect(new instance(ABCD,).lastIndexOf('a',),).toBe(0,),)
                test('b', () => expect(new instance(ABCD,).lastIndexOf('b',),).toBe(1,),)
                test('c', () => expect(new instance(ABCD,).lastIndexOf('c',),).toBe(2,),)
                test('d', () => expect(new instance(ABCD,).lastIndexOf('d',),).toBe(3,),)
                test('e', () => expect(new instance<string>(ABCD,).lastIndexOf('e',),).toBeNull(),)
            },)
            describe("4 duplicative fields", () => {
                test('a', () => expect(new instance(ABAB,).lastIndexOf('a',),).toBe(2,),)
                test('b', () => expect(new instance(ABAB,).lastIndexOf('b',),).toBe(3,),)
                test('e', () => expect(new instance<string>(ABAB,).lastIndexOf('e',),).toBeNull(),)
            },)

            describe("from", () => {
                test("NaN",  () => expect(() => new instance(ABAB,).indexOf('a', NaN,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).indexOf('a', -Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-500", () => expect(() => new instance(ABAB,).indexOf('a', -500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-6",   () => expect(() => new instance(ABAB,).lastIndexOf('a', -6,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).lastIndexOf('a', -5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).lastIndexOf('a', -4,),).toBe(2,),)
                test("-3",   () => expect(new instance(ABAB,).lastIndexOf('a', -3,),).toBe(2,),)
                test("-2",   () => expect(new instance(ABAB,).lastIndexOf('a', -2,),).toBe(2,),)
                test("-1",   () => expect(new instance(ABAB,).lastIndexOf('a', -1,),).toBeNull(),)
                test('0',    () => expect(new instance(ABAB,).lastIndexOf('a', 0,),).toBe(2,),)
                test('1',    () => expect(new instance(ABAB,).lastIndexOf('a', 1,),).toBe(2,),)
                test('2',    () => expect(new instance(ABAB,).lastIndexOf('a', 2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABAB,).lastIndexOf('a', 3,),).toBeNull(),)
                test('4',    () => expect(() => new instance(ABAB,).indexOf('a', 4,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).indexOf('a', 5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("500",  () => expect(() => new instance(ABAB,).indexOf('a', 500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).indexOf('a', Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("to", () => {
                test("NaN",  () => expect(() => new instance(ABAB,).lastIndexOf('a', null, NaN,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).lastIndexOf('a', null, -Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-500", () => expect(() => new instance(ABAB,).lastIndexOf('a', null, -500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-6",   () => expect(() => new instance(ABAB,).lastIndexOf('a', null, -6,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).lastIndexOf('a', null, -5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).lastIndexOf('a', null, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).lastIndexOf('a', null, -3,),).toBe(0,),)
                test("-2",   () => expect(new instance(ABAB,).lastIndexOf('a', null, -2,),).toBe(2,),)
                test("-1",   () => expect(new instance(ABAB,).lastIndexOf('a', null, -1,),).toBe(2,),)
                test('0',    () => expect(new instance(ABAB,).lastIndexOf('a', null, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).lastIndexOf('a', null, 1,),).toBe(0,),)
                test('2',    () => expect(new instance(ABAB,).lastIndexOf('a', null, 2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABAB,).lastIndexOf('a', null, 3,),).toBe(2,),)
                test('4',    () => expect(() => new instance(ABAB,).lastIndexOf('a', null, 4,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).lastIndexOf('a', null, 5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("500",  () => expect(() => new instance(ABAB,).lastIndexOf('a', null, 500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).lastIndexOf('a', null, Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("from + to", () => {
                test("0, 0", () => expect(new instance(ABAB,).lastIndexOf('a', 0, 0,),).toBe(0,),)
                test("0, 1", () => expect(new instance(ABAB,).lastIndexOf('a', 0, 1,),).toBe(0,),)
                test("0, 2", () => expect(new instance(ABAB,).lastIndexOf('a', 0, 2,),).toBe(2,),)
                test("0, 3", () => expect(new instance(ABAB,).lastIndexOf('a', 0, 3,),).toBe(2,),)
                test("1, 0", () => expect(new instance(ABAB,).lastIndexOf('a', 1, 0,),).toBeNull(),)
                test("1, 1", () => expect(new instance(ABAB,).lastIndexOf('a', 1, 1,),).toBeNull(),)
                test("1, 2", () => expect(new instance(ABAB,).lastIndexOf('a', 1, 2,),).toBe(2,),)
                test("1, 3", () => expect(new instance(ABAB,).lastIndexOf('a', 1, 3,),).toBe(2,),)
                test("2, 0", () => expect(new instance(ABAB,).lastIndexOf('a', 2, 0,),).toBeNull(),)
                test("2, 1", () => expect(new instance(ABAB,).lastIndexOf('a', 2, 1,),).toBeNull(),)
                test("2, 2", () => expect(new instance(ABAB,).lastIndexOf('a', 2, 2,),).toBe(2,),)
                test("2, 3", () => expect(new instance(ABAB,).lastIndexOf('a', 2, 3,),).toBe(2,),)
                test("3, 0", () => expect(new instance(ABAB,).lastIndexOf('a', 3, 0,),).toBeNull(),)
                test("3, 1", () => expect(new instance(ABAB,).lastIndexOf('a', 3, 1,),).toBeNull(),)
                test("3, 2", () => expect(new instance(ABAB,).lastIndexOf('a', 3, 2,),).toBeNull(),)
                test("3, 3", () => expect(new instance(ABAB,).lastIndexOf('a', 3, 3,),).toBeNull(),)
            },)
        },)
        describe("indexOfFirst", () => {
            describe("empty", () => {
                test("direct",     () => expect(new instance(EMPTY,).indexOfFirst(callbackAsFail0,),).toBeNull(),)
                test("from (-1)",  () => expect(new instance(EMPTY,).indexOfFirst(callbackAsFail0, -1,),).toBeNull(),)
                test("from (0)",   () => expect(new instance(EMPTY,).indexOfFirst(callbackAsFail0, 0,),).toBeNull(),)
                test("from (1)",   () => expect(new instance(EMPTY,).indexOfFirst(callbackAsFail0, 1,),).toBeNull(),)
                test("from (NaN)", () => expect(new instance(EMPTY,).indexOfFirst(callbackAsFail0, NaN,),).toBeNull(),)
                test("from (-∞)",  () => expect(new instance(EMPTY,).indexOfFirst(callbackAsFail0, -Infinity,),).toBeNull(),)
                test("from (+∞)",  () => expect(new instance(EMPTY,).indexOfFirst(callbackAsFail0, Infinity,),).toBeNull(),)
                test("to (-1)",    () => expect(new instance(EMPTY,).indexOfFirst(callbackAsFail0, null, -1,),).toBeNull(),)
                test("to (0)",     () => expect(new instance(EMPTY,).indexOfFirst(callbackAsFail0, null, 0,),).toBeNull(),)
                test("to (1)",     () => expect(new instance(EMPTY,).indexOfFirst(callbackAsFail0, null, 1,),).toBeNull(),)
                test("to (NaN)",   () => expect(new instance(EMPTY,).indexOfFirst(callbackAsFail0, null, NaN,),).toBeNull(),)
                test("to (-∞)",    () => expect(new instance(EMPTY,).indexOfFirst(callbackAsFail0, null, -Infinity,),).toBeNull(),)
                test("to (+∞)",    () => expect(new instance(EMPTY,).indexOfFirst(callbackAsFail0, null, Infinity,),).toBeNull(),)
            },)
            describe("boolean callbacks", () => {
                describe.each(trueCallbacks,)("true: %s", ({value: it,},) => {
                    test("1 field",  () => expect(new instance(A,).indexOfFirst(it,),).toBe(0,),)
                    test("2 fields", () => expect(new instance(AB,).indexOfFirst(it,),).toBe(0,),)
                    test("4 fields", () => expect(new instance(ABCD,).indexOfFirst(it,),).toBe(0,),)
                },)
                describe.each(falseCallbacks,)("false: %s", ({value: it,},) => {
                    test("1 field",  () => expect(new instance(A,).indexOfFirst(it,),).toBeNull(),)
                    test("2 fields", () => expect(new instance(AB,).indexOfFirst(it,),).toBeNull(),)
                    test("4 fields", () => expect(new instance(ABCD,).indexOfFirst(it,),).toBeNull(),)
                },)
            },)
            describe("1 field", () => {
                test('a',    () => expect(new instance(A,).indexOfFirst(callbackIsA,),).toBe(0,),)
                test('e',    () => expect(new instance(A,).indexOfFirst(callbackIsE,),).toBeNull(),)
                test("even", () => expect(new instance(A,).indexOfFirst(callbackIsEvenAlt,),).toBe(0,),)
                test("odd",  () => expect(new instance(A,).indexOfFirst(callbackIsOddAlt,),).toBeNull(),)
                test('0',    () => expect(new instance(A,).indexOfFirst(callbackIs0Alt,),).toBe(0,),)
                test('4',    () => expect(new instance(A,).indexOfFirst(callbackIs4Alt,),).toBeNull(),)
            },)
            describe("2 fields", () => {
                test('a',    () => expect(new instance(AB,).indexOfFirst(callbackIsA,),).toBe(0,),)
                test('b',    () => expect(new instance(AB,).indexOfFirst(callbackIsB,),).toBe(1,),)
                test('e',    () => expect(new instance(AB,).indexOfFirst(callbackIsE,),).toBeNull(),)
                test("even", () => expect(new instance(AB,).indexOfFirst(callbackIsEvenAlt,),).toBe(0,),)
                test("odd",  () => expect(new instance(AB,).indexOfFirst(callbackIsOddAlt,),).toBe(1,),)
                test('0',    () => expect(new instance(AB,).indexOfFirst(callbackIs0Alt,),).toBe(0,),)
                test('1',    () => expect(new instance(AB,).indexOfFirst(callbackIs1Alt,),).toBe(1,),)
                test('4',    () => expect(new instance(AB,).indexOfFirst(callbackIs4Alt,),).toBeNull(),)
            },)
            describe("4 fields", () => {
                test('a',    () => expect(new instance(ABCD,).indexOfFirst(callbackIsA,),).toBe(0,),)
                test('b',    () => expect(new instance(ABCD,).indexOfFirst(callbackIsB,),).toBe(1,),)
                test('c',    () => expect(new instance(ABCD,).indexOfFirst(callbackIsC,),).toBe(2,),)
                test('d',    () => expect(new instance(ABCD,).indexOfFirst(callbackIsD,),).toBe(3,),)
                test('e',    () => expect(new instance(ABCD,).indexOfFirst(callbackIsE,),).toBeNull(),)
                test("even", () => expect(new instance(ABCD,).indexOfFirst(callbackIsEvenAlt,),).toBe(0,),)
                test("odd",  () => expect(new instance(ABCD,).indexOfFirst(callbackIsOddAlt,),).toBe(1,),)
                test('0',    () => expect(new instance(ABCD,).indexOfFirst(callbackIs0Alt,),).toBe(0,),)
                test('1',    () => expect(new instance(ABCD,).indexOfFirst(callbackIs1Alt,),).toBe(1,),)
                test('2',    () => expect(new instance(ABCD,).indexOfFirst(callbackIs2Alt,),).toBe(2,),)
                test('3',    () => expect(new instance(ABCD,).indexOfFirst(callbackIs3Alt,),).toBe(3,),)
                test('4',    () => expect(new instance(ABCD,).indexOfFirst(callbackIs4Alt,),).toBeNull(),)
            },)

            describe("from", () => {
                test("-6",   () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, -6,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, -5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, -3,),).toBe(2,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, -2,),).toBe(2,),)
                test("-1",   () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, -1,),).toBeNull(),)
                test('0',    () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 1,),).toBe(2,),)
                test('2',    () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 3,),).toBeNull(),)
                test('4',    () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, 4,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, 5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)

                test("500",  () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, 500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-500", () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, -500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)

                test("NaN",  () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, NaN,),).toThrow(ForbiddenIndexException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, -Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("to", () => {
                test("-6",   () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, null, -6,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, null, -5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, null, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, null, -3,),).toBe(0,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, null, -2,),).toBe(0,),)
                test("-1",   () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, null, -1,),).toBe(0,),)
                test('0',    () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, null, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, null, 1,),).toBe(0,),)
                test('2',    () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, null, 2,),).toBe(0,),)
                test('3',    () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, null, 3,),).toBe(0,),)
                test('4',    () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, null, 4,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, null, 5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)

                test("500",  () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, null, 500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-500", () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, null, -500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)

                test("NaN",  () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, null, NaN,),).toThrow(ForbiddenIndexException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, null, Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).indexOfFirst(callbackAsFail0, null, -Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("from + to", () => {
                test("0, 0", () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 0, 0,),).toBe(0,),)
                test("0, 1", () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 0, 1,),).toBe(0,),)
                test("0, 2", () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 0, 2,),).toBe(0,),)
                test("0, 3", () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 0, 3,),).toBe(0,),)
                test("1, 0", () => expect(new instance(ABAB,).indexOfFirst(callbackAsFail0, 1, 0,),).toBeNull(),)
                test("1, 1", () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 1, 1,),).toBeNull(),)
                test("1, 2", () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 1, 2,),).toBe(2,),)
                test("1, 3", () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 1, 3,),).toBe(2,),)
                test("2, 0", () => expect(new instance(ABAB,).indexOfFirst(callbackAsFail0, 2, 0,),).toBeNull(),)
                test("2, 1", () => expect(new instance(ABAB,).indexOfFirst(callbackAsFail0, 2, 1,),).toBeNull(),)
                test("2, 2", () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 2, 2,),).toBe(2,),)
                test("2, 3", () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 2, 3,),).toBe(2,),)
                test("3, 0", () => expect(new instance(ABAB,).indexOfFirst(callbackAsFail0, 3, 0,),).toBeNull(),)
                test("3, 1", () => expect(new instance(ABAB,).indexOfFirst(callbackAsFail0, 3, 1,),).toBeNull(),)
                test("3, 2", () => expect(new instance(ABAB,).indexOfFirst(callbackAsFail0, 3, 2,),).toBeNull(),)
                test("3, 3", () => expect(new instance(ABAB,).indexOfFirst(callbackIsA, 3, 3,),).toBeNull(),)
            },)
        },)
        describe("indexOfFirstIndexed", () => {
            describe("empty", () => {
                test("direct",     () => expect(new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0,),).toBeNull(),)
                test("from (-1)",  () => expect(new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, -1,),).toBeNull(),)
                test("from (0)",   () => expect(new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, 0,),).toBeNull(),)
                test("from (1)",   () => expect(new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, 1,),).toBeNull(),)
                test("from (NaN)", () => expect(new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, NaN,),).toBeNull(),)
                test("from (-∞)",  () => expect(new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, -Infinity,),).toBeNull(),)
                test("from (+∞)",  () => expect(new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, Infinity,),).toBeNull(),)
                test("to (-1)",    () => expect(new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, null, -1,),).toBeNull(),)
                test("to (0)",     () => expect(new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, null, 0,),).toBeNull(),)
                test("to (1)",     () => expect(new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, null, 1,),).toBeNull(),)
                test("to (NaN)",   () => expect(new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, null, NaN,),).toBeNull(),)
                test("to (-∞)",    () => expect(new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, null, -Infinity,),).toBeNull(),)
                test("to (+∞)",    () => expect(new instance(EMPTY,).indexOfFirstIndexed(callbackAsFail0, null, Infinity,),).toBeNull(),)
            },)
            describe("boolean callbacks", () => {
                describe.each(trueCallbacks,)("true: %s", ({value: it,},) => {
                    test("1 field",  () => expect(new instance(A,).indexOfFirstIndexed(it,),).toBe(0,),)
                    test("2 fields", () => expect(new instance(AB,).indexOfFirstIndexed(it,),).toBe(0,),)
                    test("4 fields", () => expect(new instance(ABCD,).indexOfFirstIndexed(it,),).toBe(0,),)
                },)
                describe.each(falseCallbacks,)("false: %s", ({value: it,},) => {
                    test("1 field",  () => expect(new instance(A,).indexOfFirstIndexed(it,),).toBeNull(),)
                    test("2 fields", () => expect(new instance(AB,).indexOfFirstIndexed(it,),).toBeNull(),)
                    test("4 fields", () => expect(new instance(ABCD,).indexOfFirstIndexed(it,),).toBeNull(),)
                },)
            },)
            describe("1 field", () => {
                test('a',    () => expect(new instance(A,).indexOfFirstIndexed(callbackIsAAlt,),).toBe(0,),)
                test('e',    () => expect(new instance(A,).indexOfFirstIndexed(callbackIsEAlt,),).toBeNull(),)
                test("even", () => expect(new instance(A,).indexOfFirstIndexed(callbackIsEven,),).toBe(0,),)
                test("odd",  () => expect(new instance(A,).indexOfFirstIndexed(callbackIsOdd,),).toBeNull(),)
                test('0',    () => expect(new instance(A,).indexOfFirstIndexed(callbackIs0,),).toBe(0,),)
                test('4',    () => expect(new instance(A,).indexOfFirstIndexed(callbackIs4,),).toBeNull(),)

            },)
            describe("2 fields", () => {
                test('a',    () => expect(new instance(AB,).indexOfFirstIndexed(callbackIsAAlt,),).toBe(0,),)
                test('b',    () => expect(new instance(AB,).indexOfFirstIndexed(callbackIsBAlt,),).toBe(1,),)
                test('e',    () => expect(new instance(AB,).indexOfFirstIndexed(callbackIsEAlt,),).toBeNull(),)
                test("even", () => expect(new instance(AB,).indexOfFirstIndexed(callbackIsEven,),).toBe(0,),)
                test("odd",  () => expect(new instance(AB,).indexOfFirstIndexed(callbackIsOdd,),).toBe(1,),)
                test('0',    () => expect(new instance(AB,).indexOfFirstIndexed(callbackIs0,),).toBe(0,),)
                test('1',    () => expect(new instance(AB,).indexOfFirstIndexed(callbackIs1,),).toBe(1,),)
                test('4',    () => expect(new instance(AB,).indexOfFirstIndexed(callbackIs4,),).toBeNull(),)

            },)
            describe("4 fields", () => {
                test('a',    () => expect(new instance(ABCD,).indexOfFirstIndexed(callbackIsAAlt,),).toBe(0,),)
                test('b',    () => expect(new instance(ABCD,).indexOfFirstIndexed(callbackIsBAlt,),).toBe(1,),)
                test('c',    () => expect(new instance(ABCD,).indexOfFirstIndexed(callbackIsCAlt,),).toBe(2,),)
                test('d',    () => expect(new instance(ABCD,).indexOfFirstIndexed(callbackIsDAlt,),).toBe(3,),)
                test('e',    () => expect(new instance(ABCD,).indexOfFirstIndexed(callbackIsEAlt,),).toBeNull(),)
                test("even", () => expect(new instance(ABCD,).indexOfFirstIndexed(callbackIsEven,),).toBe(0,),)
                test("odd",  () => expect(new instance(ABCD,).indexOfFirstIndexed(callbackIsOdd,),).toBe(1,),)
                test('0',    () => expect(new instance(ABCD,).indexOfFirstIndexed(callbackIs0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABCD,).indexOfFirstIndexed(callbackIs1,),).toBe(1,),)
                test('2',    () => expect(new instance(ABCD,).indexOfFirstIndexed(callbackIs2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABCD,).indexOfFirstIndexed(callbackIs3,),).toBe(3,),)
                test('4',    () => expect(new instance(ABCD,).indexOfFirstIndexed(callbackIs4,),).toBeNull(),)
            },)

            describe("from", () => {
                test("NaN",  () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, NaN,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, -Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-500", () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, -500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-6",   () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, -6,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, -5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, -3,),).toBe(2,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, -2,),).toBe(2,),)
                test("-1",   () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, -1,),).toBeNull(),)
                test('0',    () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, 1,),).toBe(2,),)
                test('2',    () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, 2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, 3,),).toBeNull(),)
                test('4',    () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, 4,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, 5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("500",  () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, 500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("to", () => {
                test("NaN",  () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, null, NaN,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, null, -Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-500", () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, null, -500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-6",   () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, null, -6,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, null, -5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, null, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, null, -3,),).toBe(0,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, null, -2,),).toBe(0,),)
                test("-1",   () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, null, -1,),).toBe(0,),)
                test('0',    () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, null, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, null, 1,),).toBe(0,),)
                test('2',    () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, null, 2,),).toBe(0,),)
                test('3',    () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsEven, null, 3,),).toBe(0,),)
                test('4',    () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, null, 4,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, null, 5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("500",  () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, null, 500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, null, Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("from + to", () => {
                test("0, 0", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsAAlt, 0, 0,),).toBe(0,),)
                test("0, 1", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsAAlt, 0, 1,),).toBe(0,),)
                test("0, 2", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsAAlt, 0, 2,),).toBe(0,),)
                test("0, 3", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsAAlt, 0, 3,),).toBe(0,),)
                test("1, 0", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, 1, 0,),).toBeNull(),)
                test("1, 1", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsAAlt, 1, 1,),).toBeNull(),)
                test("1, 2", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsAAlt, 1, 2,),).toBe(2,),)
                test("1, 3", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsAAlt, 1, 3,),).toBe(2,),)
                test("2, 0", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, 2, 0,),).toBeNull(),)
                test("2, 1", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, 2, 1,),).toBeNull(),)
                test("2, 2", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsAAlt, 2, 2,),).toBe(2,),)
                test("2, 3", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsAAlt, 2, 3,),).toBe(2,),)
                test("3, 0", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, 3, 0,),).toBeNull(),)
                test("3, 1", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, 3, 1,),).toBeNull(),)
                test("3, 2", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackAsFail0, 3, 2,),).toBeNull(),)
                test("3, 3", () => expect(new instance(ABAB,).indexOfFirstIndexed(callbackIsAAlt, 3, 3,),).toBeNull(),)
            },)
        },)
        describe("indexOfLast", () => {
            describe("empty", () => {
                test("direct",     () => expect(new instance(EMPTY,).indexOfLast(callbackAsFail0,),).toBeNull(),)
                test("from (-1)",  () => expect(new instance(EMPTY,).indexOfLast(callbackAsFail0, -1,),).toBeNull(),)
                test("from (0)",   () => expect(new instance(EMPTY,).indexOfLast(callbackAsFail0, 0,),).toBeNull(),)
                test("from (1)",   () => expect(new instance(EMPTY,).indexOfLast(callbackAsFail0, 1,),).toBeNull(),)
                test("from (NaN)", () => expect(new instance(EMPTY,).indexOfLast(callbackAsFail0, NaN,),).toBeNull(),)
                test("from (-∞)",  () => expect(new instance(EMPTY,).indexOfLast(callbackAsFail0, -Infinity,),).toBeNull(),)
                test("from (+∞)",  () => expect(new instance(EMPTY,).indexOfLast(callbackAsFail0, Infinity,),).toBeNull(),)
                test("to (-1)",    () => expect(new instance(EMPTY,).indexOfLast(callbackAsFail0, null, -1,),).toBeNull(),)
                test("to (0)",     () => expect(new instance(EMPTY,).indexOfLast(callbackAsFail0, null, 0,),).toBeNull(),)
                test("to (1)",     () => expect(new instance(EMPTY,).indexOfLast(callbackAsFail0, null, 1,),).toBeNull(),)
                test("to (NaN)",   () => expect(new instance(EMPTY,).indexOfLast(callbackAsFail0, null, NaN,),).toBeNull(),)
                test("to (-∞)",    () => expect(new instance(EMPTY,).indexOfLast(callbackAsFail0, null, -Infinity,),).toBeNull(),)
                test("to (+∞)",    () => expect(new instance(EMPTY,).indexOfLast(callbackAsFail0, null, Infinity,),).toBeNull(),)
            },)
            describe("boolean callbacks", () => {
                describe.each(trueCallbacks,)("true: %s", ({value: it,},) => {
                    test("1 field",  () => expect(new instance(A,).indexOfLast(it,),).toBe(0,),)
                    test("2 fields", () => expect(new instance(AB,).indexOfLast(it,),).toBe(1,),)
                    test("4 fields", () => expect(new instance(ABCD,).indexOfLast(it,),).toBe(3,),)
                },)
                describe.each(falseCallbacks,)("false: %s", ({value: it,},) => {
                    test("1 field",  () => expect(new instance(A,).indexOfLast(it,),).toBeNull(),)
                    test("2 fields", () => expect(new instance(AB,).indexOfLast(it,),).toBeNull(),)
                    test("4 fields", () => expect(new instance(ABCD,).indexOfLast(it,),).toBeNull(),)
                },)
            },)
            describe("1 field", () => {
                test('a',    () => expect(new instance(A,).indexOfLast(callbackIsA,),).toBe(0,),)
                test('e',    () => expect(new instance(A,).indexOfLast(callbackIsE,),).toBeNull(),)
                test("even",  () => expect(new instance(A,).indexOfLast(callbackIsEvenAlt,),).toBe(0,),)
                test("odd",   () => expect(new instance(A,).indexOfLast(callbackIsOddAlt,),).toBeNull(),)
                test('0',     () => expect(new instance(A,).indexOfLast(callbackIs0Alt,),).toBe(0,),)
                test('4',     () => expect(new instance(A,).indexOfLast(callbackIs4Alt,),).toBeNull(),)
            },)
            describe("2 fields", () => {
                test('a',    () => expect(new instance(AB,).indexOfLast(callbackIsA,),).toBe(0,),)
                test('b',    () => expect(new instance(AB,).indexOfLast(callbackIsB,),).toBe(1,),)
                test('e',    () => expect(new instance(AB,).indexOfLast(callbackIsE,),).toBeNull(),)
                test("even",  () => expect(new instance(AB,).indexOfLast(callbackIsEvenAlt,),).toBe(0,),)
                test("odd",   () => expect(new instance(AB,).indexOfLast(callbackIsOddAlt,),).toBe(1,),)
                test('0',     () => expect(new instance(AB,).indexOfLast(callbackIs0Alt,),).toBe(0,),)
                test('1',     () => expect(new instance(AB,).indexOfLast(callbackIs1Alt,),).toBe(1,),)
                test('4',     () => expect(new instance(AB,).indexOfLast(callbackIs4Alt,),).toBeNull(),)
            },)
            describe("4 fields", () => {
                test('a',    () => expect(new instance(ABCD,).indexOfLast(callbackIsA,),).toBe(0,),)
                test('b',    () => expect(new instance(ABCD,).indexOfLast(callbackIsB,),).toBe(1,),)
                test('c',    () => expect(new instance(ABCD,).indexOfLast(callbackIsC,),).toBe(2,),)
                test('d',    () => expect(new instance(ABCD,).indexOfLast(callbackIsD,),).toBe(3,),)
                test('e',    () => expect(new instance(ABCD,).indexOfLast(callbackIsE,),).toBeNull(),)
                test("even",  () => expect(new instance(ABCD,).indexOfLast(callbackIsEvenAlt,),).toBe(2,),)
                test("odd",   () => expect(new instance(ABCD,).indexOfLast(callbackIsOddAlt,),).toBe(3,),)
                test('0',     () => expect(new instance(ABCD,).indexOfLast(callbackIs0Alt,),).toBe(0,),)
                test('1',     () => expect(new instance(ABCD,).indexOfLast(callbackIs1Alt,),).toBe(1,),)
                test('2',     () => expect(new instance(ABCD,).indexOfLast(callbackIs2Alt,),).toBe(2,),)
                test('3',     () => expect(new instance(ABCD,).indexOfLast(callbackIs3Alt,),).toBe(3,),)
                test('4',     () => expect(new instance(ABCD,).indexOfLast(callbackIs4Alt,),).toBeNull(),)
            },)

            describe("from", () => {
                test("NaN",  () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, NaN,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, -Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-500", () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, -500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-6",   () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, -6,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, -5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).indexOfLast(callbackIsA, -4,),).toBe(2,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfLast(callbackIsA, -3,),).toBe(2,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfLast(callbackIsA, -2,),).toBe(2,),)
                test("-1",   () => expect(new instance(ABAB,).indexOfLast(callbackIsA, -1,),).toBeNull(),)
                test('0',    () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 0,),).toBe(2,),)
                test('1',    () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 1,),).toBe(2,),)
                test('2',    () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 3,),).toBeNull(),)
                test('4',    () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, 4,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, 5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("500",  () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, 500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("to", () => {
                test("NaN",  () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, null, NaN,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, null, -Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-500", () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, null, -500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-6",   () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, null, -6,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, null, -5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).indexOfLast(callbackIsA, null, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfLast(callbackIsA, null, -3,),).toBe(0,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfLast(callbackIsA, null, -2,),).toBe(2,),)
                test("-1",   () => expect(new instance(ABAB,).indexOfLast(callbackIsA, null, -1,),).toBe(2,),)
                test('0',    () => expect(new instance(ABAB,).indexOfLast(callbackIsA, null, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).indexOfLast(callbackIsA, null, 1,),).toBe(0,),)
                test('2',    () => expect(new instance(ABAB,).indexOfLast(callbackIsA, null, 2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABAB,).indexOfLast(callbackIsA, null, 3,),).toBe(2,),)
                test('4',    () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, null, 4,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, null, 5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("500",  () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, null, 500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).indexOfLast(callbackAsFail0, null, Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("from + to", () => {
                test("0, 0", () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 0, 0,),).toBe(0,),)
                test("0, 1", () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 0, 1,),).toBe(0,),)
                test("0, 2", () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 0, 2,),).toBe(2,),)
                test("0, 3", () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 0, 3,),).toBe(2,),)
                test("1, 0", () => expect(new instance(ABAB,).indexOfLast(callbackAsFail0, 1, 0,),).toBeNull(),)
                test("1, 1", () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 1, 1,),).toBeNull(),)
                test("1, 2", () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 1, 2,),).toBe(2,),)
                test("1, 3", () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 1, 3,),).toBe(2,),)
                test("2, 0", () => expect(new instance(ABAB,).indexOfLast(callbackAsFail0, 2, 0,),).toBeNull(),)
                test("2, 1", () => expect(new instance(ABAB,).indexOfLast(callbackAsFail0, 2, 1,),).toBeNull(),)
                test("2, 2", () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 2, 2,),).toBe(2,),)
                test("2, 3", () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 2, 3,),).toBe(2,),)
                test("3, 0", () => expect(new instance(ABAB,).indexOfLast(callbackAsFail0, 3, 0,),).toBeNull(),)
                test("3, 1", () => expect(new instance(ABAB,).indexOfLast(callbackAsFail0, 3, 1,),).toBeNull(),)
                test("3, 2", () => expect(new instance(ABAB,).indexOfLast(callbackAsFail0, 3, 2,),).toBeNull(),)
                test("3, 3", () => expect(new instance(ABAB,).indexOfLast(callbackIsA, 3, 3,),).toBeNull(),)
            },)
        },)
        describe("indexOfLastIndexed", () => {
            describe("empty", () => {
                test("direct",     () => expect(new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0,),).toBeNull(),)
                test("from (-1)",  () => expect(new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, -1,),).toBeNull(),)
                test("from (0)",   () => expect(new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, 0,),).toBeNull(),)
                test("from (1)",   () => expect(new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, 1,),).toBeNull(),)
                test("from (NaN)", () => expect(new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, NaN,),).toBeNull(),)
                test("from (-∞)",  () => expect(new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, -Infinity,),).toBeNull(),)
                test("from (+∞)",  () => expect(new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, Infinity,),).toBeNull(),)
                test("to (-1)",    () => expect(new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, null, -1,),).toBeNull(),)
                test("to (0)",     () => expect(new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, null, 0,),).toBeNull(),)
                test("to (1)",     () => expect(new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, null, 1,),).toBeNull(),)
                test("to (NaN)",   () => expect(new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, null, NaN,),).toBeNull(),)
                test("to (-∞)",    () => expect(new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, null, -Infinity,),).toBeNull(),)
                test("to (+∞)",    () => expect(new instance(EMPTY,).indexOfLastIndexed(callbackAsFail0, null, Infinity,),).toBeNull(),)
            },)
            describe("boolean callbacks", () => {
                describe.each(trueCallbacks,)("true: %s", ({value: it,},) => {
                    test("1 field",  () => expect(new instance(A,).indexOfLastIndexed(it,),).toBe(0,),)
                    test("2 fields", () => expect(new instance(AB,).indexOfLastIndexed(it,),).toBe(1,),)
                    test("4 fields", () => expect(new instance(ABCD,).indexOfLastIndexed(it,),).toBe(3,),)
                },)
                describe.each(falseCallbacks,)("false: %s", ({value: it,},) => {
                    test("1 field",  () => expect(new instance(A,).indexOfLastIndexed(it,),).toBeNull(),)
                    test("2 fields", () => expect(new instance(AB,).indexOfLastIndexed(it,),).toBeNull(),)
                    test("4 fields", () => expect(new instance(ABCD,).indexOfLastIndexed(it,),).toBeNull(),)
                },)
            },)
            describe("1 field", () => {
                test('a',    () => expect(new instance(A,).indexOfLastIndexed(callbackIsAAlt,),).toBe(0,),)
                test('e',    () => expect(new instance(A,).indexOfLastIndexed(callbackIsEAlt,),).toBeNull(),)
                test("even",  () => expect(new instance(A,).indexOfLastIndexed(callbackIsEven,),).toBe(0,),)
                test("odd",   () => expect(new instance(A,).indexOfLastIndexed(callbackIsOdd,),).toBeNull(),)
                test('0',     () => expect(new instance(A,).indexOfLastIndexed(callbackIs0,),).toBe(0,),)
                test('4',     () => expect(new instance(A,).indexOfLastIndexed(callbackIs4,),).toBeNull(),)

            },)
            describe("2 fields", () => {
                test('a',    () => expect(new instance(AB,).indexOfLastIndexed(callbackIsAAlt,),).toBe(0,),)
                test('b',    () => expect(new instance(AB,).indexOfLastIndexed(callbackIsBAlt,),).toBe(1,),)
                test('e',    () => expect(new instance(AB,).indexOfLastIndexed(callbackIsEAlt,),).toBeNull(),)
                test("even",  () => expect(new instance(AB,).indexOfLastIndexed(callbackIsEven,),).toBe(0,),)
                test("odd",   () => expect(new instance(AB,).indexOfLastIndexed(callbackIsOdd,),).toBe(1,),)
                test('0',     () => expect(new instance(AB,).indexOfLastIndexed(callbackIs0,),).toBe(0,),)
                test('1',     () => expect(new instance(AB,).indexOfLastIndexed(callbackIs1,),).toBe(1,),)
                test('4',     () => expect(new instance(AB,).indexOfLastIndexed(callbackIs4,),).toBeNull(),)

            },)
            describe("4 fields", () => {
                test('a',    () => expect(new instance(ABCD,).indexOfLastIndexed(callbackIsAAlt,),).toBe(0,),)
                test('b',    () => expect(new instance(ABCD,).indexOfLastIndexed(callbackIsBAlt,),).toBe(1,),)
                test('c',    () => expect(new instance(ABCD,).indexOfLastIndexed(callbackIsCAlt,),).toBe(2,),)
                test('d',    () => expect(new instance(ABCD,).indexOfLastIndexed(callbackIsDAlt,),).toBe(3,),)
                test('e',    () => expect(new instance(ABCD,).indexOfLastIndexed(callbackIsEAlt,),).toBeNull(),)
                test("even",  () => expect(new instance(ABCD,).indexOfLastIndexed(callbackIsEven,),).toBe(2,),)
                test("odd",   () => expect(new instance(ABCD,).indexOfLastIndexed(callbackIsOdd,),).toBe(3,),)
                test('0',     () => expect(new instance(ABCD,).indexOfLastIndexed(callbackIs0,),).toBe(0,),)
                test('1',     () => expect(new instance(ABCD,).indexOfLastIndexed(callbackIs1,),).toBe(1,),)
                test('2',     () => expect(new instance(ABCD,).indexOfLastIndexed(callbackIs2,),).toBe(2,),)
                test('3',     () => expect(new instance(ABCD,).indexOfLastIndexed(callbackIs3,),).toBe(3,),)
                test('4',     () => expect(new instance(ABCD,).indexOfLastIndexed(callbackIs4,),).toBeNull(),)
            },)

            describe("from", () => {
                test("NaN",  () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, NaN,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, -Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-500", () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, -500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-6",   () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, -6,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, -5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, -4,),).toBe(2,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, -3,),).toBe(2,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, -2,),).toBe(2,),)
                test("-1",   () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, -1,),).toBeNull(),)
                test('0',    () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, 0,),).toBe(2,),)
                test('1',    () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, 1,),).toBe(2,),)
                test('2',    () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, 2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, 3,),).toBeNull(),)
                test('4',    () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, 4,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, 5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("500",  () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, 500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("to", () => {
                test("NaN",  () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, null, NaN,),).toThrow(ForbiddenIndexException,),)
                test("-∞",   () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, null, -Infinity,),).toThrow(ForbiddenIndexException,),)
                test("-500", () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, null, -500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-6",   () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, null, -6,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-5",   () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, null, -5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("-4",   () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, null, -4,),).toBe(0,),)
                test("-3",   () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, null, -3,),).toBe(0,),)
                test("-2",   () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, null, -2,),).toBe(2,),)
                test("-1",   () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, null, -1,),).toBe(2,),)
                test('0',    () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, null, 0,),).toBe(0,),)
                test('1',    () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, null, 1,),).toBe(0,),)
                test('2',    () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, null, 2,),).toBe(2,),)
                test('3',    () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsEven, null, 3,),).toBe(2,),)
                test('4',    () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, null, 4,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test('5',    () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, null, 5,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("500",  () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, null, 500,),).toThrow(CollectionHolderIndexOutOfBoundsException,),)
                test("+∞",   () => expect(() => new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, null, Infinity,),).toThrow(ForbiddenIndexException,),)
            },)
            describe("from + to", () => {
                test("0, 0", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsAAlt, 0, 0,),).toBe(0,),)
                test("0, 1", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsAAlt, 0, 1,),).toBe(0,),)
                test("0, 2", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsAAlt, 0, 2,),).toBe(2,),)
                test("0, 3", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsAAlt, 0, 3,),).toBe(2,),)
                test("1, 0", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, 1, 0,),).toBeNull(),)
                test("1, 1", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsAAlt, 1, 1,),).toBeNull(),)
                test("1, 2", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsAAlt, 1, 2,),).toBe(2,),)
                test("1, 3", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsAAlt, 1, 3,),).toBe(2,),)
                test("2, 0", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, 2, 0,),).toBeNull(),)
                test("2, 1", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, 2, 1,),).toBeNull(),)
                test("2, 2", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsAAlt, 2, 2,),).toBe(2,),)
                test("2, 3", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsAAlt, 2, 3,),).toBe(2,),)
                test("3, 0", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, 3, 0,),).toBeNull(),)
                test("3, 1", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, 3, 1,),).toBeNull(),)
                test("3, 2", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackAsFail0, 3, 2,),).toBeNull(),)
                test("3, 3", () => expect(new instance(ABAB,).indexOfLastIndexed(callbackIsAAlt, 3, 3,),).toBeNull(),)
            },)
        },)
    },)

},)

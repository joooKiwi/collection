/*******************************************************************************
 Copyright (c) 2023-2024. Jonathan Bédard ~ JóôòKiwi

 This project is free to use.
 All the right is reserved to the author of this project.
 ******************************************************************************/

import {newArrayHandler, newArrayOf1Handler, newArrayOf2Handler}                                              from "./helper/newArrayHanders"
import {newCollectionHandler, newCollectionOf1Handler, newCollectionOf2Handler}                               from "./helper/newCollectionHandlers"
import {newCollectionIteratorHandler, newCollectionIteratorOf1Handler, newCollectionIteratorOf2Handler}       from "./helper/newCollectionIteratorHandlers"
import {newEmptyHandler}                                                                                      from "./helper/newEmptyHandler"
import {newIterableHandler}                                                                                   from "./helper/newIterableHandler"
import {newIterableWithSizeHandler, newIterableWithSizeOf1Handler, newIterableWithSizeOf2Handler}             from "./helper/newIterableWithSizeHandlers"
import {newMinimalistCollectionHandler, newMinimalistCollectionOf1Handler, newMinimalistCollectionOf2Handler} from "./helper/newMinimalistCollectionHandlers"
import {newSetHandler, newSetOf1Handler, newSetOf2Handler}                                                    from "./helper/newSetHandlers"
import {A, AB, ABCD, EMPTY}                                                                                   from "./value/arrays"

import {EmptyCollectionValueHolder}                from "../src/handler/value/EmptyCollectionValueHolder"
import {NaNIndexValueHolder}                       from "../src/handler/value/NaNIndexValueHolder"
import {NegativeInfinityIndexValueHolder}          from "../src/handler/value/NegativeInfinityIndexValueHolder"
import {Not0IndexAfterCalculationValueHolder}      from "../src/handler/value/Not0IndexAfterCalculationValueHolder"
import {Not0IndexValueHolder}                      from "../src/handler/value/Not0IndexValueHolder"
import {Not0Or1IndexAfterCalculationValueHolder}   from "../src/handler/value/Not0Or1IndexAfterCalculationValueHolder"
import {Not0Or1IndexValueHolder}                   from "../src/handler/value/Not0Or1IndexValueHolder"
import {OverSizeIndexValueHolder}                  from "../src/handler/value/OverSizeIndexValueHolder"
import {PositiveInfinityIndexValueHolder}          from "../src/handler/value/PositiveInfinityIndexValueHolder"
import {SizeIndexValueHolder}                      from "../src/handler/value/SizeIndexValueHolder"
import {UnderZeroIndexAfterCalculationValueHolder} from "../src/handler/value/UnderZeroIndexAfterCalculationValueHolder"
import {ValidValueHolder}                          from "../src/handler/value/ValidValueHolder"

describe("CollectionHandlerTest (value)", () => {

    describe("EmptyCollectionHandler", () => {
        test("NaN", () => expect(newEmptyHandler().get(NaN,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
        test("-∞",  () => expect(newEmptyHandler().get(-Infinity,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
        test("-2",  () => expect(newEmptyHandler().get(-2,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
        test("-1",  () => expect(newEmptyHandler().get(-1,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
        test('0',   () => expect(newEmptyHandler().get(0,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
        test('1',   () => expect(newEmptyHandler().get(1,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
        test('2',   () => expect(newEmptyHandler().get(2,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
        test("+∞",  () => expect(newEmptyHandler().get(Infinity,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
    },)

    describe("array", () => {
        describe("empty", () => {
            test("NaN", () => expect(newArrayHandler(EMPTY,).get(NaN,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("-∞",  () => expect(newArrayHandler(EMPTY,).get(-Infinity,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("-2",  () => expect(newArrayHandler(EMPTY,).get(-2,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("-1",  () => expect(newArrayHandler(EMPTY,).get(-1,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test('0',   () => expect(newArrayHandler(EMPTY,).get(0,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test('1',   () => expect(newArrayHandler(EMPTY,).get(1,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test('2',   () => expect(newArrayHandler(EMPTY,).get(2,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("+∞",  () => expect(newArrayHandler(EMPTY,).get(Infinity,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
        },)
        describe("1 field", () => {
            test("NaN",  () => expect(newArrayHandler(A,).get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
            test("-∞",   () => expect(newArrayHandler(A,).get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
            test("-500", () => expect(newArrayHandler(A,).get(-500,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-3",   () => expect(newArrayHandler(A,).get(-3,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-2",   () => expect(newArrayHandler(A,).get(-2,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-1",   () => expect(newArrayHandler(A,).get(-1,),).toBeInstanceOf(ValidValueHolder,),)
            test('0',    () => expect(newArrayHandler(A,).get(0,),).toBeInstanceOf(ValidValueHolder,),)
            test('1',    () => expect(newArrayHandler(A,).get(1,),).toBeInstanceOf(SizeIndexValueHolder,),)
            test('2',    () => expect(newArrayHandler(A,).get(2,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("500",  () => expect(newArrayHandler(A,).get(500,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("+∞",   () => expect(newArrayHandler(A,).get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
        },)
        describe("2 fields", () => {
            test("NaN",  () => expect(newArrayHandler(AB,).get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
            test("-∞",   () => expect(newArrayHandler(AB,).get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
            test("-500", () => expect(newArrayHandler(AB,).get(-500,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-4",   () => expect(newArrayHandler(AB,).get(-4,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-3",   () => expect(newArrayHandler(AB,).get(-3,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-2",   () => expect(newArrayHandler(AB,).get(-2,),).toBeInstanceOf(ValidValueHolder,),)
            test("-1",   () => expect(newArrayHandler(AB,).get(-1,),).toBeInstanceOf(ValidValueHolder,),)
            test('0',    () => expect(newArrayHandler(AB,).get(0,),).toBeInstanceOf(ValidValueHolder,),)
            test('1',    () => expect(newArrayHandler(AB,).get(1,),).toBeInstanceOf(ValidValueHolder,),)
            test('2',    () => expect(newArrayHandler(AB,).get(2,),).toBeInstanceOf(SizeIndexValueHolder,),)
            test('3',    () => expect(newArrayHandler(AB,).get(3,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("500",  () => expect(newArrayHandler(AB,).get(500,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("+∞",   () => expect(newArrayHandler(AB,).get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
        },)
        describe("4 fields", () => {
            test("NaN",  () => expect(newArrayHandler(ABCD,).get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
            test("-∞",   () => expect(newArrayHandler(ABCD,).get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
            test("-500", () => expect(newArrayHandler(ABCD,).get(-500,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-6",   () => expect(newArrayHandler(ABCD,).get(-6,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-5",   () => expect(newArrayHandler(ABCD,).get(-5,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-4",   () => expect(newArrayHandler(ABCD,).get(-4,),).toBeInstanceOf(ValidValueHolder,),)
            test("-3",   () => expect(newArrayHandler(ABCD,).get(-3,),).toBeInstanceOf(ValidValueHolder,),)
            test("-2",   () => expect(newArrayHandler(ABCD,).get(-2,),).toBeInstanceOf(ValidValueHolder,),)
            test("-1",   () => expect(newArrayHandler(ABCD,).get(-1,),).toBeInstanceOf(ValidValueHolder,),)
            test('0',    () => expect(newArrayHandler(ABCD,).get(0,),).toBeInstanceOf(ValidValueHolder,),)
            test('1',    () => expect(newArrayHandler(ABCD,).get(1,),).toBeInstanceOf(ValidValueHolder,),)
            test('2',    () => expect(newArrayHandler(ABCD,).get(2,),).toBeInstanceOf(ValidValueHolder,),)
            test('3',    () => expect(newArrayHandler(ABCD,).get(3,),).toBeInstanceOf(ValidValueHolder,),)
            test('4',    () => expect(newArrayHandler(ABCD,).get(4,),).toBeInstanceOf(SizeIndexValueHolder,),)
            test('5',    () => expect(newArrayHandler(ABCD,).get(5,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("500",  () => expect(newArrayHandler(ABCD,).get(500,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("+∞",   () => expect(newArrayHandler(ABCD,).get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
        },)
    },)
    describe("array of 1", () => {
        test("NaN",  () => expect(newArrayOf1Handler().get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
        test("-∞",   () => expect(newArrayOf1Handler().get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
        test("-500", () => expect(newArrayOf1Handler().get(-500,),).toBeInstanceOf(Not0IndexAfterCalculationValueHolder,),)
        test("-3",   () => expect(newArrayOf1Handler().get(-3,),).toBeInstanceOf(Not0IndexAfterCalculationValueHolder,),)
        test("-2",   () => expect(newArrayOf1Handler().get(-2,),).toBeInstanceOf(Not0IndexAfterCalculationValueHolder,),)
        test("-1",   () => expect(newArrayOf1Handler().get(-1,),).toBeInstanceOf(ValidValueHolder,),)
        test('0',    () => expect(newArrayOf1Handler().get(0,),).toBeInstanceOf(ValidValueHolder,),)
        test('1',    () => expect(newArrayOf1Handler().get(1,),).toBeInstanceOf(Not0IndexValueHolder,),)
        test('2',    () => expect(newArrayOf1Handler().get(2,),).toBeInstanceOf(Not0IndexValueHolder,),)
        test("500",  () => expect(newArrayOf1Handler().get(500,),).toBeInstanceOf(Not0IndexValueHolder,),)
        test("+∞",   () => expect(newArrayOf1Handler().get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
    },)
    describe("array of 2", () => {
        test("NaN",  () => expect(newArrayOf2Handler().get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
        test("-∞",   () => expect(newArrayOf2Handler().get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
        test("-500", () => expect(newArrayOf2Handler().get(-500,),).toBeInstanceOf(Not0Or1IndexAfterCalculationValueHolder,),)
        test("-4",   () => expect(newArrayOf2Handler().get(-4,),).toBeInstanceOf(Not0Or1IndexAfterCalculationValueHolder,),)
        test("-3",   () => expect(newArrayOf2Handler().get(-3,),).toBeInstanceOf(Not0Or1IndexAfterCalculationValueHolder,),)
        test("-2",   () => expect(newArrayOf2Handler().get(-2,),).toBeInstanceOf(ValidValueHolder,),)
        test("-1",   () => expect(newArrayOf2Handler().get(-1,),).toBeInstanceOf(ValidValueHolder,),)
        test('0',    () => expect(newArrayOf2Handler().get(0,),).toBeInstanceOf(ValidValueHolder,),)
        test('1',    () => expect(newArrayOf2Handler().get(1,),).toBeInstanceOf(ValidValueHolder,),)
        test('2',    () => expect(newArrayOf2Handler().get(2,),).toBeInstanceOf(Not0Or1IndexValueHolder,),)
        test('3',    () => expect(newArrayOf2Handler().get(3,),).toBeInstanceOf(Not0Or1IndexValueHolder,),)
        test("500",  () => expect(newArrayOf2Handler().get(500,),).toBeInstanceOf(Not0Or1IndexValueHolder,),)
        test("+∞",   () => expect(newArrayOf2Handler().get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
    },)
    describe("set", () => {
        describe("empty", () => {
            test("NaN", () => expect(newSetHandler(EMPTY,).get(NaN,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("-∞",  () => expect(newSetHandler(EMPTY,).get(-Infinity,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("-2",  () => expect(newSetHandler(EMPTY,).get(-2,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("-1",  () => expect(newSetHandler(EMPTY,).get(-1,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test('0',   () => expect(newSetHandler(EMPTY,).get(0,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test('1',   () => expect(newSetHandler(EMPTY,).get(1,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test('2',   () => expect(newSetHandler(EMPTY,).get(2,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("+∞",  () => expect(newSetHandler(EMPTY,).get(Infinity,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
        },)
        describe("1 field", () => {
            test("NaN",  () => expect(newSetHandler(A,).get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
            test("-∞",   () => expect(newSetHandler(A,).get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
            test("-500", () => expect(newSetHandler(A,).get(-500,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-3",   () => expect(newSetHandler(A,).get(-3,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-2",   () => expect(newSetHandler(A,).get(-2,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-1",   () => expect(newSetHandler(A,).get(-1,),).toBeInstanceOf(ValidValueHolder,),)
            test('0',    () => expect(newSetHandler(A,).get(0,),).toBeInstanceOf(ValidValueHolder,),)
            test('1',    () => expect(newSetHandler(A,).get(1,),).toBeInstanceOf(SizeIndexValueHolder,),)
            test('2',    () => expect(newSetHandler(A,).get(2,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("500",  () => expect(newSetHandler(A,).get(500,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("+∞",   () => expect(newSetHandler(A,).get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
        },)
        describe("2 fields", () => {
            test("NaN",  () => expect(newSetHandler(AB,).get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
            test("-∞",   () => expect(newSetHandler(AB,).get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
            test("-500", () => expect(newSetHandler(AB,).get(-500,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-4",   () => expect(newSetHandler(AB,).get(-4,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-3",   () => expect(newSetHandler(AB,).get(-3,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-2",   () => expect(newSetHandler(AB,).get(-2,),).toBeInstanceOf(ValidValueHolder,),)
            test("-1",   () => expect(newSetHandler(AB,).get(-1,),).toBeInstanceOf(ValidValueHolder,),)
            test('0',    () => expect(newSetHandler(AB,).get(0,),).toBeInstanceOf(ValidValueHolder,),)
            test('1',    () => expect(newSetHandler(AB,).get(1,),).toBeInstanceOf(ValidValueHolder,),)
            test('2',    () => expect(newSetHandler(AB,).get(2,),).toBeInstanceOf(SizeIndexValueHolder,),)
            test('3',    () => expect(newSetHandler(AB,).get(3,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("500",  () => expect(newSetHandler(AB,).get(500,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("+∞",   () => expect(newSetHandler(AB,).get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
        },)
        describe("4 fields", () => {
            test("NaN",  () => expect(newSetHandler(ABCD,).get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
            test("-∞",   () => expect(newSetHandler(ABCD,).get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
            test("-500", () => expect(newSetHandler(ABCD,).get(-500,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-6",   () => expect(newSetHandler(ABCD,).get(-6,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-5",   () => expect(newSetHandler(ABCD,).get(-5,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-4",   () => expect(newSetHandler(ABCD,).get(-4,),).toBeInstanceOf(ValidValueHolder,),)
            test("-3",   () => expect(newSetHandler(ABCD,).get(-3,),).toBeInstanceOf(ValidValueHolder,),)
            test("-2",   () => expect(newSetHandler(ABCD,).get(-2,),).toBeInstanceOf(ValidValueHolder,),)
            test("-1",   () => expect(newSetHandler(ABCD,).get(-1,),).toBeInstanceOf(ValidValueHolder,),)
            test('0',    () => expect(newSetHandler(ABCD,).get(0,),).toBeInstanceOf(ValidValueHolder,),)
            test('1',    () => expect(newSetHandler(ABCD,).get(1,),).toBeInstanceOf(ValidValueHolder,),)
            test('2',    () => expect(newSetHandler(ABCD,).get(2,),).toBeInstanceOf(ValidValueHolder,),)
            test('3',    () => expect(newSetHandler(ABCD,).get(3,),).toBeInstanceOf(ValidValueHolder,),)
            test('4',    () => expect(newSetHandler(ABCD,).get(4,),).toBeInstanceOf(SizeIndexValueHolder,),)
            test('5',    () => expect(newSetHandler(ABCD,).get(5,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("500",  () => expect(newSetHandler(ABCD,).get(500,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("+∞",   () => expect(newSetHandler(ABCD,).get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
        },)
    },)
    describe("set of 1", () => {
        test("NaN",  () => expect(newSetOf1Handler().get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
        test("-∞",   () => expect(newSetOf1Handler().get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
        test("-500", () => expect(newSetOf1Handler().get(-500,),).toBeInstanceOf(Not0IndexAfterCalculationValueHolder,),)
        test("-3",   () => expect(newSetOf1Handler().get(-3,),).toBeInstanceOf(Not0IndexAfterCalculationValueHolder,),)
        test("-2",   () => expect(newSetOf1Handler().get(-2,),).toBeInstanceOf(Not0IndexAfterCalculationValueHolder,),)
        test("-1",   () => expect(newSetOf1Handler().get(-1,),).toBeInstanceOf(ValidValueHolder,),)
        test('0',    () => expect(newSetOf1Handler().get(0,),).toBeInstanceOf(ValidValueHolder,),)
        test('1',    () => expect(newSetOf1Handler().get(1,),).toBeInstanceOf(Not0IndexValueHolder,),)
        test('2',    () => expect(newSetOf1Handler().get(2,),).toBeInstanceOf(Not0IndexValueHolder,),)
        test("500",  () => expect(newSetOf1Handler().get(500,),).toBeInstanceOf(Not0IndexValueHolder,),)
        test("+∞",   () => expect(newSetOf1Handler().get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
    },)
    describe("set of 2", () => {
        test("NaN",  () => expect(newSetOf2Handler().get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
        test("-∞",   () => expect(newSetOf2Handler().get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
        test("-500", () => expect(newSetOf2Handler().get(-500,),).toBeInstanceOf(Not0Or1IndexAfterCalculationValueHolder,),)
        test("-4",   () => expect(newSetOf2Handler().get(-4,),).toBeInstanceOf(Not0Or1IndexAfterCalculationValueHolder,),)
        test("-3",   () => expect(newSetOf2Handler().get(-3,),).toBeInstanceOf(Not0Or1IndexAfterCalculationValueHolder,),)
        test("-2",   () => expect(newSetOf2Handler().get(-2,),).toBeInstanceOf(ValidValueHolder,),)
        test("-1",   () => expect(newSetOf2Handler().get(-1,),).toBeInstanceOf(ValidValueHolder,),)
        test('0',    () => expect(newSetOf2Handler().get(0,),).toBeInstanceOf(ValidValueHolder,),)
        test('1',    () => expect(newSetOf2Handler().get(1,),).toBeInstanceOf(ValidValueHolder,),)
        test('2',    () => expect(newSetOf2Handler().get(2,),).toBeInstanceOf(Not0Or1IndexValueHolder,),)
        test('3',    () => expect(newSetOf2Handler().get(3,),).toBeInstanceOf(Not0Or1IndexValueHolder,),)
        test("500",  () => expect(newSetOf2Handler().get(500,),).toBeInstanceOf(Not0Or1IndexValueHolder,),)
        test("+∞",   () => expect(newSetOf2Handler().get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
    },)
    describe("minimalist collection holder", () => {
        describe("empty", () => {
            test("NaN", () => expect(newMinimalistCollectionHandler(EMPTY,).get(NaN,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("-∞",  () => expect(newMinimalistCollectionHandler(EMPTY,).get(-Infinity,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("-2",  () => expect(newMinimalistCollectionHandler(EMPTY,).get(-2,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("-1",  () => expect(newMinimalistCollectionHandler(EMPTY,).get(-1,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test('0',   () => expect(newMinimalistCollectionHandler(EMPTY,).get(0,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test('1',   () => expect(newMinimalistCollectionHandler(EMPTY,).get(1,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test('2',   () => expect(newMinimalistCollectionHandler(EMPTY,).get(2,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("+∞",  () => expect(newMinimalistCollectionHandler(EMPTY,).get(Infinity,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
        },)
        describe("1 field", () => {
            test("NaN",  () => expect(newMinimalistCollectionHandler(A,).get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
            test("-∞",   () => expect(newMinimalistCollectionHandler(A,).get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
            test("-500", () => expect(newMinimalistCollectionHandler(A,).get(-500,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-3",   () => expect(newMinimalistCollectionHandler(A,).get(-3,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-2",   () => expect(newMinimalistCollectionHandler(A,).get(-2,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-1",   () => expect(newMinimalistCollectionHandler(A,).get(-1,),).toBeInstanceOf(ValidValueHolder,),)
            test('0',    () => expect(newMinimalistCollectionHandler(A,).get(0,),).toBeInstanceOf(ValidValueHolder,),)
            test('1',    () => expect(newMinimalistCollectionHandler(A,).get(1,),).toBeInstanceOf(SizeIndexValueHolder,),)
            test('2',    () => expect(newMinimalistCollectionHandler(A,).get(2,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("500",  () => expect(newMinimalistCollectionHandler(A,).get(500,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("+∞",   () => expect(newMinimalistCollectionHandler(A,).get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
        },)
        describe("2 fields", () => {
            test("NaN",  () => expect(newMinimalistCollectionHandler(AB,).get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
            test("-∞",   () => expect(newMinimalistCollectionHandler(AB,).get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
            test("-500", () => expect(newMinimalistCollectionHandler(AB,).get(-500,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-4",   () => expect(newMinimalistCollectionHandler(AB,).get(-4,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-3",   () => expect(newMinimalistCollectionHandler(AB,).get(-3,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-2",   () => expect(newMinimalistCollectionHandler(AB,).get(-2,),).toBeInstanceOf(ValidValueHolder,),)
            test("-1",   () => expect(newMinimalistCollectionHandler(AB,).get(-1,),).toBeInstanceOf(ValidValueHolder,),)
            test('0',    () => expect(newMinimalistCollectionHandler(AB,).get(0,),).toBeInstanceOf(ValidValueHolder,),)
            test('1',    () => expect(newMinimalistCollectionHandler(AB,).get(1,),).toBeInstanceOf(ValidValueHolder,),)
            test('2',    () => expect(newMinimalistCollectionHandler(AB,).get(2,),).toBeInstanceOf(SizeIndexValueHolder,),)
            test('3',    () => expect(newMinimalistCollectionHandler(AB,).get(3,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("500",  () => expect(newMinimalistCollectionHandler(AB,).get(500,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("+∞",   () => expect(newMinimalistCollectionHandler(AB,).get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
        },)
        describe("4 fields", () => {
            test("NaN",  () => expect(newMinimalistCollectionHandler(ABCD,).get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
            test("-∞",   () => expect(newMinimalistCollectionHandler(ABCD,).get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
            test("-500", () => expect(newMinimalistCollectionHandler(ABCD,).get(-500,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-6",   () => expect(newMinimalistCollectionHandler(ABCD,).get(-6,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-5",   () => expect(newMinimalistCollectionHandler(ABCD,).get(-5,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-4",   () => expect(newMinimalistCollectionHandler(ABCD,).get(-4,),).toBeInstanceOf(ValidValueHolder,),)
            test("-3",   () => expect(newMinimalistCollectionHandler(ABCD,).get(-3,),).toBeInstanceOf(ValidValueHolder,),)
            test("-2",   () => expect(newMinimalistCollectionHandler(ABCD,).get(-2,),).toBeInstanceOf(ValidValueHolder,),)
            test("-1",   () => expect(newMinimalistCollectionHandler(ABCD,).get(-1,),).toBeInstanceOf(ValidValueHolder,),)
            test('0',    () => expect(newMinimalistCollectionHandler(ABCD,).get(0,),).toBeInstanceOf(ValidValueHolder,),)
            test('1',    () => expect(newMinimalistCollectionHandler(ABCD,).get(1,),).toBeInstanceOf(ValidValueHolder,),)
            test('2',    () => expect(newMinimalistCollectionHandler(ABCD,).get(2,),).toBeInstanceOf(ValidValueHolder,),)
            test('3',    () => expect(newMinimalistCollectionHandler(ABCD,).get(3,),).toBeInstanceOf(ValidValueHolder,),)
            test('4',    () => expect(newMinimalistCollectionHandler(ABCD,).get(4,),).toBeInstanceOf(SizeIndexValueHolder,),)
            test('5',    () => expect(newMinimalistCollectionHandler(ABCD,).get(5,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("500",  () => expect(newMinimalistCollectionHandler(ABCD,).get(500,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("+∞",   () => expect(newMinimalistCollectionHandler(ABCD,).get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
        },)
    },)
    describe("minimalist collection holder of 1", () => {
        test("NaN",  () => expect(newMinimalistCollectionOf1Handler().get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
        test("-∞",   () => expect(newMinimalistCollectionOf1Handler().get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
        test("-500", () => expect(newMinimalistCollectionOf1Handler().get(-500,),).toBeInstanceOf(Not0IndexAfterCalculationValueHolder,),)
        test("-3",   () => expect(newMinimalistCollectionOf1Handler().get(-3,),).toBeInstanceOf(Not0IndexAfterCalculationValueHolder,),)
        test("-2",   () => expect(newMinimalistCollectionOf1Handler().get(-2,),).toBeInstanceOf(Not0IndexAfterCalculationValueHolder,),)
        test("-1",   () => expect(newMinimalistCollectionOf1Handler().get(-1,),).toBeInstanceOf(ValidValueHolder,),)
        test('0',    () => expect(newMinimalistCollectionOf1Handler().get(0,),).toBeInstanceOf(ValidValueHolder,),)
        test('1',    () => expect(newMinimalistCollectionOf1Handler().get(1,),).toBeInstanceOf(Not0IndexValueHolder,),)
        test('2',    () => expect(newMinimalistCollectionOf1Handler().get(2,),).toBeInstanceOf(Not0IndexValueHolder,),)
        test("500",  () => expect(newMinimalistCollectionOf1Handler().get(500,),).toBeInstanceOf(Not0IndexValueHolder,),)
        test("+∞",   () => expect(newMinimalistCollectionOf1Handler().get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
    },)
    describe("minimalist collection holder of 2", () => {
        test("NaN",  () => expect(newMinimalistCollectionOf2Handler().get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
        test("-∞",   () => expect(newMinimalistCollectionOf2Handler().get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
        test("-500", () => expect(newMinimalistCollectionOf2Handler().get(-500,),).toBeInstanceOf(Not0Or1IndexAfterCalculationValueHolder,),)
        test("-4",   () => expect(newMinimalistCollectionOf2Handler().get(-4,),).toBeInstanceOf(Not0Or1IndexAfterCalculationValueHolder,),)
        test("-3",   () => expect(newMinimalistCollectionOf2Handler().get(-3,),).toBeInstanceOf(Not0Or1IndexAfterCalculationValueHolder,),)
        test("-2",   () => expect(newMinimalistCollectionOf2Handler().get(-2,),).toBeInstanceOf(ValidValueHolder,),)
        test("-1",   () => expect(newMinimalistCollectionOf2Handler().get(-1,),).toBeInstanceOf(ValidValueHolder,),)
        test('0',    () => expect(newMinimalistCollectionOf2Handler().get(0,),).toBeInstanceOf(ValidValueHolder,),)
        test('1',    () => expect(newMinimalistCollectionOf2Handler().get(1,),).toBeInstanceOf(ValidValueHolder,),)
        test('2',    () => expect(newMinimalistCollectionOf2Handler().get(2,),).toBeInstanceOf(Not0Or1IndexValueHolder,),)
        test('3',    () => expect(newMinimalistCollectionOf2Handler().get(3,),).toBeInstanceOf(Not0Or1IndexValueHolder,),)
        test("500",  () => expect(newMinimalistCollectionOf2Handler().get(500,),).toBeInstanceOf(Not0Or1IndexValueHolder,),)
        test("+∞",   () => expect(newMinimalistCollectionOf2Handler().get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
    },)
    describe("collection holder", () => {
        describe("empty", () => {
            test("NaN", () => expect(newCollectionHandler(EMPTY,).get(NaN,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("-∞",  () => expect(newCollectionHandler(EMPTY,).get(-Infinity,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("-2",  () => expect(newCollectionHandler(EMPTY,).get(-2,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("-1",  () => expect(newCollectionHandler(EMPTY,).get(-1,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test('0',   () => expect(newCollectionHandler(EMPTY,).get(0,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test('1',   () => expect(newCollectionHandler(EMPTY,).get(1,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test('2',   () => expect(newCollectionHandler(EMPTY,).get(2,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("+∞",  () => expect(newCollectionHandler(EMPTY,).get(Infinity,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
        },)
        describe("1 field", () => {
            test("NaN",  () => expect(newCollectionHandler(A,).get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
            test("-∞",   () => expect(newCollectionHandler(A,).get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
            test("-500", () => expect(newCollectionHandler(A,).get(-500,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-3",   () => expect(newCollectionHandler(A,).get(-3,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-2",   () => expect(newCollectionHandler(A,).get(-2,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-1",   () => expect(newCollectionHandler(A,).get(-1,),).toBeInstanceOf(ValidValueHolder,),)
            test('0',    () => expect(newCollectionHandler(A,).get(0,),).toBeInstanceOf(ValidValueHolder,),)
            test('1',    () => expect(newCollectionHandler(A,).get(1,),).toBeInstanceOf(SizeIndexValueHolder,),)
            test('2',    () => expect(newCollectionHandler(A,).get(2,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("500",  () => expect(newCollectionHandler(A,).get(500,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("+∞",   () => expect(newCollectionHandler(A,).get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
        },)
        describe("2 fields", () => {
            test("NaN",  () => expect(newCollectionHandler(AB,).get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
            test("-∞",   () => expect(newCollectionHandler(AB,).get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
            test("-500", () => expect(newCollectionHandler(AB,).get(-500,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-4",   () => expect(newCollectionHandler(AB,).get(-4,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-3",   () => expect(newCollectionHandler(AB,).get(-3,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-2",   () => expect(newCollectionHandler(AB,).get(-2,),).toBeInstanceOf(ValidValueHolder,),)
            test("-1",   () => expect(newCollectionHandler(AB,).get(-1,),).toBeInstanceOf(ValidValueHolder,),)
            test('0',    () => expect(newCollectionHandler(AB,).get(0,),).toBeInstanceOf(ValidValueHolder,),)
            test('1',    () => expect(newCollectionHandler(AB,).get(1,),).toBeInstanceOf(ValidValueHolder,),)
            test('2',    () => expect(newCollectionHandler(AB,).get(2,),).toBeInstanceOf(SizeIndexValueHolder,),)
            test('3',    () => expect(newCollectionHandler(AB,).get(3,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("500",  () => expect(newCollectionHandler(AB,).get(500,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("+∞",   () => expect(newCollectionHandler(AB,).get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
        },)
        describe("4 fields", () => {
            test("NaN",  () => expect(newCollectionHandler(ABCD,).get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
            test("-∞",   () => expect(newCollectionHandler(ABCD,).get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
            test("-500", () => expect(newCollectionHandler(ABCD,).get(-500,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-6",   () => expect(newCollectionHandler(ABCD,).get(-6,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-5",   () => expect(newCollectionHandler(ABCD,).get(-5,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-4",   () => expect(newCollectionHandler(ABCD,).get(-4,),).toBeInstanceOf(ValidValueHolder,),)
            test("-3",   () => expect(newCollectionHandler(ABCD,).get(-3,),).toBeInstanceOf(ValidValueHolder,),)
            test("-2",   () => expect(newCollectionHandler(ABCD,).get(-2,),).toBeInstanceOf(ValidValueHolder,),)
            test("-1",   () => expect(newCollectionHandler(ABCD,).get(-1,),).toBeInstanceOf(ValidValueHolder,),)
            test('0',    () => expect(newCollectionHandler(ABCD,).get(0,),).toBeInstanceOf(ValidValueHolder,),)
            test('1',    () => expect(newCollectionHandler(ABCD,).get(1,),).toBeInstanceOf(ValidValueHolder,),)
            test('2',    () => expect(newCollectionHandler(ABCD,).get(2,),).toBeInstanceOf(ValidValueHolder,),)
            test('3',    () => expect(newCollectionHandler(ABCD,).get(3,),).toBeInstanceOf(ValidValueHolder,),)
            test('4',    () => expect(newCollectionHandler(ABCD,).get(4,),).toBeInstanceOf(SizeIndexValueHolder,),)
            test('5',    () => expect(newCollectionHandler(ABCD,).get(5,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("500",  () => expect(newCollectionHandler(ABCD,).get(500,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("+∞",   () => expect(newCollectionHandler(ABCD,).get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
        },)
    },)
    describe("collection holder of 1", () => {
        test("NaN",  () => expect(newCollectionOf1Handler().get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
        test("-∞",   () => expect(newCollectionOf1Handler().get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
        test("-500", () => expect(newCollectionOf1Handler().get(-500,),).toBeInstanceOf(Not0IndexAfterCalculationValueHolder,),)
        test("-3",   () => expect(newCollectionOf1Handler().get(-3,),).toBeInstanceOf(Not0IndexAfterCalculationValueHolder,),)
        test("-2",   () => expect(newCollectionOf1Handler().get(-2,),).toBeInstanceOf(Not0IndexAfterCalculationValueHolder,),)
        test("-1",   () => expect(newCollectionOf1Handler().get(-1,),).toBeInstanceOf(ValidValueHolder,),)
        test('0',    () => expect(newCollectionOf1Handler().get(0,),).toBeInstanceOf(ValidValueHolder,),)
        test('1',    () => expect(newCollectionOf1Handler().get(1,),).toBeInstanceOf(Not0IndexValueHolder,),)
        test('2',    () => expect(newCollectionOf1Handler().get(2,),).toBeInstanceOf(Not0IndexValueHolder,),)
        test("500",  () => expect(newCollectionOf1Handler().get(500,),).toBeInstanceOf(Not0IndexValueHolder,),)
        test("+∞",   () => expect(newCollectionOf1Handler().get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
    },)
    describe("collection holder of 2", () => {
        test("NaN",  () => expect(newCollectionOf2Handler().get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
        test("-∞",   () => expect(newCollectionOf2Handler().get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
        test("-500", () => expect(newCollectionOf2Handler().get(-500,),).toBeInstanceOf(Not0Or1IndexAfterCalculationValueHolder,),)
        test("-4",   () => expect(newCollectionOf2Handler().get(-4,),).toBeInstanceOf(Not0Or1IndexAfterCalculationValueHolder,),)
        test("-3",   () => expect(newCollectionOf2Handler().get(-3,),).toBeInstanceOf(Not0Or1IndexAfterCalculationValueHolder,),)
        test("-2",   () => expect(newCollectionOf2Handler().get(-2,),).toBeInstanceOf(ValidValueHolder,),)
        test("-1",   () => expect(newCollectionOf2Handler().get(-1,),).toBeInstanceOf(ValidValueHolder,),)
        test('0',    () => expect(newCollectionOf2Handler().get(0,),).toBeInstanceOf(ValidValueHolder,),)
        test('1',    () => expect(newCollectionOf2Handler().get(1,),).toBeInstanceOf(ValidValueHolder,),)
        test('2',    () => expect(newCollectionOf2Handler().get(2,),).toBeInstanceOf(Not0Or1IndexValueHolder,),)
        test('3',    () => expect(newCollectionOf2Handler().get(3,),).toBeInstanceOf(Not0Or1IndexValueHolder,),)
        test("500",  () => expect(newCollectionOf2Handler().get(500,),).toBeInstanceOf(Not0Or1IndexValueHolder,),)
        test("+∞",   () => expect(newCollectionOf2Handler().get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
    },)
    describe("collection iterator", () => {
        describe("empty", () => {
            test("NaN", () => expect(newCollectionIteratorHandler(EMPTY,).get(NaN,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("-∞",  () => expect(newCollectionIteratorHandler(EMPTY,).get(-Infinity,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("-2",  () => expect(newCollectionIteratorHandler(EMPTY,).get(-2,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("-1",  () => expect(newCollectionIteratorHandler(EMPTY,).get(-1,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test('0',   () => expect(newCollectionIteratorHandler(EMPTY,).get(0,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test('1',   () => expect(newCollectionIteratorHandler(EMPTY,).get(1,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test('2',   () => expect(newCollectionIteratorHandler(EMPTY,).get(2,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("+∞",  () => expect(newCollectionIteratorHandler(EMPTY,).get(Infinity,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
        },)
        describe("1 field", () => {
            test("NaN",  () => expect(newCollectionIteratorHandler(A,).get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
            test("-∞",   () => expect(newCollectionIteratorHandler(A,).get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
            test("-500", () => expect(newCollectionIteratorHandler(A,).get(-500,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-3",   () => expect(newCollectionIteratorHandler(A,).get(-3,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-2",   () => expect(newCollectionIteratorHandler(A,).get(-2,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-1",   () => expect(newCollectionIteratorHandler(A,).get(-1,),).toBeInstanceOf(ValidValueHolder,),)
            test('0',    () => expect(newCollectionIteratorHandler(A,).get(0,),).toBeInstanceOf(ValidValueHolder,),)
            test('1',    () => expect(newCollectionIteratorHandler(A,).get(1,),).toBeInstanceOf(SizeIndexValueHolder,),)
            test('2',    () => expect(newCollectionIteratorHandler(A,).get(2,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("500",  () => expect(newCollectionIteratorHandler(A,).get(500,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("+∞",   () => expect(newCollectionIteratorHandler(A,).get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
        },)
        describe("2 fields", () => {
            test("NaN",  () => expect(newCollectionIteratorHandler(AB,).get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
            test("-∞",   () => expect(newCollectionIteratorHandler(AB,).get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
            test("-500", () => expect(newCollectionIteratorHandler(AB,).get(-500,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-4",   () => expect(newCollectionIteratorHandler(AB,).get(-4,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-3",   () => expect(newCollectionIteratorHandler(AB,).get(-3,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-2",   () => expect(newCollectionIteratorHandler(AB,).get(-2,),).toBeInstanceOf(ValidValueHolder,),)
            test("-1",   () => expect(newCollectionIteratorHandler(AB,).get(-1,),).toBeInstanceOf(ValidValueHolder,),)
            test('0',    () => expect(newCollectionIteratorHandler(AB,).get(0,),).toBeInstanceOf(ValidValueHolder,),)
            test('1',    () => expect(newCollectionIteratorHandler(AB,).get(1,),).toBeInstanceOf(ValidValueHolder,),)
            test('2',    () => expect(newCollectionIteratorHandler(AB,).get(2,),).toBeInstanceOf(SizeIndexValueHolder,),)
            test('3',    () => expect(newCollectionIteratorHandler(AB,).get(3,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("500",  () => expect(newCollectionIteratorHandler(AB,).get(500,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("+∞",   () => expect(newCollectionIteratorHandler(AB,).get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
        },)
        describe("4 fields", () => {
            test("NaN",  () => expect(newCollectionIteratorHandler(ABCD,).get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
            test("-∞",   () => expect(newCollectionIteratorHandler(ABCD,).get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
            test("-500", () => expect(newCollectionIteratorHandler(ABCD,).get(-500,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-6",   () => expect(newCollectionIteratorHandler(ABCD,).get(-6,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-5",   () => expect(newCollectionIteratorHandler(ABCD,).get(-5,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-4",   () => expect(newCollectionIteratorHandler(ABCD,).get(-4,),).toBeInstanceOf(ValidValueHolder,),)
            test("-3",   () => expect(newCollectionIteratorHandler(ABCD,).get(-3,),).toBeInstanceOf(ValidValueHolder,),)
            test("-2",   () => expect(newCollectionIteratorHandler(ABCD,).get(-2,),).toBeInstanceOf(ValidValueHolder,),)
            test("-1",   () => expect(newCollectionIteratorHandler(ABCD,).get(-1,),).toBeInstanceOf(ValidValueHolder,),)
            test('0',    () => expect(newCollectionIteratorHandler(ABCD,).get(0,),).toBeInstanceOf(ValidValueHolder,),)
            test('1',    () => expect(newCollectionIteratorHandler(ABCD,).get(1,),).toBeInstanceOf(ValidValueHolder,),)
            test('2',    () => expect(newCollectionIteratorHandler(ABCD,).get(2,),).toBeInstanceOf(ValidValueHolder,),)
            test('3',    () => expect(newCollectionIteratorHandler(ABCD,).get(3,),).toBeInstanceOf(ValidValueHolder,),)
            test('4',    () => expect(newCollectionIteratorHandler(ABCD,).get(4,),).toBeInstanceOf(SizeIndexValueHolder,),)
            test('5',    () => expect(newCollectionIteratorHandler(ABCD,).get(5,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("500",  () => expect(newCollectionIteratorHandler(ABCD,).get(500,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("+∞",   () => expect(newCollectionIteratorHandler(ABCD,).get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
        },)
    },)
    describe("collection iterator of 1", () => {
        test("NaN",  () => expect(newCollectionIteratorOf1Handler().get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
        test("-∞",   () => expect(newCollectionIteratorOf1Handler().get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
        test("-500", () => expect(newCollectionIteratorOf1Handler().get(-500,),).toBeInstanceOf(Not0IndexAfterCalculationValueHolder,),)
        test("-3",   () => expect(newCollectionIteratorOf1Handler().get(-3,),).toBeInstanceOf(Not0IndexAfterCalculationValueHolder,),)
        test("-2",   () => expect(newCollectionIteratorOf1Handler().get(-2,),).toBeInstanceOf(Not0IndexAfterCalculationValueHolder,),)
        test("-1",   () => expect(newCollectionIteratorOf1Handler().get(-1,),).toBeInstanceOf(ValidValueHolder,),)
        test('0',    () => expect(newCollectionIteratorOf1Handler().get(0,),).toBeInstanceOf(ValidValueHolder,),)
        test('1',    () => expect(newCollectionIteratorOf1Handler().get(1,),).toBeInstanceOf(Not0IndexValueHolder,),)
        test('2',    () => expect(newCollectionIteratorOf1Handler().get(2,),).toBeInstanceOf(Not0IndexValueHolder,),)
        test("500",  () => expect(newCollectionIteratorOf1Handler().get(500,),).toBeInstanceOf(Not0IndexValueHolder,),)
        test("+∞",   () => expect(newCollectionIteratorOf1Handler().get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
    },)
    describe("collection iterator of 2", () => {
        test("NaN",  () => expect(newCollectionIteratorOf2Handler().get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
        test("-∞",   () => expect(newCollectionIteratorOf2Handler().get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
        test("-500", () => expect(newCollectionIteratorOf2Handler().get(-500,),).toBeInstanceOf(Not0Or1IndexAfterCalculationValueHolder,),)
        test("-4",   () => expect(newCollectionIteratorOf2Handler().get(-4,),).toBeInstanceOf(Not0Or1IndexAfterCalculationValueHolder,),)
        test("-3",   () => expect(newCollectionIteratorOf2Handler().get(-3,),).toBeInstanceOf(Not0Or1IndexAfterCalculationValueHolder,),)
        test("-2",   () => expect(newCollectionIteratorOf2Handler().get(-2,),).toBeInstanceOf(ValidValueHolder,),)
        test("-1",   () => expect(newCollectionIteratorOf2Handler().get(-1,),).toBeInstanceOf(ValidValueHolder,),)
        test('0',    () => expect(newCollectionIteratorOf2Handler().get(0,),).toBeInstanceOf(ValidValueHolder,),)
        test('1',    () => expect(newCollectionIteratorOf2Handler().get(1,),).toBeInstanceOf(ValidValueHolder,),)
        test('2',    () => expect(newCollectionIteratorOf2Handler().get(2,),).toBeInstanceOf(Not0Or1IndexValueHolder,),)
        test('3',    () => expect(newCollectionIteratorOf2Handler().get(3,),).toBeInstanceOf(Not0Or1IndexValueHolder,),)
        test("500",  () => expect(newCollectionIteratorOf2Handler().get(500,),).toBeInstanceOf(Not0Or1IndexValueHolder,),)
        test("+∞",   () => expect(newCollectionIteratorOf2Handler().get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
    },)
    describe("iterable", () => {
        describe("empty", () => {
            test("NaN", () => expect(newIterableHandler(EMPTY,).get(NaN,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("-∞",  () => expect(newIterableHandler(EMPTY,).get(-Infinity,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("-2",  () => expect(newIterableHandler(EMPTY,).get(-2,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("-1",  () => expect(newIterableHandler(EMPTY,).get(-1,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test('0',   () => expect(newIterableHandler(EMPTY,).get(0,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test('1',   () => expect(newIterableHandler(EMPTY,).get(1,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test('2',   () => expect(newIterableHandler(EMPTY,).get(2,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("+∞",  () => expect(newIterableHandler(EMPTY,).get(Infinity,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
        },)
        describe("1 field", () => {
            test("NaN",  () => expect(newIterableHandler(A,).get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
            test("-∞",   () => expect(newIterableHandler(A,).get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
            test("-500", () => expect(newIterableHandler(A,).get(-500,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-3",   () => expect(newIterableHandler(A,).get(-3,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-2",   () => expect(newIterableHandler(A,).get(-2,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-1",   () => expect(newIterableHandler(A,).get(-1,),).toBeInstanceOf(ValidValueHolder,),)
            test('0',    () => expect(newIterableHandler(A,).get(0,),).toBeInstanceOf(ValidValueHolder,),)
            test('1',    () => expect(newIterableHandler(A,).get(1,),).toBeInstanceOf(SizeIndexValueHolder,),)
            test('2',    () => expect(newIterableHandler(A,).get(2,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("500",  () => expect(newIterableHandler(A,).get(500,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("+∞",   () => expect(newIterableHandler(A,).get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
        },)
        describe("2 fields", () => {
            test("NaN",  () => expect(newIterableHandler(AB,).get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
            test("-∞",   () => expect(newIterableHandler(AB,).get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
            test("-500", () => expect(newIterableHandler(AB,).get(-500,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-4",   () => expect(newIterableHandler(AB,).get(-4,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-3",   () => expect(newIterableHandler(AB,).get(-3,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-2",   () => expect(newIterableHandler(AB,).get(-2,),).toBeInstanceOf(ValidValueHolder,),)
            test("-1",   () => expect(newIterableHandler(AB,).get(-1,),).toBeInstanceOf(ValidValueHolder,),)
            test('0',    () => expect(newIterableHandler(AB,).get(0,),).toBeInstanceOf(ValidValueHolder,),)
            test('1',    () => expect(newIterableHandler(AB,).get(1,),).toBeInstanceOf(ValidValueHolder,),)
            test('2',    () => expect(newIterableHandler(AB,).get(2,),).toBeInstanceOf(SizeIndexValueHolder,),)
            test('3',    () => expect(newIterableHandler(AB,).get(3,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("500",  () => expect(newIterableHandler(AB,).get(500,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("+∞",   () => expect(newIterableHandler(AB,).get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
        },)
        describe("4 fields", () => {
            test("NaN",  () => expect(newIterableHandler(ABCD,).get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
            test("-∞",   () => expect(newIterableHandler(ABCD,).get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
            test("-500", () => expect(newIterableHandler(ABCD,).get(-500,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-6",   () => expect(newIterableHandler(ABCD,).get(-6,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-5",   () => expect(newIterableHandler(ABCD,).get(-5,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-4",   () => expect(newIterableHandler(ABCD,).get(-4,),).toBeInstanceOf(ValidValueHolder,),)
            test("-3",   () => expect(newIterableHandler(ABCD,).get(-3,),).toBeInstanceOf(ValidValueHolder,),)
            test("-2",   () => expect(newIterableHandler(ABCD,).get(-2,),).toBeInstanceOf(ValidValueHolder,),)
            test("-1",   () => expect(newIterableHandler(ABCD,).get(-1,),).toBeInstanceOf(ValidValueHolder,),)
            test('0',    () => expect(newIterableHandler(ABCD,).get(0,),).toBeInstanceOf(ValidValueHolder,),)
            test('1',    () => expect(newIterableHandler(ABCD,).get(1,),).toBeInstanceOf(ValidValueHolder,),)
            test('2',    () => expect(newIterableHandler(ABCD,).get(2,),).toBeInstanceOf(ValidValueHolder,),)
            test('3',    () => expect(newIterableHandler(ABCD,).get(3,),).toBeInstanceOf(ValidValueHolder,),)
            test('4',    () => expect(newIterableHandler(ABCD,).get(4,),).toBeInstanceOf(SizeIndexValueHolder,),)
            test('5',    () => expect(newIterableHandler(ABCD,).get(5,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("500",  () => expect(newIterableHandler(ABCD,).get(500,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("+∞",   () => expect(newIterableHandler(ABCD,).get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
        },)
    },)
    describe("iterable with size", () => {
        describe("empty", () => {
            test("NaN", () => expect(newIterableWithSizeHandler(EMPTY,).get(NaN,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("-∞",  () => expect(newIterableWithSizeHandler(EMPTY,).get(-Infinity,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("-2",  () => expect(newIterableWithSizeHandler(EMPTY,).get(-2,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("-1",  () => expect(newIterableWithSizeHandler(EMPTY,).get(-1,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test('0',   () => expect(newIterableWithSizeHandler(EMPTY,).get(0,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test('1',   () => expect(newIterableWithSizeHandler(EMPTY,).get(1,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test('2',   () => expect(newIterableWithSizeHandler(EMPTY,).get(2,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
            test("+∞",  () => expect(newIterableWithSizeHandler(EMPTY,).get(Infinity,),).toBeInstanceOf(EmptyCollectionValueHolder,),)
        },)
        describe("1 field", () => {
            test("NaN",  () => expect(newIterableWithSizeHandler(A,).get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
            test("-∞",   () => expect(newIterableWithSizeHandler(A,).get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
            test("-500", () => expect(newIterableWithSizeHandler(A,).get(-500,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-3",   () => expect(newIterableWithSizeHandler(A,).get(-3,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-2",   () => expect(newIterableWithSizeHandler(A,).get(-2,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-1",   () => expect(newIterableWithSizeHandler(A,).get(-1,),).toBeInstanceOf(ValidValueHolder,),)
            test('0',    () => expect(newIterableWithSizeHandler(A,).get(0,),).toBeInstanceOf(ValidValueHolder,),)
            test('1',    () => expect(newIterableWithSizeHandler(A,).get(1,),).toBeInstanceOf(SizeIndexValueHolder,),)
            test('2',    () => expect(newIterableWithSizeHandler(A,).get(2,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("500",  () => expect(newIterableWithSizeHandler(A,).get(500,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("+∞",   () => expect(newIterableWithSizeHandler(A,).get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
        },)
        describe("2 fields", () => {
            test("NaN",  () => expect(newIterableWithSizeHandler(AB,).get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
            test("-∞",   () => expect(newIterableWithSizeHandler(AB,).get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
            test("-500", () => expect(newIterableWithSizeHandler(AB,).get(-500,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-4",   () => expect(newIterableWithSizeHandler(AB,).get(-4,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-3",   () => expect(newIterableWithSizeHandler(AB,).get(-3,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-2",   () => expect(newIterableWithSizeHandler(AB,).get(-2,),).toBeInstanceOf(ValidValueHolder,),)
            test("-1",   () => expect(newIterableWithSizeHandler(AB,).get(-1,),).toBeInstanceOf(ValidValueHolder,),)
            test('0',    () => expect(newIterableWithSizeHandler(AB,).get(0,),).toBeInstanceOf(ValidValueHolder,),)
            test('1',    () => expect(newIterableWithSizeHandler(AB,).get(1,),).toBeInstanceOf(ValidValueHolder,),)
            test('2',    () => expect(newIterableWithSizeHandler(AB,).get(2,),).toBeInstanceOf(SizeIndexValueHolder,),)
            test('3',    () => expect(newIterableWithSizeHandler(AB,).get(3,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("500",  () => expect(newIterableWithSizeHandler(AB,).get(500,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("+∞",   () => expect(newIterableWithSizeHandler(AB,).get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
        },)
        describe("4 fields", () => {
            test("NaN",  () => expect(newIterableWithSizeHandler(ABCD,).get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
            test("-∞",   () => expect(newIterableWithSizeHandler(ABCD,).get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
            test("-500", () => expect(newIterableWithSizeHandler(ABCD,).get(-500,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-6",   () => expect(newIterableWithSizeHandler(ABCD,).get(-6,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-5",   () => expect(newIterableWithSizeHandler(ABCD,).get(-5,),).toBeInstanceOf(UnderZeroIndexAfterCalculationValueHolder,),)
            test("-4",   () => expect(newIterableWithSizeHandler(ABCD,).get(-4,),).toBeInstanceOf(ValidValueHolder,),)
            test("-3",   () => expect(newIterableWithSizeHandler(ABCD,).get(-3,),).toBeInstanceOf(ValidValueHolder,),)
            test("-2",   () => expect(newIterableWithSizeHandler(ABCD,).get(-2,),).toBeInstanceOf(ValidValueHolder,),)
            test("-1",   () => expect(newIterableWithSizeHandler(ABCD,).get(-1,),).toBeInstanceOf(ValidValueHolder,),)
            test('0',    () => expect(newIterableWithSizeHandler(ABCD,).get(0,),).toBeInstanceOf(ValidValueHolder,),)
            test('1',    () => expect(newIterableWithSizeHandler(ABCD,).get(1,),).toBeInstanceOf(ValidValueHolder,),)
            test('2',    () => expect(newIterableWithSizeHandler(ABCD,).get(2,),).toBeInstanceOf(ValidValueHolder,),)
            test('3',    () => expect(newIterableWithSizeHandler(ABCD,).get(3,),).toBeInstanceOf(ValidValueHolder,),)
            test('4',    () => expect(newIterableWithSizeHandler(ABCD,).get(4,),).toBeInstanceOf(SizeIndexValueHolder,),)
            test('5',    () => expect(newIterableWithSizeHandler(ABCD,).get(5,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("500",  () => expect(newIterableWithSizeHandler(ABCD,).get(500,),).toBeInstanceOf(OverSizeIndexValueHolder,),)
            test("+∞",   () => expect(newIterableWithSizeHandler(ABCD,).get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
        },)
    },)
    describe("iterable with size of 1", () => {
        test("NaN",  () => expect(newIterableWithSizeOf1Handler().get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
        test("-∞",   () => expect(newIterableWithSizeOf1Handler().get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
        test("-500", () => expect(newIterableWithSizeOf1Handler().get(-500,),).toBeInstanceOf(Not0IndexAfterCalculationValueHolder,),)
        test("-3",   () => expect(newIterableWithSizeOf1Handler().get(-3,),).toBeInstanceOf(Not0IndexAfterCalculationValueHolder,),)
        test("-2",   () => expect(newIterableWithSizeOf1Handler().get(-2,),).toBeInstanceOf(Not0IndexAfterCalculationValueHolder,),)
        test("-1",   () => expect(newIterableWithSizeOf1Handler().get(-1,),).toBeInstanceOf(ValidValueHolder,),)
        test('0',    () => expect(newIterableWithSizeOf1Handler().get(0,),).toBeInstanceOf(ValidValueHolder,),)
        test('1',    () => expect(newIterableWithSizeOf1Handler().get(1,),).toBeInstanceOf(Not0IndexValueHolder,),)
        test('2',    () => expect(newIterableWithSizeOf1Handler().get(2,),).toBeInstanceOf(Not0IndexValueHolder,),)
        test("500",  () => expect(newIterableWithSizeOf1Handler().get(500,),).toBeInstanceOf(Not0IndexValueHolder,),)
        test("+∞",   () => expect(newIterableWithSizeOf1Handler().get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
    },)
    describe("iterable with size of 2", () => {
        test("NaN",  () => expect(newIterableWithSizeOf2Handler().get(NaN,),).toBeInstanceOf(NaNIndexValueHolder,),)
        test("-∞",   () => expect(newIterableWithSizeOf2Handler().get(-Infinity,),).toBeInstanceOf(NegativeInfinityIndexValueHolder,),)
        test("-500", () => expect(newIterableWithSizeOf2Handler().get(-500,),).toBeInstanceOf(Not0Or1IndexAfterCalculationValueHolder,),)
        test("-4",   () => expect(newIterableWithSizeOf2Handler().get(-4,),).toBeInstanceOf(Not0Or1IndexAfterCalculationValueHolder,),)
        test("-3",   () => expect(newIterableWithSizeOf2Handler().get(-3,),).toBeInstanceOf(Not0Or1IndexAfterCalculationValueHolder,),)
        test("-2",   () => expect(newIterableWithSizeOf2Handler().get(-2,),).toBeInstanceOf(ValidValueHolder,),)
        test("-1",   () => expect(newIterableWithSizeOf2Handler().get(-1,),).toBeInstanceOf(ValidValueHolder,),)
        test('0',    () => expect(newIterableWithSizeOf2Handler().get(0,),).toBeInstanceOf(ValidValueHolder,),)
        test('1',    () => expect(newIterableWithSizeOf2Handler().get(1,),).toBeInstanceOf(ValidValueHolder,),)
        test('2',    () => expect(newIterableWithSizeOf2Handler().get(2,),).toBeInstanceOf(Not0Or1IndexValueHolder,),)
        test('3',    () => expect(newIterableWithSizeOf2Handler().get(3,),).toBeInstanceOf(Not0Or1IndexValueHolder,),)
        test("500",  () => expect(newIterableWithSizeOf2Handler().get(500,),).toBeInstanceOf(Not0Or1IndexValueHolder,),)
        test("+∞",   () => expect(newIterableWithSizeOf2Handler().get(Infinity,),).toBeInstanceOf(PositiveInfinityIndexValueHolder,),)
    },)

},)
